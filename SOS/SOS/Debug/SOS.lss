
SOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001084  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000030  00800060  00001084  00001118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002d  00800090  00800090  00001148  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001148  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001178  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002d0  00000000  00000000  000011b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002af4  00000000  00000000  00001484  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001019  00000000  00000000  00003f78  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001dbf  00000000  00000000  00004f91  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005c8  00000000  00000000  00006d50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000010df  00000000  00000000  00007318  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002064  00000000  00000000  000083f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e0  00000000  00000000  0000a45b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 e2 01 	jmp	0x3c4	; 0x3c4 <__vector_1>
       8:	0c 94 0e 02 	jmp	0x41c	; 0x41c <__vector_2>
       c:	0c 94 3a 02 	jmp	0x474	; 0x474 <__vector_3>
      10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      14:	0c 94 c9 03 	jmp	0x792	; 0x792 <__vector_5>
      18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      24:	0c 94 99 03 	jmp	0x732	; 0x732 <__vector_9>
      28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      2c:	0c 94 69 03 	jmp	0x6d2	; 0x6d2 <__vector_11>
      30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      54:	a6 04       	cpc	r10, r6
      56:	b1 04       	cpc	r11, r1
      58:	bc 04       	cpc	r11, r12
      5a:	cc 05       	cpc	r28, r12
      5c:	c7 04       	cpc	r12, r7
      5e:	cc 05       	cpc	r28, r12
      60:	d2 04       	cpc	r13, r2
      62:	dd 04       	cpc	r13, r13
      64:	e8 04       	cpc	r14, r8
      66:	f3 04       	cpc	r15, r3
      68:	09 05       	cpc	r16, r9
      6a:	14 05       	cpc	r17, r4
      6c:	1f 05       	cpc	r17, r15
      6e:	ce 05       	cpc	r28, r14
      70:	2a 05       	cpc	r18, r10
      72:	ce 05       	cpc	r28, r14
      74:	35 05       	cpc	r19, r5
      76:	40 05       	cpc	r20, r0
      78:	4b 05       	cpc	r20, r11
      7a:	56 05       	cpc	r21, r6
      7c:	6c 05       	cpc	r22, r12
      7e:	77 05       	cpc	r23, r7
      80:	82 05       	cpc	r24, r2
      82:	8d 05       	cpc	r24, r13
      84:	98 05       	cpc	r25, r8
      86:	a3 05       	cpc	r26, r3
      88:	ae 05       	cpc	r26, r14
      8a:	b9 05       	cpc	r27, r9

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf e5       	ldi	r28, 0x5F	; 95
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	10 e0       	ldi	r17, 0x00	; 0
      9a:	a0 e6       	ldi	r26, 0x60	; 96
      9c:	b0 e0       	ldi	r27, 0x00	; 0
      9e:	e4 e8       	ldi	r30, 0x84	; 132
      a0:	f0 e1       	ldi	r31, 0x10	; 16
      a2:	02 c0       	rjmp	.+4      	; 0xa8 <__do_copy_data+0x10>
      a4:	05 90       	lpm	r0, Z+
      a6:	0d 92       	st	X+, r0
      a8:	a0 39       	cpi	r26, 0x90	; 144
      aa:	b1 07       	cpc	r27, r17
      ac:	d9 f7       	brne	.-10     	; 0xa4 <__do_copy_data+0xc>

000000ae <__do_clear_bss>:
      ae:	20 e0       	ldi	r18, 0x00	; 0
      b0:	a0 e9       	ldi	r26, 0x90	; 144
      b2:	b0 e0       	ldi	r27, 0x00	; 0
      b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
      b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
      b8:	ad 3b       	cpi	r26, 0xBD	; 189
      ba:	b2 07       	cpc	r27, r18
      bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
      be:	0e 94 35 01 	call	0x26a	; 0x26a <main>
      c2:	0c 94 40 08 	jmp	0x1080	; 0x1080 <_exit>

000000c6 <__bad_interrupt>:
      c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <Start_sos_handler>:



static void Start_sos_handler(void)
{
	Start_Flag=1;
      ca:	81 e0       	ldi	r24, 0x01	; 1
      cc:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <Start_Flag>
      d0:	08 95       	ret

000000d2 <Stop_sos_handler>:
}

static void Stop_sos_handler(void)
{
	Start_Flag=2;
      d2:	82 e0       	ldi	r24, 0x02	; 2
      d4:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <Start_Flag>
      d8:	08 95       	ret

000000da <task_2_handler>:



static void task_2_handler(void)
{	
	LED_turn_toggle(&st_g_led1_instance);
      da:	80 e6       	ldi	r24, 0x60	; 96
      dc:	90 e0       	ldi	r25, 0x00	; 0
      de:	0e 94 23 01 	call	0x246	; 0x246 <LED_turn_toggle>
	u8_sg_counter++;
      e2:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
      e6:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__data_end+0x1>
      ea:	01 96       	adiw	r24, 0x01	; 1
      ec:	90 93 91 00 	sts	0x0091, r25	; 0x800091 <__data_end+0x1>
      f0:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__data_end>
      f4:	08 95       	ret

000000f6 <task_1_handler>:
}


static void task_1_handler(void)
{
	LED_turn_toggle(&st_g_led0_instance);	
      f6:	83 e6       	ldi	r24, 0x63	; 99
      f8:	90 e0       	ldi	r25, 0x00	; 0
      fa:	0e 94 23 01 	call	0x246	; 0x246 <LED_turn_toggle>
      fe:	08 95       	ret

00000100 <APP_init>:
	u8_sg_counter++;
}

Std_ReturnType APP_init()
{
	GLOBAL_InterruptEnable();
     100:	8f b7       	in	r24, 0x3f	; 63
     102:	80 68       	ori	r24, 0x80	; 128
     104:	8f bf       	out	0x3f, r24	; 63
	
	enu_sg_ret |=SOS_init();
     106:	0e 94 ce 06 	call	0xd9c	; 0xd9c <SOS_init>
     10a:	90 91 92 00 	lds	r25, 0x0092	; 0x800092 <enu_sg_ret>
     10e:	89 2b       	or	r24, r25
     110:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <enu_sg_ret>
	if(SOS_E_NOK==enu_sg_ret)
     114:	88 23       	and	r24, r24
     116:	09 f4       	brne	.+2      	; 0x11a <APP_init+0x1a>
     118:	66 c0       	rjmp	.+204    	; 0x1e6 <APP_init+0xe6>
	{
		// handle TASK fail initialization
		return enu_sg_ret;
	}
	enu_sg_ret = LED_initialize(&st_g_led0_instance);
     11a:	83 e6       	ldi	r24, 0x63	; 99
     11c:	90 e0       	ldi	r25, 0x00	; 0
     11e:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LED_initialize>
     122:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <enu_sg_ret>
	if(E_NOT_OK==enu_sg_ret)
     126:	88 23       	and	r24, r24
     128:	09 f4       	brne	.+2      	; 0x12c <APP_init+0x2c>
     12a:	5d c0       	rjmp	.+186    	; 0x1e6 <APP_init+0xe6>
	{
		// handle led fail initialization
		return enu_sg_ret;
	}
	enu_sg_ret |= LED_initialize(&st_g_led1_instance);
     12c:	80 e6       	ldi	r24, 0x60	; 96
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LED_initialize>
     134:	90 91 92 00 	lds	r25, 0x0092	; 0x800092 <enu_sg_ret>
     138:	89 2b       	or	r24, r25
     13a:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <enu_sg_ret>
	if(E_NOT_OK==enu_sg_ret)
     13e:	88 23       	and	r24, r24
     140:	09 f4       	brne	.+2      	; 0x144 <APP_init+0x44>
     142:	51 c0       	rjmp	.+162    	; 0x1e6 <APP_init+0xe6>
	{
		// handle led fail initialization
		return enu_sg_ret;
	}
	str_g_task_1_.Fptr_task_callBack = task_1_handler;
     144:	8b e7       	ldi	r24, 0x7B	; 123
     146:	90 e0       	ldi	r25, 0x00	; 0
     148:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <str_g_task_1_+0x6>
     14c:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <str_g_task_1_+0x5>
	enu_sg_ret |=SOS_create_task(&str_g_task_1_);
     150:	8e e6       	ldi	r24, 0x6E	; 110
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	0e 94 a9 07 	call	0xf52	; 0xf52 <SOS_create_task>
     158:	90 91 92 00 	lds	r25, 0x0092	; 0x800092 <enu_sg_ret>
     15c:	89 2b       	or	r24, r25
     15e:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <enu_sg_ret>
	if(SOS_E_NOK==enu_sg_ret)
     162:	88 23       	and	r24, r24
     164:	09 f4       	brne	.+2      	; 0x168 <APP_init+0x68>
     166:	3f c0       	rjmp	.+126    	; 0x1e6 <APP_init+0xe6>
	{
		// handle TASK fail initialization
		return enu_sg_ret;
	}
	str_g_task_2_.Fptr_task_callBack = task_2_handler;
     168:	8d e6       	ldi	r24, 0x6D	; 109
     16a:	90 e0       	ldi	r25, 0x00	; 0
     16c:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <str_g_task_2_+0x6>
     170:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <str_g_task_2_+0x5>
	enu_sg_ret |=SOS_create_task(&str_g_task_2_);
     174:	87 e6       	ldi	r24, 0x67	; 103
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	0e 94 a9 07 	call	0xf52	; 0xf52 <SOS_create_task>
     17c:	90 91 92 00 	lds	r25, 0x0092	; 0x800092 <enu_sg_ret>
     180:	89 2b       	or	r24, r25
     182:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <enu_sg_ret>
	if(SOS_E_NOK==enu_sg_ret)
     186:	88 23       	and	r24, r24
     188:	71 f1       	breq	.+92     	; 0x1e6 <APP_init+0xe6>
	{
		// handle TASK fail initialization
		return enu_sg_ret;
	}
/********************************************External interrupt for start & stop SOS********************************************************************/
       enu_sg_ret|= EXT_INTx_setCallBack_manger(&Start_sos_handler,INTERRUPT_EXTERNAL_INT0);
     18a:	60 e0       	ldi	r22, 0x00	; 0
     18c:	85 e6       	ldi	r24, 0x65	; 101
     18e:	90 e0       	ldi	r25, 0x00	; 0
     190:	0e 94 d7 07 	call	0xfae	; 0xfae <EXT_INTx_setCallBack_manger>
     194:	90 91 92 00 	lds	r25, 0x0092	; 0x800092 <enu_sg_ret>
     198:	89 2b       	or	r24, r25
     19a:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <enu_sg_ret>
	   if (enu_sg_ret==E_NOT_OK)
     19e:	88 23       	and	r24, r24
     1a0:	11 f1       	breq	.+68     	; 0x1e6 <APP_init+0xe6>
	   }
	   else
	   {
		   //do nothing
	   }
       enu_sg_ret|= EXT_INTx_Init_manger(&s_INT0);
     1a2:	87 e7       	ldi	r24, 0x77	; 119
     1a4:	90 e0       	ldi	r25, 0x00	; 0
     1a6:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <EXT_INTx_Init_manger>
     1aa:	90 91 92 00 	lds	r25, 0x0092	; 0x800092 <enu_sg_ret>
     1ae:	89 2b       	or	r24, r25
     1b0:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <enu_sg_ret>
	    if (enu_sg_ret==E_NOT_OK)
     1b4:	88 23       	and	r24, r24
     1b6:	b9 f0       	breq	.+46     	; 0x1e6 <APP_init+0xe6>
	    }
		else
		{
			//do nothing
		}
		enu_sg_ret|= EXT_INTx_setCallBack_manger(&Stop_sos_handler,INTERRUPT_EXTERNAL_INT1);
     1b8:	61 e0       	ldi	r22, 0x01	; 1
     1ba:	89 e6       	ldi	r24, 0x69	; 105
     1bc:	90 e0       	ldi	r25, 0x00	; 0
     1be:	0e 94 d7 07 	call	0xfae	; 0xfae <EXT_INTx_setCallBack_manger>
     1c2:	90 91 92 00 	lds	r25, 0x0092	; 0x800092 <enu_sg_ret>
     1c6:	89 2b       	or	r24, r25
     1c8:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <enu_sg_ret>
		if (enu_sg_ret==E_NOT_OK)
     1cc:	88 23       	and	r24, r24
     1ce:	59 f0       	breq	.+22     	; 0x1e6 <APP_init+0xe6>
		}
		else
		{
			//do nothing
		}
		enu_sg_ret|= EXT_INTx_Init_manger(&s_INT1);
     1d0:	85 e7       	ldi	r24, 0x75	; 117
     1d2:	90 e0       	ldi	r25, 0x00	; 0
     1d4:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <EXT_INTx_Init_manger>
     1d8:	90 91 92 00 	lds	r25, 0x0092	; 0x800092 <enu_sg_ret>
     1dc:	89 2b       	or	r24, r25
     1de:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <enu_sg_ret>
		if (enu_sg_ret==E_NOT_OK)
     1e2:	88 23       	and	r24, r24
     1e4:	01 f0       	breq	.+0      	; 0x1e6 <APP_init+0xe6>
		else
		{
			//do nothing
		}

}
     1e6:	08 95       	ret

000001e8 <APP_start>:

void APP_start()
{	
	if (enu_sg_ret!=E_NOT_OK)
     1e8:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <enu_sg_ret>
     1ec:	81 11       	cpse	r24, r1
	{
		SOS_run();
     1ee:	0e 94 03 07 	call	0xe06	; 0xe06 <SOS_run>
     1f2:	08 95       	ret

000001f4 <LED_initialize>:
	else
	{
		ret = DIO_pin_write_logic(&(led_ptr->led_pin),DIO_LOGIC_LOW);
	}
	return ret;
}
     1f4:	cf 93       	push	r28
     1f6:	df 93       	push	r29
     1f8:	00 97       	sbiw	r24, 0x00	; 0
     1fa:	d9 f0       	breq	.+54     	; 0x232 <LED_initialize+0x3e>
     1fc:	fc 01       	movw	r30, r24
     1fe:	21 81       	ldd	r18, Z+1	; 0x01
     200:	28 30       	cpi	r18, 0x08	; 8
     202:	c8 f4       	brcc	.+50     	; 0x236 <LED_initialize+0x42>
     204:	20 81       	ld	r18, Z
     206:	24 30       	cpi	r18, 0x04	; 4
     208:	c0 f4       	brcc	.+48     	; 0x23a <LED_initialize+0x46>
     20a:	ec 01       	movw	r28, r24
     20c:	61 e0       	ldi	r22, 0x01	; 1
     20e:	0e 94 3c 01 	call	0x278	; 0x278 <DIO_pin_direction_intialize>
     212:	8a 81       	ldd	r24, Y+2	; 0x02
     214:	88 23       	and	r24, r24
     216:	19 f0       	breq	.+6      	; 0x21e <LED_initialize+0x2a>
     218:	81 30       	cpi	r24, 0x01	; 1
     21a:	31 f0       	breq	.+12     	; 0x228 <LED_initialize+0x34>
     21c:	10 c0       	rjmp	.+32     	; 0x23e <LED_initialize+0x4a>
     21e:	60 e0       	ldi	r22, 0x00	; 0
     220:	ce 01       	movw	r24, r28
     222:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <DIO_pin_write_logic>
     226:	0c c0       	rjmp	.+24     	; 0x240 <LED_initialize+0x4c>
     228:	61 e0       	ldi	r22, 0x01	; 1
     22a:	ce 01       	movw	r24, r28
     22c:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <DIO_pin_write_logic>
     230:	07 c0       	rjmp	.+14     	; 0x240 <LED_initialize+0x4c>
     232:	80 e0       	ldi	r24, 0x00	; 0
     234:	05 c0       	rjmp	.+10     	; 0x240 <LED_initialize+0x4c>
     236:	80 e0       	ldi	r24, 0x00	; 0
     238:	03 c0       	rjmp	.+6      	; 0x240 <LED_initialize+0x4c>
     23a:	80 e0       	ldi	r24, 0x00	; 0
     23c:	01 c0       	rjmp	.+2      	; 0x240 <LED_initialize+0x4c>
     23e:	80 e0       	ldi	r24, 0x00	; 0
     240:	df 91       	pop	r29
     242:	cf 91       	pop	r28
     244:	08 95       	ret

00000246 <LED_turn_toggle>:
Std_ReturnType LED_turn_toggle (const led_t *led_ptr)
{
	Std_ReturnType ret = E_OK;
	if(NULL == led_ptr || (led_ptr->led_pin.pin > PORT_PIN_MAX_NUMBER-1) || (led_ptr->led_pin.port > PORT_MAX_NUMBER-1))
     246:	00 97       	sbiw	r24, 0x00	; 0
     248:	51 f0       	breq	.+20     	; 0x25e <LED_turn_toggle+0x18>
     24a:	fc 01       	movw	r30, r24
     24c:	21 81       	ldd	r18, Z+1	; 0x01
     24e:	28 30       	cpi	r18, 0x08	; 8
     250:	40 f4       	brcc	.+16     	; 0x262 <LED_turn_toggle+0x1c>
     252:	20 81       	ld	r18, Z
     254:	24 30       	cpi	r18, 0x04	; 4
     256:	38 f4       	brcc	.+14     	; 0x266 <LED_turn_toggle+0x20>
	{
		ret = E_NOT_OK;
	}
	else
	{
		ret = DIO_pin_toggle_logic(&(led_ptr->led_pin));
     258:	0e 94 bd 01 	call	0x37a	; 0x37a <DIO_pin_toggle_logic>
     25c:	08 95       	ret
Std_ReturnType LED_turn_toggle (const led_t *led_ptr)
{
	Std_ReturnType ret = E_OK;
	if(NULL == led_ptr || (led_ptr->led_pin.pin > PORT_PIN_MAX_NUMBER-1) || (led_ptr->led_pin.port > PORT_MAX_NUMBER-1))
	{
		ret = E_NOT_OK;
     25e:	80 e0       	ldi	r24, 0x00	; 0
     260:	08 95       	ret
     262:	80 e0       	ldi	r24, 0x00	; 0
     264:	08 95       	ret
     266:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		ret = DIO_pin_toggle_logic(&(led_ptr->led_pin));
	}
	return ret;
     268:	08 95       	ret

0000026a <main>:



int main(void)
{
	APP_init();
     26a:	0e 94 80 00 	call	0x100	; 0x100 <APP_init>
	APP_start();
     26e:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <APP_start>

}
     272:	80 e0       	ldi	r24, 0x00	; 0
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	08 95       	ret

00000278 <DIO_pin_direction_intialize>:
	else
	{
		*logic_ptr = READ_BIT(*(pin_registers[pin_config_ptr->port]),pin_config_ptr->pin);
	}
	return ret;
}
     278:	00 97       	sbiw	r24, 0x00	; 0
     27a:	b1 f1       	breq	.+108    	; 0x2e8 <DIO_pin_direction_intialize+0x70>
     27c:	dc 01       	movw	r26, r24
     27e:	11 96       	adiw	r26, 0x01	; 1
     280:	2c 91       	ld	r18, X
     282:	11 97       	sbiw	r26, 0x01	; 1
     284:	28 30       	cpi	r18, 0x08	; 8
     286:	90 f5       	brcc	.+100    	; 0x2ec <DIO_pin_direction_intialize+0x74>
     288:	ec 91       	ld	r30, X
     28a:	e4 30       	cpi	r30, 0x04	; 4
     28c:	88 f5       	brcc	.+98     	; 0x2f0 <DIO_pin_direction_intialize+0x78>
     28e:	66 23       	and	r22, r22
     290:	b1 f0       	breq	.+44     	; 0x2be <DIO_pin_direction_intialize+0x46>
     292:	61 30       	cpi	r22, 0x01	; 1
     294:	79 f5       	brne	.+94     	; 0x2f4 <DIO_pin_direction_intialize+0x7c>
     296:	f0 e0       	ldi	r31, 0x00	; 0
     298:	ee 0f       	add	r30, r30
     29a:	ff 1f       	adc	r31, r31
     29c:	e8 57       	subi	r30, 0x78	; 120
     29e:	ff 4f       	sbci	r31, 0xFF	; 255
     2a0:	01 90       	ld	r0, Z+
     2a2:	f0 81       	ld	r31, Z
     2a4:	e0 2d       	mov	r30, r0
     2a6:	30 81       	ld	r19, Z
     2a8:	81 e0       	ldi	r24, 0x01	; 1
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <DIO_pin_direction_intialize+0x3a>
     2ae:	88 0f       	add	r24, r24
     2b0:	99 1f       	adc	r25, r25
     2b2:	2a 95       	dec	r18
     2b4:	e2 f7       	brpl	.-8      	; 0x2ae <DIO_pin_direction_intialize+0x36>
     2b6:	83 2b       	or	r24, r19
     2b8:	80 83       	st	Z, r24
     2ba:	81 e0       	ldi	r24, 0x01	; 1
     2bc:	08 95       	ret
     2be:	f0 e0       	ldi	r31, 0x00	; 0
     2c0:	ee 0f       	add	r30, r30
     2c2:	ff 1f       	adc	r31, r31
     2c4:	e8 57       	subi	r30, 0x78	; 120
     2c6:	ff 4f       	sbci	r31, 0xFF	; 255
     2c8:	01 90       	ld	r0, Z+
     2ca:	f0 81       	ld	r31, Z
     2cc:	e0 2d       	mov	r30, r0
     2ce:	30 81       	ld	r19, Z
     2d0:	81 e0       	ldi	r24, 0x01	; 1
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	02 c0       	rjmp	.+4      	; 0x2da <DIO_pin_direction_intialize+0x62>
     2d6:	88 0f       	add	r24, r24
     2d8:	99 1f       	adc	r25, r25
     2da:	2a 95       	dec	r18
     2dc:	e2 f7       	brpl	.-8      	; 0x2d6 <DIO_pin_direction_intialize+0x5e>
     2de:	80 95       	com	r24
     2e0:	83 23       	and	r24, r19
     2e2:	80 83       	st	Z, r24
     2e4:	81 e0       	ldi	r24, 0x01	; 1
     2e6:	08 95       	ret
     2e8:	80 e0       	ldi	r24, 0x00	; 0
     2ea:	08 95       	ret
     2ec:	80 e0       	ldi	r24, 0x00	; 0
     2ee:	08 95       	ret
     2f0:	80 e0       	ldi	r24, 0x00	; 0
     2f2:	08 95       	ret
     2f4:	80 e0       	ldi	r24, 0x00	; 0
     2f6:	08 95       	ret

000002f8 <DIO_pin_write_logic>:
     2f8:	00 97       	sbiw	r24, 0x00	; 0
     2fa:	b9 f1       	breq	.+110    	; 0x36a <DIO_pin_write_logic+0x72>
     2fc:	dc 01       	movw	r26, r24
     2fe:	11 96       	adiw	r26, 0x01	; 1
     300:	2c 91       	ld	r18, X
     302:	11 97       	sbiw	r26, 0x01	; 1
     304:	28 30       	cpi	r18, 0x08	; 8
     306:	98 f5       	brcc	.+102    	; 0x36e <DIO_pin_write_logic+0x76>
     308:	ec 91       	ld	r30, X
     30a:	e4 30       	cpi	r30, 0x04	; 4
     30c:	90 f5       	brcc	.+100    	; 0x372 <DIO_pin_write_logic+0x7a>
     30e:	66 23       	and	r22, r22
     310:	19 f0       	breq	.+6      	; 0x318 <DIO_pin_write_logic+0x20>
     312:	61 30       	cpi	r22, 0x01	; 1
     314:	b1 f0       	breq	.+44     	; 0x342 <DIO_pin_write_logic+0x4a>
     316:	2f c0       	rjmp	.+94     	; 0x376 <DIO_pin_write_logic+0x7e>
     318:	f0 e0       	ldi	r31, 0x00	; 0
     31a:	ee 0f       	add	r30, r30
     31c:	ff 1f       	adc	r31, r31
     31e:	e0 58       	subi	r30, 0x80	; 128
     320:	ff 4f       	sbci	r31, 0xFF	; 255
     322:	01 90       	ld	r0, Z+
     324:	f0 81       	ld	r31, Z
     326:	e0 2d       	mov	r30, r0
     328:	30 81       	ld	r19, Z
     32a:	81 e0       	ldi	r24, 0x01	; 1
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	02 c0       	rjmp	.+4      	; 0x334 <DIO_pin_write_logic+0x3c>
     330:	88 0f       	add	r24, r24
     332:	99 1f       	adc	r25, r25
     334:	2a 95       	dec	r18
     336:	e2 f7       	brpl	.-8      	; 0x330 <DIO_pin_write_logic+0x38>
     338:	80 95       	com	r24
     33a:	83 23       	and	r24, r19
     33c:	80 83       	st	Z, r24
     33e:	81 e0       	ldi	r24, 0x01	; 1
     340:	08 95       	ret
     342:	f0 e0       	ldi	r31, 0x00	; 0
     344:	ee 0f       	add	r30, r30
     346:	ff 1f       	adc	r31, r31
     348:	e0 58       	subi	r30, 0x80	; 128
     34a:	ff 4f       	sbci	r31, 0xFF	; 255
     34c:	01 90       	ld	r0, Z+
     34e:	f0 81       	ld	r31, Z
     350:	e0 2d       	mov	r30, r0
     352:	30 81       	ld	r19, Z
     354:	81 e0       	ldi	r24, 0x01	; 1
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	02 c0       	rjmp	.+4      	; 0x35e <DIO_pin_write_logic+0x66>
     35a:	88 0f       	add	r24, r24
     35c:	99 1f       	adc	r25, r25
     35e:	2a 95       	dec	r18
     360:	e2 f7       	brpl	.-8      	; 0x35a <DIO_pin_write_logic+0x62>
     362:	83 2b       	or	r24, r19
     364:	80 83       	st	Z, r24
     366:	81 e0       	ldi	r24, 0x01	; 1
     368:	08 95       	ret
     36a:	80 e0       	ldi	r24, 0x00	; 0
     36c:	08 95       	ret
     36e:	80 e0       	ldi	r24, 0x00	; 0
     370:	08 95       	ret
     372:	80 e0       	ldi	r24, 0x00	; 0
     374:	08 95       	ret
     376:	80 e0       	ldi	r24, 0x00	; 0
     378:	08 95       	ret

0000037a <DIO_pin_toggle_logic>:

Std_ReturnType DIO_pin_toggle_logic(const pin_config_t *pin_config_ptr)
{
	Std_ReturnType ret = E_OK;
	if(NULL == pin_config_ptr || (pin_config_ptr->pin > PORT_PIN_MAX_NUMBER-1) || (pin_config_ptr->port > PORT_MAX_NUMBER-1))
     37a:	00 97       	sbiw	r24, 0x00	; 0
     37c:	e9 f0       	breq	.+58     	; 0x3b8 <DIO_pin_toggle_logic+0x3e>
     37e:	dc 01       	movw	r26, r24
     380:	11 96       	adiw	r26, 0x01	; 1
     382:	2c 91       	ld	r18, X
     384:	11 97       	sbiw	r26, 0x01	; 1
     386:	28 30       	cpi	r18, 0x08	; 8
     388:	c8 f4       	brcc	.+50     	; 0x3bc <DIO_pin_toggle_logic+0x42>
     38a:	ec 91       	ld	r30, X
     38c:	e4 30       	cpi	r30, 0x04	; 4
     38e:	c0 f4       	brcc	.+48     	; 0x3c0 <DIO_pin_toggle_logic+0x46>
	{
		ret = E_NOT_OK;
	}
	else
	{
		 TOGGLE_BIT(*(port_registers[pin_config_ptr->port]),pin_config_ptr->pin);
     390:	f0 e0       	ldi	r31, 0x00	; 0
     392:	ee 0f       	add	r30, r30
     394:	ff 1f       	adc	r31, r31
     396:	e0 58       	subi	r30, 0x80	; 128
     398:	ff 4f       	sbci	r31, 0xFF	; 255
     39a:	01 90       	ld	r0, Z+
     39c:	f0 81       	ld	r31, Z
     39e:	e0 2d       	mov	r30, r0
     3a0:	30 81       	ld	r19, Z
     3a2:	81 e0       	ldi	r24, 0x01	; 1
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	02 c0       	rjmp	.+4      	; 0x3ac <DIO_pin_toggle_logic+0x32>
     3a8:	88 0f       	add	r24, r24
     3aa:	99 1f       	adc	r25, r25
     3ac:	2a 95       	dec	r18
     3ae:	e2 f7       	brpl	.-8      	; 0x3a8 <DIO_pin_toggle_logic+0x2e>
     3b0:	83 27       	eor	r24, r19
     3b2:	80 83       	st	Z, r24
	return ret;
}

Std_ReturnType DIO_pin_toggle_logic(const pin_config_t *pin_config_ptr)
{
	Std_ReturnType ret = E_OK;
     3b4:	81 e0       	ldi	r24, 0x01	; 1
     3b6:	08 95       	ret
	if(NULL == pin_config_ptr || (pin_config_ptr->pin > PORT_PIN_MAX_NUMBER-1) || (pin_config_ptr->port > PORT_MAX_NUMBER-1))
	{
		ret = E_NOT_OK;
     3b8:	80 e0       	ldi	r24, 0x00	; 0
     3ba:	08 95       	ret
     3bc:	80 e0       	ldi	r24, 0x00	; 0
     3be:	08 95       	ret
     3c0:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		 TOGGLE_BIT(*(port_registers[pin_config_ptr->port]),pin_config_ptr->pin);
	}
	return ret;
}
     3c2:	08 95       	ret

000003c4 <__vector_1>:
static  void(*g_EXT_INT0_fptr)(void) = NULL;
static void(*g_EXT_INT1_fptr)(void) = NULL;
static void(*g_EXT_INT2_fptr)(void) = NULL;

ISR(INT0_vect)
{
     3c4:	1f 92       	push	r1
     3c6:	0f 92       	push	r0
     3c8:	0f b6       	in	r0, 0x3f	; 63
     3ca:	0f 92       	push	r0
     3cc:	11 24       	eor	r1, r1
     3ce:	2f 93       	push	r18
     3d0:	3f 93       	push	r19
     3d2:	4f 93       	push	r20
     3d4:	5f 93       	push	r21
     3d6:	6f 93       	push	r22
     3d8:	7f 93       	push	r23
     3da:	8f 93       	push	r24
     3dc:	9f 93       	push	r25
     3de:	af 93       	push	r26
     3e0:	bf 93       	push	r27
     3e2:	ef 93       	push	r30
     3e4:	ff 93       	push	r31
	/* The INT0 external interrupt occurred (must be cleared in software) */
	EXT_INT0_InterruptFlagClear();
     3e6:	8a b7       	in	r24, 0x3a	; 58
     3e8:	80 64       	ori	r24, 0x40	; 64
     3ea:	8a bf       	out	0x3a, r24	; 58
	
	if(g_EXT_INT0_fptr)
     3ec:	e0 91 97 00 	lds	r30, 0x0097	; 0x800097 <g_EXT_INT0_fptr>
     3f0:	f0 91 98 00 	lds	r31, 0x0098	; 0x800098 <g_EXT_INT0_fptr+0x1>
     3f4:	30 97       	sbiw	r30, 0x00	; 0
     3f6:	09 f0       	breq	.+2      	; 0x3fa <__vector_1+0x36>
	{
		/* Application Callback function gets called every time this ISR executes */
		(g_EXT_INT0_fptr)();
     3f8:	09 95       	icall
	}
	else{/*do nothing*/}
}
     3fa:	ff 91       	pop	r31
     3fc:	ef 91       	pop	r30
     3fe:	bf 91       	pop	r27
     400:	af 91       	pop	r26
     402:	9f 91       	pop	r25
     404:	8f 91       	pop	r24
     406:	7f 91       	pop	r23
     408:	6f 91       	pop	r22
     40a:	5f 91       	pop	r21
     40c:	4f 91       	pop	r20
     40e:	3f 91       	pop	r19
     410:	2f 91       	pop	r18
     412:	0f 90       	pop	r0
     414:	0f be       	out	0x3f, r0	; 63
     416:	0f 90       	pop	r0
     418:	1f 90       	pop	r1
     41a:	18 95       	reti

0000041c <__vector_2>:

ISR(INT1_vect)
{
     41c:	1f 92       	push	r1
     41e:	0f 92       	push	r0
     420:	0f b6       	in	r0, 0x3f	; 63
     422:	0f 92       	push	r0
     424:	11 24       	eor	r1, r1
     426:	2f 93       	push	r18
     428:	3f 93       	push	r19
     42a:	4f 93       	push	r20
     42c:	5f 93       	push	r21
     42e:	6f 93       	push	r22
     430:	7f 93       	push	r23
     432:	8f 93       	push	r24
     434:	9f 93       	push	r25
     436:	af 93       	push	r26
     438:	bf 93       	push	r27
     43a:	ef 93       	push	r30
     43c:	ff 93       	push	r31
	/* The INT1 external interrupt occurred (must be cleared in software) */
	EXT_INT1_InterruptFlagClear();
     43e:	8a b7       	in	r24, 0x3a	; 58
     440:	80 68       	ori	r24, 0x80	; 128
     442:	8a bf       	out	0x3a, r24	; 58
	if(g_EXT_INT1_fptr)
     444:	e0 91 95 00 	lds	r30, 0x0095	; 0x800095 <g_EXT_INT1_fptr>
     448:	f0 91 96 00 	lds	r31, 0x0096	; 0x800096 <g_EXT_INT1_fptr+0x1>
     44c:	30 97       	sbiw	r30, 0x00	; 0
     44e:	09 f0       	breq	.+2      	; 0x452 <__vector_2+0x36>
	{
		/* Application Callback function gets called every time this ISR executes */
		(*g_EXT_INT1_fptr)();
     450:	09 95       	icall
	}
	else{/*do nothing*/}
}
     452:	ff 91       	pop	r31
     454:	ef 91       	pop	r30
     456:	bf 91       	pop	r27
     458:	af 91       	pop	r26
     45a:	9f 91       	pop	r25
     45c:	8f 91       	pop	r24
     45e:	7f 91       	pop	r23
     460:	6f 91       	pop	r22
     462:	5f 91       	pop	r21
     464:	4f 91       	pop	r20
     466:	3f 91       	pop	r19
     468:	2f 91       	pop	r18
     46a:	0f 90       	pop	r0
     46c:	0f be       	out	0x3f, r0	; 63
     46e:	0f 90       	pop	r0
     470:	1f 90       	pop	r1
     472:	18 95       	reti

00000474 <__vector_3>:

ISR(INT2_vect)
{
     474:	1f 92       	push	r1
     476:	0f 92       	push	r0
     478:	0f b6       	in	r0, 0x3f	; 63
     47a:	0f 92       	push	r0
     47c:	11 24       	eor	r1, r1
     47e:	2f 93       	push	r18
     480:	3f 93       	push	r19
     482:	4f 93       	push	r20
     484:	5f 93       	push	r21
     486:	6f 93       	push	r22
     488:	7f 93       	push	r23
     48a:	8f 93       	push	r24
     48c:	9f 93       	push	r25
     48e:	af 93       	push	r26
     490:	bf 93       	push	r27
     492:	ef 93       	push	r30
     494:	ff 93       	push	r31
	/* The INT1 external interrupt occurred (must be cleared in software) */
	EXT_INT1_InterruptFlagClear();
     496:	8a b7       	in	r24, 0x3a	; 58
     498:	80 68       	ori	r24, 0x80	; 128
     49a:	8a bf       	out	0x3a, r24	; 58
	if(g_EXT_INT2_fptr)
     49c:	e0 91 93 00 	lds	r30, 0x0093	; 0x800093 <g_EXT_INT2_fptr>
     4a0:	f0 91 94 00 	lds	r31, 0x0094	; 0x800094 <g_EXT_INT2_fptr+0x1>
     4a4:	30 97       	sbiw	r30, 0x00	; 0
     4a6:	09 f0       	breq	.+2      	; 0x4aa <__vector_3+0x36>
	{
		/* Application Callback function gets called every time this ISR executes */
		(*g_EXT_INT2_fptr)();
     4a8:	09 95       	icall
	}
	else{/*do nothing*/}
}
     4aa:	ff 91       	pop	r31
     4ac:	ef 91       	pop	r30
     4ae:	bf 91       	pop	r27
     4b0:	af 91       	pop	r26
     4b2:	9f 91       	pop	r25
     4b4:	8f 91       	pop	r24
     4b6:	7f 91       	pop	r23
     4b8:	6f 91       	pop	r22
     4ba:	5f 91       	pop	r21
     4bc:	4f 91       	pop	r20
     4be:	3f 91       	pop	r19
     4c0:	2f 91       	pop	r18
     4c2:	0f 90       	pop	r0
     4c4:	0f be       	out	0x3f, r0	; 63
     4c6:	0f 90       	pop	r0
     4c8:	1f 90       	pop	r1
     4ca:	18 95       	reti

000004cc <EXT_INTx_setCallBack>:

Std_ReturnType EXT_INTx_setCallBack( void(*a_fptr)(void),  Interrupt_ID_t a_interrupt_number )
{
	Std_ReturnType ret = E_OK;
	if(NULL == a_fptr || a_interrupt_number > NUM_OF_EXT_INTx - 1)
     4cc:	00 97       	sbiw	r24, 0x00	; 0
     4ce:	d1 f0       	breq	.+52     	; 0x504 <EXT_INTx_setCallBack+0x38>
     4d0:	63 30       	cpi	r22, 0x03	; 3
     4d2:	d0 f4       	brcc	.+52     	; 0x508 <EXT_INTx_setCallBack+0x3c>
	{
		ret = E_NOT_OK;
	}
	else
	{
		switch(a_interrupt_number)
     4d4:	61 30       	cpi	r22, 0x01	; 1
     4d6:	51 f0       	breq	.+20     	; 0x4ec <EXT_INTx_setCallBack+0x20>
     4d8:	18 f0       	brcs	.+6      	; 0x4e0 <EXT_INTx_setCallBack+0x14>
     4da:	62 30       	cpi	r22, 0x02	; 2
     4dc:	69 f0       	breq	.+26     	; 0x4f8 <EXT_INTx_setCallBack+0x2c>
     4de:	16 c0       	rjmp	.+44     	; 0x50c <EXT_INTx_setCallBack+0x40>
		{
			case INTERRUPT_EXTERNAL_INT0:
				g_EXT_INT0_fptr = a_fptr;
     4e0:	90 93 98 00 	sts	0x0098, r25	; 0x800098 <g_EXT_INT0_fptr+0x1>
     4e4:	80 93 97 00 	sts	0x0097, r24	; 0x800097 <g_EXT_INT0_fptr>
	else{/*do nothing*/}
}

Std_ReturnType EXT_INTx_setCallBack( void(*a_fptr)(void),  Interrupt_ID_t a_interrupt_number )
{
	Std_ReturnType ret = E_OK;
     4e8:	81 e0       	ldi	r24, 0x01	; 1
	{
		switch(a_interrupt_number)
		{
			case INTERRUPT_EXTERNAL_INT0:
				g_EXT_INT0_fptr = a_fptr;
				break;
     4ea:	08 95       	ret
			case INTERRUPT_EXTERNAL_INT1:
				g_EXT_INT1_fptr = a_fptr;
     4ec:	90 93 96 00 	sts	0x0096, r25	; 0x800096 <g_EXT_INT1_fptr+0x1>
     4f0:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <g_EXT_INT1_fptr>
	else{/*do nothing*/}
}

Std_ReturnType EXT_INTx_setCallBack( void(*a_fptr)(void),  Interrupt_ID_t a_interrupt_number )
{
	Std_ReturnType ret = E_OK;
     4f4:	81 e0       	ldi	r24, 0x01	; 1
			case INTERRUPT_EXTERNAL_INT0:
				g_EXT_INT0_fptr = a_fptr;
				break;
			case INTERRUPT_EXTERNAL_INT1:
				g_EXT_INT1_fptr = a_fptr;
				break;
     4f6:	08 95       	ret
			case INTERRUPT_EXTERNAL_INT2:
				g_EXT_INT2_fptr = a_fptr;
     4f8:	90 93 94 00 	sts	0x0094, r25	; 0x800094 <g_EXT_INT2_fptr+0x1>
     4fc:	80 93 93 00 	sts	0x0093, r24	; 0x800093 <g_EXT_INT2_fptr>
	else{/*do nothing*/}
}

Std_ReturnType EXT_INTx_setCallBack( void(*a_fptr)(void),  Interrupt_ID_t a_interrupt_number )
{
	Std_ReturnType ret = E_OK;
     500:	81 e0       	ldi	r24, 0x01	; 1
			case INTERRUPT_EXTERNAL_INT1:
				g_EXT_INT1_fptr = a_fptr;
				break;
			case INTERRUPT_EXTERNAL_INT2:
				g_EXT_INT2_fptr = a_fptr;
				break;
     502:	08 95       	ret
Std_ReturnType EXT_INTx_setCallBack( void(*a_fptr)(void),  Interrupt_ID_t a_interrupt_number )
{
	Std_ReturnType ret = E_OK;
	if(NULL == a_fptr || a_interrupt_number > NUM_OF_EXT_INTx - 1)
	{
		ret = E_NOT_OK;
     504:	80 e0       	ldi	r24, 0x00	; 0
     506:	08 95       	ret
     508:	80 e0       	ldi	r24, 0x00	; 0
     50a:	08 95       	ret
				break;
			case INTERRUPT_EXTERNAL_INT2:
				g_EXT_INT2_fptr = a_fptr;
				break;
			default:
				ret = E_NOT_OK;
     50c:	80 e0       	ldi	r24, 0x00	; 0
				break;		
		}	
	}
	return ret;
}
     50e:	08 95       	ret

00000510 <EXT_INTx_setEdgeType>:

Std_ReturnType EXT_INTx_setEdgeType(Interrupt_Edge_type_t a_edgeType ,  Interrupt_ID_t a_interrupt_Id)
{
	Std_ReturnType ret = E_OK;
	if(a_interrupt_Id > NUM_OF_EXT_INTx - 1 || a_edgeType > NOT_VALID_EDGE)
     510:	63 30       	cpi	r22, 0x03	; 3
     512:	08 f0       	brcs	.+2      	; 0x516 <EXT_INTx_setEdgeType+0x6>
     514:	69 c0       	rjmp	.+210    	; 0x5e8 <EXT_INTx_setEdgeType+0xd8>
     516:	85 30       	cpi	r24, 0x05	; 5
     518:	08 f0       	brcs	.+2      	; 0x51c <EXT_INTx_setEdgeType+0xc>
     51a:	68 c0       	rjmp	.+208    	; 0x5ec <EXT_INTx_setEdgeType+0xdc>
	{
		ret = E_NOT_OK;
	}
	else
	{
		switch(a_interrupt_Id)
     51c:	61 30       	cpi	r22, 0x01	; 1
     51e:	69 f1       	breq	.+90     	; 0x57a <EXT_INTx_setEdgeType+0x6a>
     520:	20 f0       	brcs	.+8      	; 0x52a <EXT_INTx_setEdgeType+0x1a>
     522:	62 30       	cpi	r22, 0x02	; 2
     524:	09 f4       	brne	.+2      	; 0x528 <EXT_INTx_setEdgeType+0x18>
     526:	51 c0       	rjmp	.+162    	; 0x5ca <EXT_INTx_setEdgeType+0xba>
     528:	63 c0       	rjmp	.+198    	; 0x5f0 <EXT_INTx_setEdgeType+0xe0>
		{
			case INTERRUPT_EXTERNAL_INT0:
				switch(a_edgeType)
     52a:	81 30       	cpi	r24, 0x01	; 1
     52c:	71 f0       	breq	.+28     	; 0x54a <EXT_INTx_setEdgeType+0x3a>
     52e:	28 f0       	brcs	.+10     	; 0x53a <EXT_INTx_setEdgeType+0x2a>
     530:	82 30       	cpi	r24, 0x02	; 2
     532:	99 f0       	breq	.+38     	; 0x55a <EXT_INTx_setEdgeType+0x4a>
     534:	83 30       	cpi	r24, 0x03	; 3
     536:	c9 f0       	breq	.+50     	; 0x56a <EXT_INTx_setEdgeType+0x5a>
     538:	5d c0       	rjmp	.+186    	; 0x5f4 <EXT_INTx_setEdgeType+0xe4>
				{
					case INTERRUPT_LOW_LEVEL:
						CLEAR_BIT(MCUCR,ISC00);
     53a:	85 b7       	in	r24, 0x35	; 53
     53c:	8e 7f       	andi	r24, 0xFE	; 254
     53e:	85 bf       	out	0x35, r24	; 53
						CLEAR_BIT(MCUCR,ISC01);
     540:	85 b7       	in	r24, 0x35	; 53
     542:	8d 7f       	andi	r24, 0xFD	; 253
     544:	85 bf       	out	0x35, r24	; 53
	return ret;
}

Std_ReturnType EXT_INTx_setEdgeType(Interrupt_Edge_type_t a_edgeType ,  Interrupt_ID_t a_interrupt_Id)
{
	Std_ReturnType ret = E_OK;
     546:	81 e0       	ldi	r24, 0x01	; 1
				switch(a_edgeType)
				{
					case INTERRUPT_LOW_LEVEL:
						CLEAR_BIT(MCUCR,ISC00);
						CLEAR_BIT(MCUCR,ISC01);
						break;
     548:	08 95       	ret
					case INTERRUPT_ANY_LOGICAL_CHANGE:
						SET_BIT(MCUCR,ISC00);
     54a:	85 b7       	in	r24, 0x35	; 53
     54c:	81 60       	ori	r24, 0x01	; 1
     54e:	85 bf       	out	0x35, r24	; 53
						CLEAR_BIT(MCUCR,ISC01);
     550:	85 b7       	in	r24, 0x35	; 53
     552:	8d 7f       	andi	r24, 0xFD	; 253
     554:	85 bf       	out	0x35, r24	; 53
	return ret;
}

Std_ReturnType EXT_INTx_setEdgeType(Interrupt_Edge_type_t a_edgeType ,  Interrupt_ID_t a_interrupt_Id)
{
	Std_ReturnType ret = E_OK;
     556:	81 e0       	ldi	r24, 0x01	; 1
						CLEAR_BIT(MCUCR,ISC01);
						break;
					case INTERRUPT_ANY_LOGICAL_CHANGE:
						SET_BIT(MCUCR,ISC00);
						CLEAR_BIT(MCUCR,ISC01);
						break;
     558:	08 95       	ret
					case INTERRUPT_FALLING_EDGE:
						CLEAR_BIT(MCUCR,ISC00);
     55a:	85 b7       	in	r24, 0x35	; 53
     55c:	8e 7f       	andi	r24, 0xFE	; 254
     55e:	85 bf       	out	0x35, r24	; 53
						SET_BIT(MCUCR,ISC01);
     560:	85 b7       	in	r24, 0x35	; 53
     562:	82 60       	ori	r24, 0x02	; 2
     564:	85 bf       	out	0x35, r24	; 53
	return ret;
}

Std_ReturnType EXT_INTx_setEdgeType(Interrupt_Edge_type_t a_edgeType ,  Interrupt_ID_t a_interrupt_Id)
{
	Std_ReturnType ret = E_OK;
     566:	81 e0       	ldi	r24, 0x01	; 1
						CLEAR_BIT(MCUCR,ISC01);
						break;
					case INTERRUPT_FALLING_EDGE:
						CLEAR_BIT(MCUCR,ISC00);
						SET_BIT(MCUCR,ISC01);
						break;
     568:	08 95       	ret
					case INTERRUPT_RISING_EDGE:
						SET_BIT(MCUCR,ISC00);
     56a:	85 b7       	in	r24, 0x35	; 53
     56c:	81 60       	ori	r24, 0x01	; 1
     56e:	85 bf       	out	0x35, r24	; 53
						SET_BIT(MCUCR,ISC01);
     570:	85 b7       	in	r24, 0x35	; 53
     572:	82 60       	ori	r24, 0x02	; 2
     574:	85 bf       	out	0x35, r24	; 53
	return ret;
}

Std_ReturnType EXT_INTx_setEdgeType(Interrupt_Edge_type_t a_edgeType ,  Interrupt_ID_t a_interrupt_Id)
{
	Std_ReturnType ret = E_OK;
     576:	81 e0       	ldi	r24, 0x01	; 1
						SET_BIT(MCUCR,ISC01);
						break;
					case INTERRUPT_RISING_EDGE:
						SET_BIT(MCUCR,ISC00);
						SET_BIT(MCUCR,ISC01);
						break;
     578:	08 95       	ret
				}
				break;
			
			case INTERRUPT_EXTERNAL_INT1:
			
				switch(a_edgeType)
     57a:	81 30       	cpi	r24, 0x01	; 1
     57c:	71 f0       	breq	.+28     	; 0x59a <EXT_INTx_setEdgeType+0x8a>
     57e:	28 f0       	brcs	.+10     	; 0x58a <EXT_INTx_setEdgeType+0x7a>
     580:	82 30       	cpi	r24, 0x02	; 2
     582:	99 f0       	breq	.+38     	; 0x5aa <EXT_INTx_setEdgeType+0x9a>
     584:	83 30       	cpi	r24, 0x03	; 3
     586:	c9 f0       	breq	.+50     	; 0x5ba <EXT_INTx_setEdgeType+0xaa>
     588:	37 c0       	rjmp	.+110    	; 0x5f8 <EXT_INTx_setEdgeType+0xe8>
				{
					case INTERRUPT_LOW_LEVEL:
						CLEAR_BIT(MCUCR,ISC10);
     58a:	85 b7       	in	r24, 0x35	; 53
     58c:	8b 7f       	andi	r24, 0xFB	; 251
     58e:	85 bf       	out	0x35, r24	; 53
						CLEAR_BIT(MCUCR,ISC11);
     590:	85 b7       	in	r24, 0x35	; 53
     592:	87 7f       	andi	r24, 0xF7	; 247
     594:	85 bf       	out	0x35, r24	; 53
	return ret;
}

Std_ReturnType EXT_INTx_setEdgeType(Interrupt_Edge_type_t a_edgeType ,  Interrupt_ID_t a_interrupt_Id)
{
	Std_ReturnType ret = E_OK;
     596:	81 e0       	ldi	r24, 0x01	; 1
				switch(a_edgeType)
				{
					case INTERRUPT_LOW_LEVEL:
						CLEAR_BIT(MCUCR,ISC10);
						CLEAR_BIT(MCUCR,ISC11);
						break;
     598:	08 95       	ret
					case INTERRUPT_ANY_LOGICAL_CHANGE:
						SET_BIT(MCUCR,ISC10);
     59a:	85 b7       	in	r24, 0x35	; 53
     59c:	84 60       	ori	r24, 0x04	; 4
     59e:	85 bf       	out	0x35, r24	; 53
						CLEAR_BIT(MCUCR,ISC11);
     5a0:	85 b7       	in	r24, 0x35	; 53
     5a2:	87 7f       	andi	r24, 0xF7	; 247
     5a4:	85 bf       	out	0x35, r24	; 53
	return ret;
}

Std_ReturnType EXT_INTx_setEdgeType(Interrupt_Edge_type_t a_edgeType ,  Interrupt_ID_t a_interrupt_Id)
{
	Std_ReturnType ret = E_OK;
     5a6:	81 e0       	ldi	r24, 0x01	; 1
						CLEAR_BIT(MCUCR,ISC11);
						break;
					case INTERRUPT_ANY_LOGICAL_CHANGE:
						SET_BIT(MCUCR,ISC10);
						CLEAR_BIT(MCUCR,ISC11);
						break;
     5a8:	08 95       	ret
					case INTERRUPT_FALLING_EDGE:
						CLEAR_BIT(MCUCR,ISC10);
     5aa:	85 b7       	in	r24, 0x35	; 53
     5ac:	8b 7f       	andi	r24, 0xFB	; 251
     5ae:	85 bf       	out	0x35, r24	; 53
						SET_BIT(MCUCR,ISC11);
     5b0:	85 b7       	in	r24, 0x35	; 53
     5b2:	88 60       	ori	r24, 0x08	; 8
     5b4:	85 bf       	out	0x35, r24	; 53
	return ret;
}

Std_ReturnType EXT_INTx_setEdgeType(Interrupt_Edge_type_t a_edgeType ,  Interrupt_ID_t a_interrupt_Id)
{
	Std_ReturnType ret = E_OK;
     5b6:	81 e0       	ldi	r24, 0x01	; 1
						CLEAR_BIT(MCUCR,ISC11);
						break;
					case INTERRUPT_FALLING_EDGE:
						CLEAR_BIT(MCUCR,ISC10);
						SET_BIT(MCUCR,ISC11);
						break;
     5b8:	08 95       	ret
					case INTERRUPT_RISING_EDGE:
						SET_BIT(MCUCR,ISC10);
     5ba:	85 b7       	in	r24, 0x35	; 53
     5bc:	84 60       	ori	r24, 0x04	; 4
     5be:	85 bf       	out	0x35, r24	; 53
						SET_BIT(MCUCR,ISC11);
     5c0:	85 b7       	in	r24, 0x35	; 53
     5c2:	88 60       	ori	r24, 0x08	; 8
     5c4:	85 bf       	out	0x35, r24	; 53
	return ret;
}

Std_ReturnType EXT_INTx_setEdgeType(Interrupt_Edge_type_t a_edgeType ,  Interrupt_ID_t a_interrupt_Id)
{
	Std_ReturnType ret = E_OK;
     5c6:	81 e0       	ldi	r24, 0x01	; 1
						SET_BIT(MCUCR,ISC11);
						break;
					case INTERRUPT_RISING_EDGE:
						SET_BIT(MCUCR,ISC10);
						SET_BIT(MCUCR,ISC11);
						break;
     5c8:	08 95       	ret
				}
				break;
			
			case INTERRUPT_EXTERNAL_INT2:
			
				switch(a_edgeType)
     5ca:	82 30       	cpi	r24, 0x02	; 2
     5cc:	19 f0       	breq	.+6      	; 0x5d4 <EXT_INTx_setEdgeType+0xc4>
     5ce:	83 30       	cpi	r24, 0x03	; 3
     5d0:	31 f0       	breq	.+12     	; 0x5de <EXT_INTx_setEdgeType+0xce>
     5d2:	14 c0       	rjmp	.+40     	; 0x5fc <EXT_INTx_setEdgeType+0xec>
				{
					case INTERRUPT_FALLING_EDGE:
						CLEAR_BIT(MCUCSR,ISC2);
     5d4:	84 b7       	in	r24, 0x34	; 52
     5d6:	8f 7b       	andi	r24, 0xBF	; 191
     5d8:	84 bf       	out	0x34, r24	; 52
	return ret;
}

Std_ReturnType EXT_INTx_setEdgeType(Interrupt_Edge_type_t a_edgeType ,  Interrupt_ID_t a_interrupt_Id)
{
	Std_ReturnType ret = E_OK;
     5da:	81 e0       	ldi	r24, 0x01	; 1
			
				switch(a_edgeType)
				{
					case INTERRUPT_FALLING_EDGE:
						CLEAR_BIT(MCUCSR,ISC2);
						break;
     5dc:	08 95       	ret
					case INTERRUPT_RISING_EDGE:
						SET_BIT(MCUCSR,ISC2);
     5de:	84 b7       	in	r24, 0x34	; 52
     5e0:	80 64       	ori	r24, 0x40	; 64
     5e2:	84 bf       	out	0x34, r24	; 52
	return ret;
}

Std_ReturnType EXT_INTx_setEdgeType(Interrupt_Edge_type_t a_edgeType ,  Interrupt_ID_t a_interrupt_Id)
{
	Std_ReturnType ret = E_OK;
     5e4:	81 e0       	ldi	r24, 0x01	; 1
					case INTERRUPT_FALLING_EDGE:
						CLEAR_BIT(MCUCSR,ISC2);
						break;
					case INTERRUPT_RISING_EDGE:
						SET_BIT(MCUCSR,ISC2);
						break;
     5e6:	08 95       	ret
Std_ReturnType EXT_INTx_setEdgeType(Interrupt_Edge_type_t a_edgeType ,  Interrupt_ID_t a_interrupt_Id)
{
	Std_ReturnType ret = E_OK;
	if(a_interrupt_Id > NUM_OF_EXT_INTx - 1 || a_edgeType > NOT_VALID_EDGE)
	{
		ret = E_NOT_OK;
     5e8:	80 e0       	ldi	r24, 0x00	; 0
     5ea:	08 95       	ret
     5ec:	80 e0       	ldi	r24, 0x00	; 0
     5ee:	08 95       	ret
						break;
				}
				break;
			
			default:
				ret = E_NOT_OK;
     5f0:	80 e0       	ldi	r24, 0x00	; 0
     5f2:	08 95       	ret
					case INTERRUPT_RISING_EDGE:
						SET_BIT(MCUCR,ISC00);
						SET_BIT(MCUCR,ISC01);
						break;
					default:
						ret = E_NOT_OK;
     5f4:	80 e0       	ldi	r24, 0x00	; 0
     5f6:	08 95       	ret
					case INTERRUPT_RISING_EDGE:
						SET_BIT(MCUCR,ISC10);
						SET_BIT(MCUCR,ISC11);
						break;
					default:
						ret = E_NOT_OK;
     5f8:	80 e0       	ldi	r24, 0x00	; 0
     5fa:	08 95       	ret
						break;
					case INTERRUPT_RISING_EDGE:
						SET_BIT(MCUCSR,ISC2);
						break;
					default:
						ret = E_NOT_OK;
     5fc:	80 e0       	ldi	r24, 0x00	; 0
				ret = E_NOT_OK;
				break;
		}
	}
	return ret;
}
     5fe:	08 95       	ret

00000600 <EXT_INTx_Init>:

Std_ReturnType EXT_INTx_Init( Interrupt_Config_t *Interrupt_Config_Ptr )
{
     600:	1f 93       	push	r17
     602:	cf 93       	push	r28
     604:	df 93       	push	r29
     606:	00 d0       	rcall	.+0      	; 0x608 <EXT_INTx_Init+0x8>
     608:	cd b7       	in	r28, 0x3d	; 61
     60a:	de b7       	in	r29, 0x3e	; 62
	Std_ReturnType ret = E_OK;
	if(NULL == Interrupt_Config_Ptr || Interrupt_Config_Ptr->source_id > NUM_OF_EXT_INTx - 1)
     60c:	00 97       	sbiw	r24, 0x00	; 0
     60e:	09 f4       	brne	.+2      	; 0x612 <EXT_INTx_Init+0x12>
     610:	57 c0       	rjmp	.+174    	; 0x6c0 <EXT_INTx_Init+0xc0>
     612:	fc 01       	movw	r30, r24
     614:	21 81       	ldd	r18, Z+1	; 0x01
     616:	23 30       	cpi	r18, 0x03	; 3
     618:	08 f0       	brcs	.+2      	; 0x61c <EXT_INTx_Init+0x1c>
     61a:	54 c0       	rjmp	.+168    	; 0x6c4 <EXT_INTx_Init+0xc4>
	{
		ret = E_NOT_OK;
	}
	else
	{
		switch(Interrupt_Config_Ptr->source_id)
     61c:	21 30       	cpi	r18, 0x01	; 1
     61e:	e9 f0       	breq	.+58     	; 0x65a <EXT_INTx_Init+0x5a>
     620:	18 f0       	brcs	.+6      	; 0x628 <EXT_INTx_Init+0x28>
     622:	22 30       	cpi	r18, 0x02	; 2
     624:	91 f1       	breq	.+100    	; 0x68a <EXT_INTx_Init+0x8a>
     626:	4a c0       	rjmp	.+148    	; 0x6bc <EXT_INTx_Init+0xbc>
		{
			case INTERRUPT_EXTERNAL_INT0:
			
				/* Disable the External interrupt */
				EXT_INT0_InterruptDisable();
     628:	2b b7       	in	r18, 0x3b	; 59
     62a:	2f 7b       	andi	r18, 0xBF	; 191
     62c:	2b bf       	out	0x3b, r18	; 59
				/* Clear Interrupt Flag : External interrupt did not occur */
				EXT_INT0_InterruptFlagClear();
     62e:	2a b7       	in	r18, 0x3a	; 58
     630:	20 64       	ori	r18, 0x40	; 64
     632:	2a bf       	out	0x3a, r18	; 58
				/* Configure External interrupt edge */
				ret = EXT_INTx_setEdgeType(Interrupt_Config_Ptr->edge,INTERRUPT_EXTERNAL_INT0);
     634:	60 e0       	ldi	r22, 0x00	; 0
     636:	80 81       	ld	r24, Z
     638:	0e 94 88 02 	call	0x510	; 0x510 <EXT_INTx_setEdgeType>
     63c:	18 2f       	mov	r17, r24
				/* Configure External interrupt I/O pin */
				pin_config_t INT0_PIN={.pin=PIN2,.port=PORTD_INDEX};
     63e:	83 e0       	ldi	r24, 0x03	; 3
     640:	89 83       	std	Y+1, r24	; 0x01
     642:	82 e0       	ldi	r24, 0x02	; 2
     644:	8a 83       	std	Y+2, r24	; 0x02
				ret |= DIO_pin_direction_intialize(&INT0_PIN,DIO_DIRECTION_INPUT);
     646:	60 e0       	ldi	r22, 0x00	; 0
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	0e 94 3c 01 	call	0x278	; 0x278 <DIO_pin_direction_intialize>
     650:	81 2b       	or	r24, r17
				/* Enable the External interrupt */
				EXT_INT0_InterruptEnable();
     652:	9b b7       	in	r25, 0x3b	; 59
     654:	90 64       	ori	r25, 0x40	; 64
     656:	9b bf       	out	0x3b, r25	; 59
				break;
     658:	36 c0       	rjmp	.+108    	; 0x6c6 <EXT_INTx_Init+0xc6>
				
			case INTERRUPT_EXTERNAL_INT1:
			
				/* Disable the External interrupt */
				EXT_INT1_InterruptDisable();
     65a:	2b b7       	in	r18, 0x3b	; 59
     65c:	2f 77       	andi	r18, 0x7F	; 127
     65e:	2b bf       	out	0x3b, r18	; 59
				/* Clear Interrupt Flag : External interrupt did not occur */
				EXT_INT1_InterruptFlagClear();
     660:	2a b7       	in	r18, 0x3a	; 58
     662:	20 68       	ori	r18, 0x80	; 128
     664:	2a bf       	out	0x3a, r18	; 58
				/* Configure External interrupt edge */
				ret = EXT_INTx_setEdgeType(Interrupt_Config_Ptr->edge,INTERRUPT_EXTERNAL_INT1);
     666:	61 e0       	ldi	r22, 0x01	; 1
     668:	80 81       	ld	r24, Z
     66a:	0e 94 88 02 	call	0x510	; 0x510 <EXT_INTx_setEdgeType>
     66e:	18 2f       	mov	r17, r24
				/* Configure External interrupt I/O pin */
				pin_config_t INT1_PIN={.pin=PIN3,.port=PORTD_INDEX};
     670:	83 e0       	ldi	r24, 0x03	; 3
     672:	89 83       	std	Y+1, r24	; 0x01
     674:	8a 83       	std	Y+2, r24	; 0x02
				ret |= DIO_pin_direction_intialize(&INT1_PIN,DIO_DIRECTION_INPUT);
     676:	60 e0       	ldi	r22, 0x00	; 0
     678:	ce 01       	movw	r24, r28
     67a:	01 96       	adiw	r24, 0x01	; 1
     67c:	0e 94 3c 01 	call	0x278	; 0x278 <DIO_pin_direction_intialize>
     680:	81 2b       	or	r24, r17
				/* Enable the External interrupt */
				EXT_INT1_InterruptEnable();
     682:	9b b7       	in	r25, 0x3b	; 59
     684:	90 68       	ori	r25, 0x80	; 128
     686:	9b bf       	out	0x3b, r25	; 59
				break;
     688:	1e c0       	rjmp	.+60     	; 0x6c6 <EXT_INTx_Init+0xc6>
				
				
			case INTERRUPT_EXTERNAL_INT2:
			
				/* Disable the External interrupt */
				EXT_INT2_InterruptDisable();
     68a:	2b b7       	in	r18, 0x3b	; 59
     68c:	2f 7d       	andi	r18, 0xDF	; 223
     68e:	2b bf       	out	0x3b, r18	; 59
				/* Clear Interrupt Flag : External interrupt did not occur */
				EXT_INT2_InterruptFlagClear();
     690:	2a b7       	in	r18, 0x3a	; 58
     692:	20 62       	ori	r18, 0x20	; 32
     694:	2a bf       	out	0x3a, r18	; 58
				/* Configure External interrupt edge */
				ret = EXT_INTx_setEdgeType(Interrupt_Config_Ptr->edge,INTERRUPT_EXTERNAL_INT2);
     696:	62 e0       	ldi	r22, 0x02	; 2
     698:	80 81       	ld	r24, Z
     69a:	0e 94 88 02 	call	0x510	; 0x510 <EXT_INTx_setEdgeType>
     69e:	18 2f       	mov	r17, r24
				/* Configure External interrupt I/O pin */
				pin_config_t INT2_PIN={.pin=PIN2,.port=PORTB};
     6a0:	88 b3       	in	r24, 0x18	; 24
     6a2:	89 83       	std	Y+1, r24	; 0x01
     6a4:	82 e0       	ldi	r24, 0x02	; 2
     6a6:	8a 83       	std	Y+2, r24	; 0x02
				ret |= DIO_pin_direction_intialize(&INT2_PIN,DIO_DIRECTION_INPUT);
     6a8:	60 e0       	ldi	r22, 0x00	; 0
     6aa:	ce 01       	movw	r24, r28
     6ac:	01 96       	adiw	r24, 0x01	; 1
     6ae:	0e 94 3c 01 	call	0x278	; 0x278 <DIO_pin_direction_intialize>
     6b2:	81 2b       	or	r24, r17
				/* Enable the External interrupt */
				EXT_INT1_InterruptEnable();
     6b4:	9b b7       	in	r25, 0x3b	; 59
     6b6:	90 68       	ori	r25, 0x80	; 128
     6b8:	9b bf       	out	0x3b, r25	; 59
				break;
     6ba:	05 c0       	rjmp	.+10     	; 0x6c6 <EXT_INTx_Init+0xc6>
				
			default:
				ret = E_NOT_OK;
     6bc:	80 e0       	ldi	r24, 0x00	; 0
     6be:	03 c0       	rjmp	.+6      	; 0x6c6 <EXT_INTx_Init+0xc6>
Std_ReturnType EXT_INTx_Init( Interrupt_Config_t *Interrupt_Config_Ptr )
{
	Std_ReturnType ret = E_OK;
	if(NULL == Interrupt_Config_Ptr || Interrupt_Config_Ptr->source_id > NUM_OF_EXT_INTx - 1)
	{
		ret = E_NOT_OK;
     6c0:	80 e0       	ldi	r24, 0x00	; 0
     6c2:	01 c0       	rjmp	.+2      	; 0x6c6 <EXT_INTx_Init+0xc6>
     6c4:	80 e0       	ldi	r24, 0x00	; 0
				ret = E_NOT_OK;
				break;
		}
	}
	return ret;
}
     6c6:	0f 90       	pop	r0
     6c8:	0f 90       	pop	r0
     6ca:	df 91       	pop	r29
     6cc:	cf 91       	pop	r28
     6ce:	1f 91       	pop	r17
     6d0:	08 95       	ret

000006d2 <__vector_11>:
static timerCallBack sg_Timer0_callBackPtr = NULL;
static timerCallBack sg_Timer1_callBackPtr = NULL;
static timerCallBack sg_Timer2_callBackPtr = NULL;

ISR(TIMER0_OVF)
{
     6d2:	1f 92       	push	r1
     6d4:	0f 92       	push	r0
     6d6:	0f b6       	in	r0, 0x3f	; 63
     6d8:	0f 92       	push	r0
     6da:	11 24       	eor	r1, r1
     6dc:	2f 93       	push	r18
     6de:	3f 93       	push	r19
     6e0:	4f 93       	push	r20
     6e2:	5f 93       	push	r21
     6e4:	6f 93       	push	r22
     6e6:	7f 93       	push	r23
     6e8:	8f 93       	push	r24
     6ea:	9f 93       	push	r25
     6ec:	af 93       	push	r26
     6ee:	bf 93       	push	r27
     6f0:	ef 93       	push	r30
     6f2:	ff 93       	push	r31
	if(sg_Timer0_callBackPtr != NULL)
     6f4:	80 91 9d 00 	lds	r24, 0x009D	; 0x80009d <sg_Timer0_callBackPtr>
     6f8:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <sg_Timer0_callBackPtr+0x1>
     6fc:	89 2b       	or	r24, r25
     6fe:	41 f0       	breq	.+16     	; 0x710 <__vector_11+0x3e>
	{
		// The timer0 overflow  occurred (must be cleared in software)
		CLEAR_BIT(TIFR,TOV0);
     700:	88 b7       	in	r24, 0x38	; 56
     702:	8e 7f       	andi	r24, 0xFE	; 254
     704:	88 bf       	out	0x38, r24	; 56
		//Call the Call Back function in the upper layer after the timer overflow
		(sg_Timer0_callBackPtr)();
     706:	e0 91 9d 00 	lds	r30, 0x009D	; 0x80009d <sg_Timer0_callBackPtr>
     70a:	f0 91 9e 00 	lds	r31, 0x009E	; 0x80009e <sg_Timer0_callBackPtr+0x1>
     70e:	09 95       	icall
	}
}
     710:	ff 91       	pop	r31
     712:	ef 91       	pop	r30
     714:	bf 91       	pop	r27
     716:	af 91       	pop	r26
     718:	9f 91       	pop	r25
     71a:	8f 91       	pop	r24
     71c:	7f 91       	pop	r23
     71e:	6f 91       	pop	r22
     720:	5f 91       	pop	r21
     722:	4f 91       	pop	r20
     724:	3f 91       	pop	r19
     726:	2f 91       	pop	r18
     728:	0f 90       	pop	r0
     72a:	0f be       	out	0x3f, r0	; 63
     72c:	0f 90       	pop	r0
     72e:	1f 90       	pop	r1
     730:	18 95       	reti

00000732 <__vector_9>:

ISR(TIMER1_OVF)
{
     732:	1f 92       	push	r1
     734:	0f 92       	push	r0
     736:	0f b6       	in	r0, 0x3f	; 63
     738:	0f 92       	push	r0
     73a:	11 24       	eor	r1, r1
     73c:	2f 93       	push	r18
     73e:	3f 93       	push	r19
     740:	4f 93       	push	r20
     742:	5f 93       	push	r21
     744:	6f 93       	push	r22
     746:	7f 93       	push	r23
     748:	8f 93       	push	r24
     74a:	9f 93       	push	r25
     74c:	af 93       	push	r26
     74e:	bf 93       	push	r27
     750:	ef 93       	push	r30
     752:	ff 93       	push	r31
	if(sg_Timer1_callBackPtr != NULL)
     754:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <sg_Timer1_callBackPtr>
     758:	90 91 9c 00 	lds	r25, 0x009C	; 0x80009c <sg_Timer1_callBackPtr+0x1>
     75c:	89 2b       	or	r24, r25
     75e:	41 f0       	breq	.+16     	; 0x770 <__vector_9+0x3e>
	{
		// The timer1 overflow  occurred (must be cleared in software)
		CLEAR_BIT(TIFR,TOV1);
     760:	88 b7       	in	r24, 0x38	; 56
     762:	8b 7f       	andi	r24, 0xFB	; 251
     764:	88 bf       	out	0x38, r24	; 56
		// Call the Call Back function in the upper layer after the timer overflow
		(sg_Timer1_callBackPtr)();
     766:	e0 91 9b 00 	lds	r30, 0x009B	; 0x80009b <sg_Timer1_callBackPtr>
     76a:	f0 91 9c 00 	lds	r31, 0x009C	; 0x80009c <sg_Timer1_callBackPtr+0x1>
     76e:	09 95       	icall
		
	}
}
     770:	ff 91       	pop	r31
     772:	ef 91       	pop	r30
     774:	bf 91       	pop	r27
     776:	af 91       	pop	r26
     778:	9f 91       	pop	r25
     77a:	8f 91       	pop	r24
     77c:	7f 91       	pop	r23
     77e:	6f 91       	pop	r22
     780:	5f 91       	pop	r21
     782:	4f 91       	pop	r20
     784:	3f 91       	pop	r19
     786:	2f 91       	pop	r18
     788:	0f 90       	pop	r0
     78a:	0f be       	out	0x3f, r0	; 63
     78c:	0f 90       	pop	r0
     78e:	1f 90       	pop	r1
     790:	18 95       	reti

00000792 <__vector_5>:

ISR(TIMER2_OVF)
{
     792:	1f 92       	push	r1
     794:	0f 92       	push	r0
     796:	0f b6       	in	r0, 0x3f	; 63
     798:	0f 92       	push	r0
     79a:	11 24       	eor	r1, r1
     79c:	2f 93       	push	r18
     79e:	3f 93       	push	r19
     7a0:	4f 93       	push	r20
     7a2:	5f 93       	push	r21
     7a4:	6f 93       	push	r22
     7a6:	7f 93       	push	r23
     7a8:	8f 93       	push	r24
     7aa:	9f 93       	push	r25
     7ac:	af 93       	push	r26
     7ae:	bf 93       	push	r27
     7b0:	ef 93       	push	r30
     7b2:	ff 93       	push	r31
	if(sg_Timer2_callBackPtr != NULL)
     7b4:	80 91 99 00 	lds	r24, 0x0099	; 0x800099 <sg_Timer2_callBackPtr>
     7b8:	90 91 9a 00 	lds	r25, 0x009A	; 0x80009a <sg_Timer2_callBackPtr+0x1>
     7bc:	89 2b       	or	r24, r25
     7be:	41 f0       	breq	.+16     	; 0x7d0 <__vector_5+0x3e>
	{
		//The timer2 overflow  occurred (must be cleared in software) 
		CLEAR_BIT(TIFR,TOV2);
     7c0:	88 b7       	in	r24, 0x38	; 56
     7c2:	8f 7b       	andi	r24, 0xBF	; 191
     7c4:	88 bf       	out	0x38, r24	; 56
		//Call the Call Back function in the upper layer after the timer overflow
		(sg_Timer2_callBackPtr)();
     7c6:	e0 91 99 00 	lds	r30, 0x0099	; 0x800099 <sg_Timer2_callBackPtr>
     7ca:	f0 91 9a 00 	lds	r31, 0x009A	; 0x80009a <sg_Timer2_callBackPtr+0x1>
     7ce:	09 95       	icall
	}
}
     7d0:	ff 91       	pop	r31
     7d2:	ef 91       	pop	r30
     7d4:	bf 91       	pop	r27
     7d6:	af 91       	pop	r26
     7d8:	9f 91       	pop	r25
     7da:	8f 91       	pop	r24
     7dc:	7f 91       	pop	r23
     7de:	6f 91       	pop	r22
     7e0:	5f 91       	pop	r21
     7e2:	4f 91       	pop	r20
     7e4:	3f 91       	pop	r19
     7e6:	2f 91       	pop	r18
     7e8:	0f 90       	pop	r0
     7ea:	0f be       	out	0x3f, r0	; 63
     7ec:	0f 90       	pop	r0
     7ee:	1f 90       	pop	r1
     7f0:	18 95       	reti

000007f2 <TIMER_init>:

u8_en_timerErrorsType TIMER_init (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==st_config || st_config->u8_timerNum >= TIMER_INVALID_NUM || st_config->u8_timerClock >= TIMER_INVALID_CLOCK)
     7f2:	00 97       	sbiw	r24, 0x00	; 0
     7f4:	09 f4       	brne	.+2      	; 0x7f8 <TIMER_init+0x6>
     7f6:	7c c0       	rjmp	.+248    	; 0x8f0 <__stack+0x91>
     7f8:	fc 01       	movw	r30, r24
     7fa:	20 81       	ld	r18, Z
     7fc:	23 30       	cpi	r18, 0x03	; 3
     7fe:	08 f0       	brcs	.+2      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
     800:	79 c0       	rjmp	.+242    	; 0x8f4 <__stack+0x95>
     802:	31 81       	ldd	r19, Z+1	; 0x01
     804:	3a 30       	cpi	r19, 0x0A	; 10
     806:	08 f0       	brcs	.+2      	; 0x80a <__DATA_REGION_LENGTH__+0xa>
     808:	77 c0       	rjmp	.+238    	; 0x8f8 <__stack+0x99>
	{
		l_ret = TIMER_E_NOT_OK;
	}
	else
	{
		switch(st_config->u8_timerNum)
     80a:	21 30       	cpi	r18, 0x01	; 1
     80c:	19 f1       	breq	.+70     	; 0x854 <__DATA_REGION_LENGTH__+0x54>
     80e:	20 f0       	brcs	.+8      	; 0x818 <__DATA_REGION_LENGTH__+0x18>
     810:	22 30       	cpi	r18, 0x02	; 2
     812:	09 f4       	brne	.+2      	; 0x816 <__DATA_REGION_LENGTH__+0x16>
     814:	50 c0       	rjmp	.+160    	; 0x8b6 <__stack+0x57>
     816:	72 c0       	rjmp	.+228    	; 0x8fc <__stack+0x9d>
		{
			
			case TIMER_0:
				/*Clear registers of Timer0 before processing any of them*/
				CLEAR_REG(TCNT0);
     818:	12 be       	out	0x32, r1	; 50
				CLEAR_REG(TCCR0);
     81a:	13 be       	out	0x33, r1	; 51
				CLEAR_REG(OCR0);
     81c:	1c be       	out	0x3c, r1	; 60
				/*Configure initial value in TCNT0 for Timer0 to start count from it*/
				TCNT0 = st_config->u16_timer_InitialValue & U8_BIT_REG_MASK;
     81e:	fc 01       	movw	r30, r24
     820:	22 81       	ldd	r18, Z+2	; 0x02
     822:	22 bf       	out	0x32, r18	; 50
				
				/*Configure the TIMER0 with normal  mode value and enable the interrupt for this mode if interrupt feature activated */
				
				/*Make FOC0 to be Active as it is overflow mode(for non-PWM mode)*/
				SET_BIT(TCCR0,FOC0);
     824:	23 b7       	in	r18, 0x33	; 51
     826:	20 68       	ori	r18, 0x80	; 128
     828:	23 bf       	out	0x33, r18	; 51
				/*Normal Overflow mode*/
				CLEAR_BIT(TCCR0,WGM00);
     82a:	23 b7       	in	r18, 0x33	; 51
     82c:	2f 7b       	andi	r18, 0xBF	; 191
     82e:	23 bf       	out	0x33, r18	; 51
				CLEAR_BIT(TCCR0,WGM01);
     830:	23 b7       	in	r18, 0x33	; 51
     832:	27 7f       	andi	r18, 0xF7	; 247
     834:	23 bf       	out	0x33, r18	; 51
				/*Normal port operation, OC0 disconnected*/
				CLEAR_BIT(TCCR0,COM00);
     836:	23 b7       	in	r18, 0x33	; 51
     838:	2f 7e       	andi	r18, 0xEF	; 239
     83a:	23 bf       	out	0x33, r18	; 51
				CLEAR_BIT(TCCR0,COM01);
     83c:	23 b7       	in	r18, 0x33	; 51
     83e:	2f 7d       	andi	r18, 0xDF	; 223
     840:	23 bf       	out	0x33, r18	; 51
				if(TIMER_INTERRUPT_FEATURE_ENABLE==st_config->u8_timer_ovf_int_enable)
     842:	84 81       	ldd	r24, Z+4	; 0x04
     844:	81 30       	cpi	r24, 0x01	; 1
     846:	09 f0       	breq	.+2      	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
     848:	5b c0       	rjmp	.+182    	; 0x900 <__stack+0xa1>
				{
					/* Enable Timer0 overflow interrupt*/
					SET_BIT(TIMSK,TOIE0);
     84a:	89 b7       	in	r24, 0x39	; 57
     84c:	81 60       	ori	r24, 0x01	; 1
     84e:	89 bf       	out	0x39, r24	; 57
	}
}

u8_en_timerErrorsType TIMER_init (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     850:	80 e0       	ldi	r24, 0x00	; 0
     852:	08 95       	ret
				
				break;
			
			case TIMER_1:
				/*Clear registers of Timer1 before processing any of them*/
				CLEAR_REG(TCNT1L);
     854:	1c bc       	out	0x2c, r1	; 44
				CLEAR_REG(TCNT1H);
     856:	1d bc       	out	0x2d, r1	; 45
				CLEAR_REG(TCCR1A);
     858:	1f bc       	out	0x2f, r1	; 47
				CLEAR_REG(TCCR1B);
     85a:	1e bc       	out	0x2e, r1	; 46
				CLEAR_REG(OCR1AH);
     85c:	1b bc       	out	0x2b, r1	; 43
				CLEAR_REG(OCR1AL);
     85e:	1a bc       	out	0x2a, r1	; 42
				/*Configure initial value in TCNT1(high&low) for Timer0 to start count from it*/
				TCNT1 = st_config->u16_timer_InitialValue;
     860:	fc 01       	movw	r30, r24
     862:	22 81       	ldd	r18, Z+2	; 0x02
     864:	33 81       	ldd	r19, Z+3	; 0x03
     866:	3d bd       	out	0x2d, r19	; 45
     868:	2c bd       	out	0x2c, r18	; 44
				TCNT1H = (st_config->u16_timer_InitialValue >> 8) & U8_BIT_REG_MASK;*/
				#endif
				
				/*Configure the TIMER1 with normal  mode value and enable the interrupt for this mode if interrupt feature activated */
				/*Make FOC1A,FOC1B to be Active as it is overflow mode(for non-PWM mode)*/
				SET_BIT(TCCR1A,FOC1A);
     86a:	2f b5       	in	r18, 0x2f	; 47
     86c:	28 60       	ori	r18, 0x08	; 8
     86e:	2f bd       	out	0x2f, r18	; 47
				SET_BIT(TCCR1A,FOC1B);
     870:	2f b5       	in	r18, 0x2f	; 47
     872:	24 60       	ori	r18, 0x04	; 4
     874:	2f bd       	out	0x2f, r18	; 47
				/*Normal Overflow mode*/
				CLEAR_BIT(TCCR1A,WGM10);
     876:	2f b5       	in	r18, 0x2f	; 47
     878:	2e 7f       	andi	r18, 0xFE	; 254
     87a:	2f bd       	out	0x2f, r18	; 47
				CLEAR_BIT(TCCR1A,WGM11);
     87c:	2f b5       	in	r18, 0x2f	; 47
     87e:	2d 7f       	andi	r18, 0xFD	; 253
     880:	2f bd       	out	0x2f, r18	; 47
				CLEAR_BIT(TCCR1B,WGM12);
     882:	2e b5       	in	r18, 0x2e	; 46
     884:	2f 7e       	andi	r18, 0xEF	; 239
     886:	2e bd       	out	0x2e, r18	; 46
				CLEAR_BIT(TCCR1B,WGM13);
     888:	2e b5       	in	r18, 0x2e	; 46
     88a:	27 7f       	andi	r18, 0xF7	; 247
     88c:	2e bd       	out	0x2e, r18	; 46
				/*Normal port operation, OC1A/OC1B disconnected.*/
				CLEAR_BIT(TCCR1A,COM1A0);
     88e:	2f b5       	in	r18, 0x2f	; 47
     890:	2f 7b       	andi	r18, 0xBF	; 191
     892:	2f bd       	out	0x2f, r18	; 47
				CLEAR_BIT(TCCR1A,COM1A1);
     894:	2f b5       	in	r18, 0x2f	; 47
     896:	2f 77       	andi	r18, 0x7F	; 127
     898:	2f bd       	out	0x2f, r18	; 47
				CLEAR_BIT(TCCR1A,COM1B0);
     89a:	2f b5       	in	r18, 0x2f	; 47
     89c:	2f 7e       	andi	r18, 0xEF	; 239
     89e:	2f bd       	out	0x2f, r18	; 47
				CLEAR_BIT(TCCR1A,COM1B1);
     8a0:	2f b5       	in	r18, 0x2f	; 47
     8a2:	2f 7d       	andi	r18, 0xDF	; 223
     8a4:	2f bd       	out	0x2f, r18	; 47
				
				if(TIMER_INTERRUPT_FEATURE_ENABLE==st_config->u8_timer_ovf_int_enable)
     8a6:	84 81       	ldd	r24, Z+4	; 0x04
     8a8:	81 30       	cpi	r24, 0x01	; 1
     8aa:	61 f5       	brne	.+88     	; 0x904 <__stack+0xa5>
				{
					/* Enable Timer1 overflow interrupt*/
					//TIMSK |= 1<<TOIE1;
					SET_BIT(TIMSK,TOIE1);
     8ac:	89 b7       	in	r24, 0x39	; 57
     8ae:	84 60       	ori	r24, 0x04	; 4
     8b0:	89 bf       	out	0x39, r24	; 57
	}
}

u8_en_timerErrorsType TIMER_init (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     8b2:	80 e0       	ldi	r24, 0x00	; 0
     8b4:	08 95       	ret
				
				break;
			
			case TIMER_2:
				/*Clear registers of Timer2 before processing any of them*/
				CLEAR_REG(TCNT2);
     8b6:	14 bc       	out	0x24, r1	; 36
				CLEAR_REG(TCCR2);
     8b8:	15 bc       	out	0x25, r1	; 37
				CLEAR_REG(OCR2);
     8ba:	13 bc       	out	0x23, r1	; 35
				/*Configure initial value in TCNT for Timer2 to start count from it*/
				TCNT2 = st_config->u16_timer_InitialValue & U8_BIT_REG_MASK;
     8bc:	fc 01       	movw	r30, r24
     8be:	22 81       	ldd	r18, Z+2	; 0x02
     8c0:	24 bd       	out	0x24, r18	; 36
				/*Configure the TIMER2 with normal  mode value and enable the interrupt for this mode if interrupt feature activated */
				/*Make FOC2 to be Active as it is overflow mode(for non-PWM mode)*/
				SET_BIT(TCCR2,FOC2);
     8c2:	25 b5       	in	r18, 0x25	; 37
     8c4:	20 68       	ori	r18, 0x80	; 128
     8c6:	25 bd       	out	0x25, r18	; 37
				/*Normal Overflow mode*/
				CLEAR_BIT(TCCR2,WGM20);
     8c8:	25 b5       	in	r18, 0x25	; 37
     8ca:	2f 7b       	andi	r18, 0xBF	; 191
     8cc:	25 bd       	out	0x25, r18	; 37
				CLEAR_BIT(TCCR2,WGM21);
     8ce:	25 b5       	in	r18, 0x25	; 37
     8d0:	27 7f       	andi	r18, 0xF7	; 247
     8d2:	25 bd       	out	0x25, r18	; 37
				/*Normal port operation, OC2 disconnected*/
				CLEAR_BIT(TCCR2,COM20);
     8d4:	25 b5       	in	r18, 0x25	; 37
     8d6:	2f 7e       	andi	r18, 0xEF	; 239
     8d8:	25 bd       	out	0x25, r18	; 37
				CLEAR_BIT(TCCR2,COM21);
     8da:	25 b5       	in	r18, 0x25	; 37
     8dc:	2f 7d       	andi	r18, 0xDF	; 223
     8de:	25 bd       	out	0x25, r18	; 37
				if(TIMER_INTERRUPT_FEATURE_ENABLE==st_config->u8_timer_ovf_int_enable)
     8e0:	84 81       	ldd	r24, Z+4	; 0x04
     8e2:	81 30       	cpi	r24, 0x01	; 1
     8e4:	89 f4       	brne	.+34     	; 0x908 <__stack+0xa9>
				{
					/* Enable Timer2 overflow interrupt*/
					SET_BIT(TIMSK,TOIE2);
     8e6:	89 b7       	in	r24, 0x39	; 57
     8e8:	80 64       	ori	r24, 0x40	; 64
     8ea:	89 bf       	out	0x39, r24	; 57
	}
}

u8_en_timerErrorsType TIMER_init (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	08 95       	ret
	if(NULL==st_config || st_config->u8_timerNum >= TIMER_INVALID_NUM || st_config->u8_timerClock >= TIMER_INVALID_CLOCK)
	{
		l_ret = TIMER_E_NOT_OK;
     8f0:	83 e0       	ldi	r24, 0x03	; 3
     8f2:	08 95       	ret
     8f4:	83 e0       	ldi	r24, 0x03	; 3
     8f6:	08 95       	ret
     8f8:	83 e0       	ldi	r24, 0x03	; 3
     8fa:	08 95       	ret
				}
				
				break;
			
			default:
				l_ret |= TIMER_E_NOT_OK;
     8fc:	83 e0       	ldi	r24, 0x03	; 3
     8fe:	08 95       	ret
	}
}

u8_en_timerErrorsType TIMER_init (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     900:	80 e0       	ldi	r24, 0x00	; 0
     902:	08 95       	ret
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	08 95       	ret
     908:	80 e0       	ldi	r24, 0x00	; 0
				l_ret |= TIMER_E_NOT_OK;
				break;
		}
	}
	return l_ret;
}
     90a:	08 95       	ret

0000090c <TIMER_start>:
u8_en_timerErrorsType TIMER_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==st_config || st_config->u8_timerNum >= TIMER_INVALID_NUM || st_config->u8_timerClock >= TIMER_INVALID_CLOCK)
     90c:	00 97       	sbiw	r24, 0x00	; 0
     90e:	09 f4       	brne	.+2      	; 0x912 <TIMER_start+0x6>
     910:	3b c1       	rjmp	.+630    	; 0xb88 <TIMER_start+0x27c>
     912:	dc 01       	movw	r26, r24
     914:	2c 91       	ld	r18, X
     916:	23 30       	cpi	r18, 0x03	; 3
     918:	08 f0       	brcs	.+2      	; 0x91c <TIMER_start+0x10>
     91a:	38 c1       	rjmp	.+624    	; 0xb8c <TIMER_start+0x280>
     91c:	11 96       	adiw	r26, 0x01	; 1
     91e:	ec 91       	ld	r30, X
     920:	ea 30       	cpi	r30, 0x0A	; 10
     922:	08 f0       	brcs	.+2      	; 0x926 <TIMER_start+0x1a>
     924:	35 c1       	rjmp	.+618    	; 0xb90 <TIMER_start+0x284>
		l_ret = TIMER_E_NOT_OK;
	}
	else
	{
		/*Configure the TIMER Pres-scaler value for Timer-x clock*/
		switch(st_config->u8_timerNum)
     926:	21 30       	cpi	r18, 0x01	; 1
     928:	09 f4       	brne	.+2      	; 0x92c <TIMER_start+0x20>
     92a:	68 c0       	rjmp	.+208    	; 0x9fc <TIMER_start+0xf0>
     92c:	20 f0       	brcs	.+8      	; 0x936 <TIMER_start+0x2a>
     92e:	22 30       	cpi	r18, 0x02	; 2
     930:	09 f4       	brne	.+2      	; 0x934 <TIMER_start+0x28>
     932:	c7 c0       	rjmp	.+398    	; 0xac2 <TIMER_start+0x1b6>
     934:	2f c1       	rjmp	.+606    	; 0xb94 <TIMER_start+0x288>
		{
			case TIMER_0:
				switch(st_config->u8_timerClock)
     936:	8e 2f       	mov	r24, r30
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	8a 30       	cpi	r24, 0x0A	; 10
     93c:	91 05       	cpc	r25, r1
     93e:	08 f0       	brcs	.+2      	; 0x942 <TIMER_start+0x36>
     940:	2b c1       	rjmp	.+598    	; 0xb98 <TIMER_start+0x28c>
     942:	fc 01       	movw	r30, r24
     944:	e6 5d       	subi	r30, 0xD6	; 214
     946:	ff 4f       	sbci	r31, 0xFF	; 255
     948:	0c 94 3a 08 	jmp	0x1074	; 0x1074 <__tablejump2__>
				{
					case TIMER_NO_CLOCK:
						CLEAR_BIT(TCCR0,CS00);
     94c:	83 b7       	in	r24, 0x33	; 51
     94e:	8e 7f       	andi	r24, 0xFE	; 254
     950:	83 bf       	out	0x33, r24	; 51
						CLEAR_BIT(TCCR0,CS01);
     952:	83 b7       	in	r24, 0x33	; 51
     954:	8d 7f       	andi	r24, 0xFD	; 253
     956:	83 bf       	out	0x33, r24	; 51
						CLEAR_BIT(TCCR0,CS02);
     958:	83 b7       	in	r24, 0x33	; 51
     95a:	8b 7f       	andi	r24, 0xFB	; 251
     95c:	83 bf       	out	0x33, r24	; 51
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     95e:	80 e0       	ldi	r24, 0x00	; 0
				{
					case TIMER_NO_CLOCK:
						CLEAR_BIT(TCCR0,CS00);
						CLEAR_BIT(TCCR0,CS01);
						CLEAR_BIT(TCCR0,CS02);
						break;
     960:	08 95       	ret
					case TIMER_F_CPU_CLOCK:
						SET_BIT(TCCR0,CS00);
     962:	83 b7       	in	r24, 0x33	; 51
     964:	81 60       	ori	r24, 0x01	; 1
     966:	83 bf       	out	0x33, r24	; 51
						CLEAR_BIT(TCCR0,CS01);
     968:	83 b7       	in	r24, 0x33	; 51
     96a:	8d 7f       	andi	r24, 0xFD	; 253
     96c:	83 bf       	out	0x33, r24	; 51
						CLEAR_BIT(TCCR0,CS02);
     96e:	83 b7       	in	r24, 0x33	; 51
     970:	8b 7f       	andi	r24, 0xFB	; 251
     972:	83 bf       	out	0x33, r24	; 51
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     974:	80 e0       	ldi	r24, 0x00	; 0
						break;
					case TIMER_F_CPU_CLOCK:
						SET_BIT(TCCR0,CS00);
						CLEAR_BIT(TCCR0,CS01);
						CLEAR_BIT(TCCR0,CS02);
						break;
     976:	08 95       	ret
					case TIMER_F_CPU_8:
						CLEAR_BIT(TCCR0,CS00);
     978:	83 b7       	in	r24, 0x33	; 51
     97a:	8e 7f       	andi	r24, 0xFE	; 254
     97c:	83 bf       	out	0x33, r24	; 51
						SET_BIT(TCCR0,CS01);
     97e:	83 b7       	in	r24, 0x33	; 51
     980:	82 60       	ori	r24, 0x02	; 2
     982:	83 bf       	out	0x33, r24	; 51
						CLEAR_BIT(TCCR0,CS02);
     984:	83 b7       	in	r24, 0x33	; 51
     986:	8b 7f       	andi	r24, 0xFB	; 251
     988:	83 bf       	out	0x33, r24	; 51
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     98a:	80 e0       	ldi	r24, 0x00	; 0
						break;
					case TIMER_F_CPU_8:
						CLEAR_BIT(TCCR0,CS00);
						SET_BIT(TCCR0,CS01);
						CLEAR_BIT(TCCR0,CS02);
						break;
     98c:	08 95       	ret
					case TIMER_F_CPU_64:
						SET_BIT(TCCR0,CS00);
     98e:	83 b7       	in	r24, 0x33	; 51
     990:	81 60       	ori	r24, 0x01	; 1
     992:	83 bf       	out	0x33, r24	; 51
						SET_BIT(TCCR0,CS01);
     994:	83 b7       	in	r24, 0x33	; 51
     996:	82 60       	ori	r24, 0x02	; 2
     998:	83 bf       	out	0x33, r24	; 51
						CLEAR_BIT(TCCR0,CS02);
     99a:	83 b7       	in	r24, 0x33	; 51
     99c:	8b 7f       	andi	r24, 0xFB	; 251
     99e:	83 bf       	out	0x33, r24	; 51
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     9a0:	80 e0       	ldi	r24, 0x00	; 0
						break;
					case TIMER_F_CPU_64:
						SET_BIT(TCCR0,CS00);
						SET_BIT(TCCR0,CS01);
						CLEAR_BIT(TCCR0,CS02);
						break;
     9a2:	08 95       	ret
					case TIMER_F_CPU_256:
						CLEAR_BIT(TCCR0,CS00);
     9a4:	83 b7       	in	r24, 0x33	; 51
     9a6:	8e 7f       	andi	r24, 0xFE	; 254
     9a8:	83 bf       	out	0x33, r24	; 51
						CLEAR_BIT(TCCR0,CS01);
     9aa:	83 b7       	in	r24, 0x33	; 51
     9ac:	8d 7f       	andi	r24, 0xFD	; 253
     9ae:	83 bf       	out	0x33, r24	; 51
						SET_BIT(TCCR0,CS02);
     9b0:	83 b7       	in	r24, 0x33	; 51
     9b2:	84 60       	ori	r24, 0x04	; 4
     9b4:	83 bf       	out	0x33, r24	; 51
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     9b6:	80 e0       	ldi	r24, 0x00	; 0
						break;
					case TIMER_F_CPU_256:
						CLEAR_BIT(TCCR0,CS00);
						CLEAR_BIT(TCCR0,CS01);
						SET_BIT(TCCR0,CS02);
						break;
     9b8:	08 95       	ret
					case TIMER_F_CPU_1024:
						SET_BIT(TCCR0,CS00);
     9ba:	83 b7       	in	r24, 0x33	; 51
     9bc:	81 60       	ori	r24, 0x01	; 1
     9be:	83 bf       	out	0x33, r24	; 51
						CLEAR_BIT(TCCR0,CS01);
     9c0:	83 b7       	in	r24, 0x33	; 51
     9c2:	8d 7f       	andi	r24, 0xFD	; 253
     9c4:	83 bf       	out	0x33, r24	; 51
						SET_BIT(TCCR0,CS02);	
     9c6:	83 b7       	in	r24, 0x33	; 51
     9c8:	84 60       	ori	r24, 0x04	; 4
     9ca:	83 bf       	out	0x33, r24	; 51
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     9cc:	80 e0       	ldi	r24, 0x00	; 0
						break;
					case TIMER_F_CPU_1024:
						SET_BIT(TCCR0,CS00);
						CLEAR_BIT(TCCR0,CS01);
						SET_BIT(TCCR0,CS02);	
						break;
     9ce:	08 95       	ret
					case TIMER_EXTERNAL_CLK_FALLING_EDGE:
						CLEAR_BIT(TCCR0,CS00);
     9d0:	83 b7       	in	r24, 0x33	; 51
     9d2:	8e 7f       	andi	r24, 0xFE	; 254
     9d4:	83 bf       	out	0x33, r24	; 51
						SET_BIT(TCCR0,CS01);
     9d6:	83 b7       	in	r24, 0x33	; 51
     9d8:	82 60       	ori	r24, 0x02	; 2
     9da:	83 bf       	out	0x33, r24	; 51
						SET_BIT(TCCR0,CS02);
     9dc:	83 b7       	in	r24, 0x33	; 51
     9de:	84 60       	ori	r24, 0x04	; 4
     9e0:	83 bf       	out	0x33, r24	; 51
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     9e2:	80 e0       	ldi	r24, 0x00	; 0
						break;
					case TIMER_EXTERNAL_CLK_FALLING_EDGE:
						CLEAR_BIT(TCCR0,CS00);
						SET_BIT(TCCR0,CS01);
						SET_BIT(TCCR0,CS02);
						break;
     9e4:	08 95       	ret
					case TIMER_EXTERNAL_CLK_RISING_EDGE:
						SET_BIT(TCCR0,CS00);
     9e6:	83 b7       	in	r24, 0x33	; 51
     9e8:	81 60       	ori	r24, 0x01	; 1
     9ea:	83 bf       	out	0x33, r24	; 51
						SET_BIT(TCCR0,CS01);
     9ec:	83 b7       	in	r24, 0x33	; 51
     9ee:	82 60       	ori	r24, 0x02	; 2
     9f0:	83 bf       	out	0x33, r24	; 51
						SET_BIT(TCCR0,CS02);
     9f2:	83 b7       	in	r24, 0x33	; 51
     9f4:	84 60       	ori	r24, 0x04	; 4
     9f6:	83 bf       	out	0x33, r24	; 51
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     9f8:	80 e0       	ldi	r24, 0x00	; 0
						break;
					case TIMER_EXTERNAL_CLK_RISING_EDGE:
						SET_BIT(TCCR0,CS00);
						SET_BIT(TCCR0,CS01);
						SET_BIT(TCCR0,CS02);
						break;
     9fa:	08 95       	ret
						break;
				}
				break;
				
			case TIMER_1:
				switch(st_config->u8_timerClock)
     9fc:	8e 2f       	mov	r24, r30
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	8a 30       	cpi	r24, 0x0A	; 10
     a02:	91 05       	cpc	r25, r1
     a04:	08 f0       	brcs	.+2      	; 0xa08 <TIMER_start+0xfc>
     a06:	ca c0       	rjmp	.+404    	; 0xb9c <TIMER_start+0x290>
     a08:	fc 01       	movw	r30, r24
     a0a:	ec 5c       	subi	r30, 0xCC	; 204
     a0c:	ff 4f       	sbci	r31, 0xFF	; 255
     a0e:	0c 94 3a 08 	jmp	0x1074	; 0x1074 <__tablejump2__>
				{
					case TIMER_NO_CLOCK:
						CLEAR_BIT(TCCR1B,CS10);
     a12:	8e b5       	in	r24, 0x2e	; 46
     a14:	8e 7f       	andi	r24, 0xFE	; 254
     a16:	8e bd       	out	0x2e, r24	; 46
						CLEAR_BIT(TCCR1B,CS11);
     a18:	8e b5       	in	r24, 0x2e	; 46
     a1a:	8d 7f       	andi	r24, 0xFD	; 253
     a1c:	8e bd       	out	0x2e, r24	; 46
						CLEAR_BIT(TCCR1B,CS12);
     a1e:	8e b5       	in	r24, 0x2e	; 46
     a20:	8b 7f       	andi	r24, 0xFB	; 251
     a22:	8e bd       	out	0x2e, r24	; 46
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     a24:	80 e0       	ldi	r24, 0x00	; 0
				{
					case TIMER_NO_CLOCK:
						CLEAR_BIT(TCCR1B,CS10);
						CLEAR_BIT(TCCR1B,CS11);
						CLEAR_BIT(TCCR1B,CS12);
						break;
     a26:	08 95       	ret
					case TIMER_F_CPU_CLOCK:
						SET_BIT(TCCR1B,CS10);
     a28:	8e b5       	in	r24, 0x2e	; 46
     a2a:	81 60       	ori	r24, 0x01	; 1
     a2c:	8e bd       	out	0x2e, r24	; 46
						CLEAR_BIT(TCCR1B,CS11);
     a2e:	8e b5       	in	r24, 0x2e	; 46
     a30:	8d 7f       	andi	r24, 0xFD	; 253
     a32:	8e bd       	out	0x2e, r24	; 46
						CLEAR_BIT(TCCR1B,CS12);
     a34:	8e b5       	in	r24, 0x2e	; 46
     a36:	8b 7f       	andi	r24, 0xFB	; 251
     a38:	8e bd       	out	0x2e, r24	; 46
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     a3a:	80 e0       	ldi	r24, 0x00	; 0
						break;
					case TIMER_F_CPU_CLOCK:
						SET_BIT(TCCR1B,CS10);
						CLEAR_BIT(TCCR1B,CS11);
						CLEAR_BIT(TCCR1B,CS12);
						break;
     a3c:	08 95       	ret
					case TIMER_F_CPU_8:
						CLEAR_BIT(TCCR1B,CS10);
     a3e:	8e b5       	in	r24, 0x2e	; 46
     a40:	8e 7f       	andi	r24, 0xFE	; 254
     a42:	8e bd       	out	0x2e, r24	; 46
						SET_BIT(TCCR1B,CS11);
     a44:	8e b5       	in	r24, 0x2e	; 46
     a46:	82 60       	ori	r24, 0x02	; 2
     a48:	8e bd       	out	0x2e, r24	; 46
						CLEAR_BIT(TCCR1B,CS12);
     a4a:	8e b5       	in	r24, 0x2e	; 46
     a4c:	8b 7f       	andi	r24, 0xFB	; 251
     a4e:	8e bd       	out	0x2e, r24	; 46
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     a50:	80 e0       	ldi	r24, 0x00	; 0
						break;
					case TIMER_F_CPU_8:
						CLEAR_BIT(TCCR1B,CS10);
						SET_BIT(TCCR1B,CS11);
						CLEAR_BIT(TCCR1B,CS12);
						break;
     a52:	08 95       	ret
					case TIMER_F_CPU_64:
						SET_BIT(TCCR1B,CS10);
     a54:	8e b5       	in	r24, 0x2e	; 46
     a56:	81 60       	ori	r24, 0x01	; 1
     a58:	8e bd       	out	0x2e, r24	; 46
						SET_BIT(TCCR1B,CS11);
     a5a:	8e b5       	in	r24, 0x2e	; 46
     a5c:	82 60       	ori	r24, 0x02	; 2
     a5e:	8e bd       	out	0x2e, r24	; 46
						CLEAR_BIT(TCCR1B,CS12);
     a60:	8e b5       	in	r24, 0x2e	; 46
     a62:	8b 7f       	andi	r24, 0xFB	; 251
     a64:	8e bd       	out	0x2e, r24	; 46
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     a66:	80 e0       	ldi	r24, 0x00	; 0
						break;
					case TIMER_F_CPU_64:
						SET_BIT(TCCR1B,CS10);
						SET_BIT(TCCR1B,CS11);
						CLEAR_BIT(TCCR1B,CS12);
						break;
     a68:	08 95       	ret
					case TIMER_F_CPU_256:
						CLEAR_BIT(TCCR1B,CS10);
     a6a:	8e b5       	in	r24, 0x2e	; 46
     a6c:	8e 7f       	andi	r24, 0xFE	; 254
     a6e:	8e bd       	out	0x2e, r24	; 46
						CLEAR_BIT(TCCR1B,CS11);
     a70:	8e b5       	in	r24, 0x2e	; 46
     a72:	8d 7f       	andi	r24, 0xFD	; 253
     a74:	8e bd       	out	0x2e, r24	; 46
						SET_BIT(TCCR1B,CS12);
     a76:	8e b5       	in	r24, 0x2e	; 46
     a78:	84 60       	ori	r24, 0x04	; 4
     a7a:	8e bd       	out	0x2e, r24	; 46
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     a7c:	80 e0       	ldi	r24, 0x00	; 0
						break;
					case TIMER_F_CPU_256:
						CLEAR_BIT(TCCR1B,CS10);
						CLEAR_BIT(TCCR1B,CS11);
						SET_BIT(TCCR1B,CS12);
						break;
     a7e:	08 95       	ret
					case TIMER_F_CPU_1024:
						SET_BIT(TCCR1B,CS10);
     a80:	8e b5       	in	r24, 0x2e	; 46
     a82:	81 60       	ori	r24, 0x01	; 1
     a84:	8e bd       	out	0x2e, r24	; 46
						CLEAR_BIT(TCCR1B,CS11);
     a86:	8e b5       	in	r24, 0x2e	; 46
     a88:	8d 7f       	andi	r24, 0xFD	; 253
     a8a:	8e bd       	out	0x2e, r24	; 46
						SET_BIT(TCCR1B,CS12);	
     a8c:	8e b5       	in	r24, 0x2e	; 46
     a8e:	84 60       	ori	r24, 0x04	; 4
     a90:	8e bd       	out	0x2e, r24	; 46
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     a92:	80 e0       	ldi	r24, 0x00	; 0
						break;
					case TIMER_F_CPU_1024:
						SET_BIT(TCCR1B,CS10);
						CLEAR_BIT(TCCR1B,CS11);
						SET_BIT(TCCR1B,CS12);	
						break;
     a94:	08 95       	ret
					case TIMER_EXTERNAL_CLK_FALLING_EDGE:
						CLEAR_BIT(TCCR1B,CS10);
     a96:	8e b5       	in	r24, 0x2e	; 46
     a98:	8e 7f       	andi	r24, 0xFE	; 254
     a9a:	8e bd       	out	0x2e, r24	; 46
						SET_BIT(TCCR1B,CS11);
     a9c:	8e b5       	in	r24, 0x2e	; 46
     a9e:	82 60       	ori	r24, 0x02	; 2
     aa0:	8e bd       	out	0x2e, r24	; 46
						SET_BIT(TCCR1B,CS12);
     aa2:	8e b5       	in	r24, 0x2e	; 46
     aa4:	84 60       	ori	r24, 0x04	; 4
     aa6:	8e bd       	out	0x2e, r24	; 46
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     aa8:	80 e0       	ldi	r24, 0x00	; 0
						break;
					case TIMER_EXTERNAL_CLK_FALLING_EDGE:
						CLEAR_BIT(TCCR1B,CS10);
						SET_BIT(TCCR1B,CS11);
						SET_BIT(TCCR1B,CS12);
						break;
     aaa:	08 95       	ret
					case TIMER_EXTERNAL_CLK_RISING_EDGE:
						SET_BIT(TCCR1B,CS10);
     aac:	8e b5       	in	r24, 0x2e	; 46
     aae:	81 60       	ori	r24, 0x01	; 1
     ab0:	8e bd       	out	0x2e, r24	; 46
						SET_BIT(TCCR1B,CS11);
     ab2:	8e b5       	in	r24, 0x2e	; 46
     ab4:	82 60       	ori	r24, 0x02	; 2
     ab6:	8e bd       	out	0x2e, r24	; 46
						SET_BIT(TCCR1B,CS12);
     ab8:	8e b5       	in	r24, 0x2e	; 46
     aba:	84 60       	ori	r24, 0x04	; 4
     abc:	8e bd       	out	0x2e, r24	; 46
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     abe:	80 e0       	ldi	r24, 0x00	; 0
						break;
					case TIMER_EXTERNAL_CLK_RISING_EDGE:
						SET_BIT(TCCR1B,CS10);
						SET_BIT(TCCR1B,CS11);
						SET_BIT(TCCR1B,CS12);
						break;
     ac0:	08 95       	ret
						break;
				}			
				break;
				
			case TIMER_2:
				switch(st_config->u8_timerClock)
     ac2:	8e 2f       	mov	r24, r30
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	88 30       	cpi	r24, 0x08	; 8
     ac8:	91 05       	cpc	r25, r1
     aca:	08 f0       	brcs	.+2      	; 0xace <TIMER_start+0x1c2>
     acc:	69 c0       	rjmp	.+210    	; 0xba0 <TIMER_start+0x294>
     ace:	fc 01       	movw	r30, r24
     ad0:	e2 5c       	subi	r30, 0xC2	; 194
     ad2:	ff 4f       	sbci	r31, 0xFF	; 255
     ad4:	0c 94 3a 08 	jmp	0x1074	; 0x1074 <__tablejump2__>
				{
					case TIMER_NO_CLOCK:
						CLEAR_BIT(TCCR2,CS20);
     ad8:	85 b5       	in	r24, 0x25	; 37
     ada:	8b 7f       	andi	r24, 0xFB	; 251
     adc:	85 bd       	out	0x25, r24	; 37
						CLEAR_BIT(TCCR2,CS21);
     ade:	85 b5       	in	r24, 0x25	; 37
     ae0:	8d 7f       	andi	r24, 0xFD	; 253
     ae2:	85 bd       	out	0x25, r24	; 37
						CLEAR_BIT(TCCR2,CS22);
     ae4:	85 b5       	in	r24, 0x25	; 37
     ae6:	8e 7f       	andi	r24, 0xFE	; 254
     ae8:	85 bd       	out	0x25, r24	; 37
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     aea:	80 e0       	ldi	r24, 0x00	; 0
				{
					case TIMER_NO_CLOCK:
						CLEAR_BIT(TCCR2,CS20);
						CLEAR_BIT(TCCR2,CS21);
						CLEAR_BIT(TCCR2,CS22);
						break;
     aec:	08 95       	ret
					case TIMER_F_CPU_CLOCK:
						SET_BIT(TCCR2,CS20);
     aee:	85 b5       	in	r24, 0x25	; 37
     af0:	84 60       	ori	r24, 0x04	; 4
     af2:	85 bd       	out	0x25, r24	; 37
						CLEAR_BIT(TCCR2,CS21);
     af4:	85 b5       	in	r24, 0x25	; 37
     af6:	8d 7f       	andi	r24, 0xFD	; 253
     af8:	85 bd       	out	0x25, r24	; 37
						CLEAR_BIT(TCCR2,CS22);
     afa:	85 b5       	in	r24, 0x25	; 37
     afc:	8e 7f       	andi	r24, 0xFE	; 254
     afe:	85 bd       	out	0x25, r24	; 37
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     b00:	80 e0       	ldi	r24, 0x00	; 0
						break;
					case TIMER_F_CPU_CLOCK:
						SET_BIT(TCCR2,CS20);
						CLEAR_BIT(TCCR2,CS21);
						CLEAR_BIT(TCCR2,CS22);
						break;
     b02:	08 95       	ret
					case TIMER_F_CPU_8:
						CLEAR_BIT(TCCR2,CS20);
     b04:	85 b5       	in	r24, 0x25	; 37
     b06:	8b 7f       	andi	r24, 0xFB	; 251
     b08:	85 bd       	out	0x25, r24	; 37
						SET_BIT(TCCR2,CS21);
     b0a:	85 b5       	in	r24, 0x25	; 37
     b0c:	82 60       	ori	r24, 0x02	; 2
     b0e:	85 bd       	out	0x25, r24	; 37
						CLEAR_BIT(TCCR2,CS22);
     b10:	85 b5       	in	r24, 0x25	; 37
     b12:	8e 7f       	andi	r24, 0xFE	; 254
     b14:	85 bd       	out	0x25, r24	; 37
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     b16:	80 e0       	ldi	r24, 0x00	; 0
						break;
					case TIMER_F_CPU_8:
						CLEAR_BIT(TCCR2,CS20);
						SET_BIT(TCCR2,CS21);
						CLEAR_BIT(TCCR2,CS22);
						break;
     b18:	08 95       	ret
					case TIMER_F_CPU_32:
						SET_BIT(TCCR2,CS20);
     b1a:	85 b5       	in	r24, 0x25	; 37
     b1c:	84 60       	ori	r24, 0x04	; 4
     b1e:	85 bd       	out	0x25, r24	; 37
						SET_BIT(TCCR2,CS21);
     b20:	85 b5       	in	r24, 0x25	; 37
     b22:	82 60       	ori	r24, 0x02	; 2
     b24:	85 bd       	out	0x25, r24	; 37
						CLEAR_BIT(TCCR2,CS22);
     b26:	85 b5       	in	r24, 0x25	; 37
     b28:	8e 7f       	andi	r24, 0xFE	; 254
     b2a:	85 bd       	out	0x25, r24	; 37
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     b2c:	80 e0       	ldi	r24, 0x00	; 0
						break;
					case TIMER_F_CPU_32:
						SET_BIT(TCCR2,CS20);
						SET_BIT(TCCR2,CS21);
						CLEAR_BIT(TCCR2,CS22);
						break;
     b2e:	08 95       	ret
					case TIMER_F_CPU_64:
						CLEAR_BIT(TCCR2,CS20);
     b30:	85 b5       	in	r24, 0x25	; 37
     b32:	8b 7f       	andi	r24, 0xFB	; 251
     b34:	85 bd       	out	0x25, r24	; 37
						CLEAR_BIT(TCCR2,CS21);
     b36:	85 b5       	in	r24, 0x25	; 37
     b38:	8d 7f       	andi	r24, 0xFD	; 253
     b3a:	85 bd       	out	0x25, r24	; 37
						SET_BIT(TCCR2,CS22);
     b3c:	85 b5       	in	r24, 0x25	; 37
     b3e:	81 60       	ori	r24, 0x01	; 1
     b40:	85 bd       	out	0x25, r24	; 37
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     b42:	80 e0       	ldi	r24, 0x00	; 0
						break;
					case TIMER_F_CPU_64:
						CLEAR_BIT(TCCR2,CS20);
						CLEAR_BIT(TCCR2,CS21);
						SET_BIT(TCCR2,CS22);
						break;
     b44:	08 95       	ret
					case TIMER_F_CPU_128:
						SET_BIT(TCCR2,CS20);
     b46:	85 b5       	in	r24, 0x25	; 37
     b48:	84 60       	ori	r24, 0x04	; 4
     b4a:	85 bd       	out	0x25, r24	; 37
						CLEAR_BIT(TCCR2,CS21);
     b4c:	85 b5       	in	r24, 0x25	; 37
     b4e:	8d 7f       	andi	r24, 0xFD	; 253
     b50:	85 bd       	out	0x25, r24	; 37
						SET_BIT(TCCR2,CS22);
     b52:	85 b5       	in	r24, 0x25	; 37
     b54:	81 60       	ori	r24, 0x01	; 1
     b56:	85 bd       	out	0x25, r24	; 37
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     b58:	80 e0       	ldi	r24, 0x00	; 0
						break;
					case TIMER_F_CPU_128:
						SET_BIT(TCCR2,CS20);
						CLEAR_BIT(TCCR2,CS21);
						SET_BIT(TCCR2,CS22);
						break;
     b5a:	08 95       	ret
					case TIMER_F_CPU_256:
						CLEAR_BIT(TCCR2,CS20);
     b5c:	85 b5       	in	r24, 0x25	; 37
     b5e:	8b 7f       	andi	r24, 0xFB	; 251
     b60:	85 bd       	out	0x25, r24	; 37
						SET_BIT(TCCR2,CS21);
     b62:	85 b5       	in	r24, 0x25	; 37
     b64:	82 60       	ori	r24, 0x02	; 2
     b66:	85 bd       	out	0x25, r24	; 37
						SET_BIT(TCCR2,CS22);
     b68:	85 b5       	in	r24, 0x25	; 37
     b6a:	81 60       	ori	r24, 0x01	; 1
     b6c:	85 bd       	out	0x25, r24	; 37
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     b6e:	80 e0       	ldi	r24, 0x00	; 0
						break;
					case TIMER_F_CPU_256:
						CLEAR_BIT(TCCR2,CS20);
						SET_BIT(TCCR2,CS21);
						SET_BIT(TCCR2,CS22);
						break;
     b70:	08 95       	ret
					case TIMER_F_CPU_1024:
						SET_BIT(TCCR2,CS20);
     b72:	85 b5       	in	r24, 0x25	; 37
     b74:	84 60       	ori	r24, 0x04	; 4
     b76:	85 bd       	out	0x25, r24	; 37
						SET_BIT(TCCR2,CS21);
     b78:	85 b5       	in	r24, 0x25	; 37
     b7a:	82 60       	ori	r24, 0x02	; 2
     b7c:	85 bd       	out	0x25, r24	; 37
						SET_BIT(TCCR2,CS22);	
     b7e:	85 b5       	in	r24, 0x25	; 37
     b80:	81 60       	ori	r24, 0x01	; 1
     b82:	85 bd       	out	0x25, r24	; 37
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     b84:	80 e0       	ldi	r24, 0x00	; 0
						break;
					case TIMER_F_CPU_1024:
						SET_BIT(TCCR2,CS20);
						SET_BIT(TCCR2,CS21);
						SET_BIT(TCCR2,CS22);	
						break;
     b86:	08 95       	ret
u8_en_timerErrorsType TIMER_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==st_config || st_config->u8_timerNum >= TIMER_INVALID_NUM || st_config->u8_timerClock >= TIMER_INVALID_CLOCK)
	{
		l_ret = TIMER_E_NOT_OK;
     b88:	83 e0       	ldi	r24, 0x03	; 3
     b8a:	08 95       	ret
     b8c:	83 e0       	ldi	r24, 0x03	; 3
     b8e:	08 95       	ret
     b90:	83 e0       	ldi	r24, 0x03	; 3
     b92:	08 95       	ret
						break;
				}
				break;
				
			default:
				l_ret |= TIMER_E_NOT_OK;
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	08 95       	ret
						SET_BIT(TCCR0,CS00);
						SET_BIT(TCCR0,CS01);
						SET_BIT(TCCR0,CS02);
						break;
					default:
						l_ret = TIMER_E_NOT_OK;
     b98:	83 e0       	ldi	r24, 0x03	; 3
     b9a:	08 95       	ret
						SET_BIT(TCCR1B,CS10);
						SET_BIT(TCCR1B,CS11);
						SET_BIT(TCCR1B,CS12);
						break;
					default:
						l_ret = TIMER_E_NOT_OK;
     b9c:	83 e0       	ldi	r24, 0x03	; 3
     b9e:	08 95       	ret
						SET_BIT(TCCR2,CS20);
						SET_BIT(TCCR2,CS21);
						SET_BIT(TCCR2,CS22);	
						break;
					default:
						l_ret = TIMER_E_NOT_OK;
     ba0:	83 e0       	ldi	r24, 0x03	; 3
				l_ret |= TIMER_E_NOT_OK;
				break;
		}
	}
	return l_ret;
}
     ba2:	08 95       	ret

00000ba4 <TIMER_stop>:
u8_en_timerErrorsType TIMER_stop (u8_en_timerNumberType u8_a_timerNum)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if( u8_a_timerNum >= TIMER_INVALID_NUM )
     ba4:	83 30       	cpi	r24, 0x03	; 3
     ba6:	38 f5       	brcc	.+78     	; 0xbf6 <TIMER_stop+0x52>
	{
		l_ret = TIMER_E_NOT_OK;
	}
	else
	{
		switch(u8_a_timerNum)
     ba8:	81 30       	cpi	r24, 0x01	; 1
     baa:	79 f0       	breq	.+30     	; 0xbca <TIMER_stop+0x26>
     bac:	18 f0       	brcs	.+6      	; 0xbb4 <TIMER_stop+0x10>
     bae:	82 30       	cpi	r24, 0x02	; 2
     bb0:	b9 f0       	breq	.+46     	; 0xbe0 <TIMER_stop+0x3c>
     bb2:	23 c0       	rjmp	.+70     	; 0xbfa <TIMER_stop+0x56>
		{
			case TIMER_0:
				/*use no clock to halt timer0*/
				CLEAR_BIT(TCCR0,CS00);
     bb4:	83 b7       	in	r24, 0x33	; 51
     bb6:	8e 7f       	andi	r24, 0xFE	; 254
     bb8:	83 bf       	out	0x33, r24	; 51
				CLEAR_BIT(TCCR0,CS01);
     bba:	83 b7       	in	r24, 0x33	; 51
     bbc:	8d 7f       	andi	r24, 0xFD	; 253
     bbe:	83 bf       	out	0x33, r24	; 51
				CLEAR_BIT(TCCR0,CS02);
     bc0:	83 b7       	in	r24, 0x33	; 51
     bc2:	8b 7f       	andi	r24, 0xFB	; 251
     bc4:	83 bf       	out	0x33, r24	; 51
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_stop (u8_en_timerNumberType u8_a_timerNum)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     bc6:	80 e0       	ldi	r24, 0x00	; 0
			case TIMER_0:
				/*use no clock to halt timer0*/
				CLEAR_BIT(TCCR0,CS00);
				CLEAR_BIT(TCCR0,CS01);
				CLEAR_BIT(TCCR0,CS02);
				break;
     bc8:	08 95       	ret
				
			case TIMER_1:
				/*use no clock to halt timer1*/
				CLEAR_BIT(TCCR1B,CS10);
     bca:	8e b5       	in	r24, 0x2e	; 46
     bcc:	8e 7f       	andi	r24, 0xFE	; 254
     bce:	8e bd       	out	0x2e, r24	; 46
				CLEAR_BIT(TCCR1B,CS11);
     bd0:	8e b5       	in	r24, 0x2e	; 46
     bd2:	8d 7f       	andi	r24, 0xFD	; 253
     bd4:	8e bd       	out	0x2e, r24	; 46
				CLEAR_BIT(TCCR1B,CS12);
     bd6:	8e b5       	in	r24, 0x2e	; 46
     bd8:	8b 7f       	andi	r24, 0xFB	; 251
     bda:	8e bd       	out	0x2e, r24	; 46
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_stop (u8_en_timerNumberType u8_a_timerNum)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     bdc:	80 e0       	ldi	r24, 0x00	; 0
			case TIMER_1:
				/*use no clock to halt timer1*/
				CLEAR_BIT(TCCR1B,CS10);
				CLEAR_BIT(TCCR1B,CS11);
				CLEAR_BIT(TCCR1B,CS12);
				break;
     bde:	08 95       	ret
				
			case TIMER_2:
				/*use no clock to halt timer2*/
				CLEAR_BIT(TCCR2,CS20);
     be0:	85 b5       	in	r24, 0x25	; 37
     be2:	8b 7f       	andi	r24, 0xFB	; 251
     be4:	85 bd       	out	0x25, r24	; 37
				CLEAR_BIT(TCCR2,CS21);
     be6:	85 b5       	in	r24, 0x25	; 37
     be8:	8d 7f       	andi	r24, 0xFD	; 253
     bea:	85 bd       	out	0x25, r24	; 37
				CLEAR_BIT(TCCR2,CS22);
     bec:	85 b5       	in	r24, 0x25	; 37
     bee:	8e 7f       	andi	r24, 0xFE	; 254
     bf0:	85 bd       	out	0x25, r24	; 37
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_stop (u8_en_timerNumberType u8_a_timerNum)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     bf2:	80 e0       	ldi	r24, 0x00	; 0
			case TIMER_2:
				/*use no clock to halt timer2*/
				CLEAR_BIT(TCCR2,CS20);
				CLEAR_BIT(TCCR2,CS21);
				CLEAR_BIT(TCCR2,CS22);
				break;
     bf4:	08 95       	ret
u8_en_timerErrorsType TIMER_stop (u8_en_timerNumberType u8_a_timerNum)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if( u8_a_timerNum >= TIMER_INVALID_NUM )
	{
		l_ret = TIMER_E_NOT_OK;
     bf6:	83 e0       	ldi	r24, 0x03	; 3
     bf8:	08 95       	ret
				CLEAR_BIT(TCCR2,CS21);
				CLEAR_BIT(TCCR2,CS22);
				break;
				
			default:
				l_ret |= TIMER_E_NOT_OK;
     bfa:	83 e0       	ldi	r24, 0x03	; 3
				break;
		}
	}
	return l_ret;
}
     bfc:	08 95       	ret

00000bfe <TIMER_reset>:

u8_en_timerErrorsType TIMER_reset (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==st_config || st_config->u8_timerNum >= TIMER_INVALID_NUM || st_config->u8_timerClock >= TIMER_INVALID_CLOCK)
     bfe:	00 97       	sbiw	r24, 0x00	; 0
     c00:	f1 f0       	breq	.+60     	; 0xc3e <TIMER_reset+0x40>
     c02:	fc 01       	movw	r30, r24
     c04:	20 81       	ld	r18, Z
     c06:	23 30       	cpi	r18, 0x03	; 3
     c08:	e0 f4       	brcc	.+56     	; 0xc42 <TIMER_reset+0x44>
     c0a:	31 81       	ldd	r19, Z+1	; 0x01
     c0c:	3a 30       	cpi	r19, 0x0A	; 10
     c0e:	d8 f4       	brcc	.+54     	; 0xc46 <TIMER_reset+0x48>
	{
		l_ret = TIMER_E_NOT_OK;
	}
	else
	{
		switch(st_config->u8_timerNum)
     c10:	21 30       	cpi	r18, 0x01	; 1
     c12:	49 f0       	breq	.+18     	; 0xc26 <TIMER_reset+0x28>
     c14:	18 f0       	brcs	.+6      	; 0xc1c <TIMER_reset+0x1e>
     c16:	22 30       	cpi	r18, 0x02	; 2
     c18:	69 f0       	breq	.+26     	; 0xc34 <TIMER_reset+0x36>
     c1a:	17 c0       	rjmp	.+46     	; 0xc4a <TIMER_reset+0x4c>
		{
			case TIMER_0:
				
				/*Configure initial value in TCNT1(high&low) for Timer0 to start count from it*/
				TCNT0 = st_config->u16_timer_InitialValue;
     c1c:	fc 01       	movw	r30, r24
     c1e:	82 81       	ldd	r24, Z+2	; 0x02
     c20:	82 bf       	out	0x32, r24	; 50
	return l_ret;
}

u8_en_timerErrorsType TIMER_reset (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     c22:	80 e0       	ldi	r24, 0x00	; 0
		{
			case TIMER_0:
				
				/*Configure initial value in TCNT1(high&low) for Timer0 to start count from it*/
				TCNT0 = st_config->u16_timer_InitialValue;
				break;
     c24:	08 95       	ret
				
			case TIMER_1:
			
				/*Configure initial value in TCNT1(high&low) for Timer1 to start count from it*/
				TCNT1 = st_config->u16_timer_InitialValue;
     c26:	fc 01       	movw	r30, r24
     c28:	82 81       	ldd	r24, Z+2	; 0x02
     c2a:	93 81       	ldd	r25, Z+3	; 0x03
     c2c:	9d bd       	out	0x2d, r25	; 45
     c2e:	8c bd       	out	0x2c, r24	; 44
	return l_ret;
}

u8_en_timerErrorsType TIMER_reset (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     c30:	80 e0       	ldi	r24, 0x00	; 0
				
			case TIMER_1:
			
				/*Configure initial value in TCNT1(high&low) for Timer1 to start count from it*/
				TCNT1 = st_config->u16_timer_InitialValue;
				break;
     c32:	08 95       	ret
				
			case TIMER_2:
				
				/*Configure initial value in TCNT1(high&low) for Timer2 to start count from it*/
				TCNT2 = st_config->u16_timer_InitialValue;
     c34:	fc 01       	movw	r30, r24
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	84 bd       	out	0x24, r24	; 36
	return l_ret;
}

u8_en_timerErrorsType TIMER_reset (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     c3a:	80 e0       	ldi	r24, 0x00	; 0
				
			case TIMER_2:
				
				/*Configure initial value in TCNT1(high&low) for Timer2 to start count from it*/
				TCNT2 = st_config->u16_timer_InitialValue;
				break;
     c3c:	08 95       	ret
u8_en_timerErrorsType TIMER_reset (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==st_config || st_config->u8_timerNum >= TIMER_INVALID_NUM || st_config->u8_timerClock >= TIMER_INVALID_CLOCK)
	{
		l_ret = TIMER_E_NOT_OK;
     c3e:	83 e0       	ldi	r24, 0x03	; 3
     c40:	08 95       	ret
     c42:	83 e0       	ldi	r24, 0x03	; 3
     c44:	08 95       	ret
     c46:	83 e0       	ldi	r24, 0x03	; 3
     c48:	08 95       	ret
				/*Configure initial value in TCNT1(high&low) for Timer2 to start count from it*/
				TCNT2 = st_config->u16_timer_InitialValue;
				break;
				
			default:
				l_ret |= TIMER_E_NOT_OK;
     c4a:	83 e0       	ldi	r24, 0x03	; 3
				break;
		}
	}
	return l_ret;
}
     c4c:	08 95       	ret

00000c4e <TIMER_setCallBack>:
u8_en_timerErrorsType TIMER_setCallBack( void(*a_timerCallBack)(void), u8_en_timerNumberType u8_a_timerNum )
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==a_timerCallBack || u8_a_timerNum >= TIMER_INVALID_NUM )
     c4e:	00 97       	sbiw	r24, 0x00	; 0
     c50:	d1 f0       	breq	.+52     	; 0xc86 <TIMER_setCallBack+0x38>
     c52:	63 30       	cpi	r22, 0x03	; 3
     c54:	d0 f4       	brcc	.+52     	; 0xc8a <TIMER_setCallBack+0x3c>
	{
		l_ret = TIMER_E_NOT_OK;
	}
	else
	{
		switch(u8_a_timerNum)
     c56:	61 30       	cpi	r22, 0x01	; 1
     c58:	51 f0       	breq	.+20     	; 0xc6e <TIMER_setCallBack+0x20>
     c5a:	18 f0       	brcs	.+6      	; 0xc62 <TIMER_setCallBack+0x14>
     c5c:	62 30       	cpi	r22, 0x02	; 2
     c5e:	69 f0       	breq	.+26     	; 0xc7a <TIMER_setCallBack+0x2c>
     c60:	16 c0       	rjmp	.+44     	; 0xc8e <TIMER_setCallBack+0x40>
		{
			case TIMER_0:
				/* load the address of the Call back function from upper layer in the global pointer to function */
				sg_Timer0_callBackPtr = a_timerCallBack;
     c62:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <sg_Timer0_callBackPtr+0x1>
     c66:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <sg_Timer0_callBackPtr>
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_setCallBack( void(*a_timerCallBack)(void), u8_en_timerNumberType u8_a_timerNum )
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     c6a:	80 e0       	ldi	r24, 0x00	; 0
		switch(u8_a_timerNum)
		{
			case TIMER_0:
				/* load the address of the Call back function from upper layer in the global pointer to function */
				sg_Timer0_callBackPtr = a_timerCallBack;
				break;
     c6c:	08 95       	ret
			case TIMER_1:
				/* load the address of the Call back function from upper layer in the global pointer to function */
				sg_Timer1_callBackPtr = a_timerCallBack;
     c6e:	90 93 9c 00 	sts	0x009C, r25	; 0x80009c <sg_Timer1_callBackPtr+0x1>
     c72:	80 93 9b 00 	sts	0x009B, r24	; 0x80009b <sg_Timer1_callBackPtr>
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_setCallBack( void(*a_timerCallBack)(void), u8_en_timerNumberType u8_a_timerNum )
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     c76:	80 e0       	ldi	r24, 0x00	; 0
				sg_Timer0_callBackPtr = a_timerCallBack;
				break;
			case TIMER_1:
				/* load the address of the Call back function from upper layer in the global pointer to function */
				sg_Timer1_callBackPtr = a_timerCallBack;
				break;
     c78:	08 95       	ret
			case TIMER_2:
				/* load the address of the Call back function from upper layer in the global pointer to function */
				sg_Timer2_callBackPtr = a_timerCallBack;
     c7a:	90 93 9a 00 	sts	0x009A, r25	; 0x80009a <sg_Timer2_callBackPtr+0x1>
     c7e:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <sg_Timer2_callBackPtr>
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_setCallBack( void(*a_timerCallBack)(void), u8_en_timerNumberType u8_a_timerNum )
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     c82:	80 e0       	ldi	r24, 0x00	; 0
				sg_Timer1_callBackPtr = a_timerCallBack;
				break;
			case TIMER_2:
				/* load the address of the Call back function from upper layer in the global pointer to function */
				sg_Timer2_callBackPtr = a_timerCallBack;
				break;
     c84:	08 95       	ret
u8_en_timerErrorsType TIMER_setCallBack( void(*a_timerCallBack)(void), u8_en_timerNumberType u8_a_timerNum )
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==a_timerCallBack || u8_a_timerNum >= TIMER_INVALID_NUM )
	{
		l_ret = TIMER_E_NOT_OK;
     c86:	83 e0       	ldi	r24, 0x03	; 3
     c88:	08 95       	ret
     c8a:	83 e0       	ldi	r24, 0x03	; 3
     c8c:	08 95       	ret
			case TIMER_2:
				/* load the address of the Call back function from upper layer in the global pointer to function */
				sg_Timer2_callBackPtr = a_timerCallBack;
				break;
			default:
				l_ret = TIMER_E_NOT_OK;
     c8e:	83 e0       	ldi	r24, 0x03	; 3
				break;
		}
	}
	return l_ret;
     c90:	08 95       	ret

00000c92 <init_theArrayOfIDs>:
	else
	{
		enu_l_sos_ret = SOS_NOT_INITIALIZED;
	}
	return enu_l_sos_ret;
}
     c92:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <enu_sg_sos_init_status>
     c96:	81 30       	cpi	r24, 0x01	; 1
     c98:	99 f1       	breq	.+102    	; 0xd00 <init_theArrayOfIDs+0x6e>
     c9a:	80 e0       	ldi	r24, 0x00	; 0
     c9c:	08 95       	ret
     c9e:	51 e0       	ldi	r21, 0x01	; 1
     ca0:	54 0f       	add	r21, r20
     ca2:	85 2f       	mov	r24, r21
     ca4:	29 c0       	rjmp	.+82     	; 0xcf8 <init_theArrayOfIDs+0x66>
     ca6:	e4 2f       	mov	r30, r20
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	ee 0f       	add	r30, r30
     cac:	ff 1f       	adc	r31, r31
     cae:	ea 54       	subi	r30, 0x4A	; 74
     cb0:	ff 4f       	sbci	r31, 0xFF	; 255
     cb2:	a0 81       	ld	r26, Z
     cb4:	b1 81       	ldd	r27, Z+1	; 0x01
     cb6:	2c 91       	ld	r18, X
     cb8:	e8 2f       	mov	r30, r24
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	ee 0f       	add	r30, r30
     cbe:	ff 1f       	adc	r31, r31
     cc0:	ea 54       	subi	r30, 0x4A	; 74
     cc2:	ff 4f       	sbci	r31, 0xFF	; 255
     cc4:	01 90       	ld	r0, Z+
     cc6:	f0 81       	ld	r31, Z
     cc8:	e0 2d       	mov	r30, r0
     cca:	90 81       	ld	r25, Z
     ccc:	29 17       	cp	r18, r25
     cce:	48 f4       	brcc	.+18     	; 0xce2 <init_theArrayOfIDs+0x50>
     cd0:	e3 2f       	mov	r30, r19
     cd2:	f0 e0       	ldi	r31, 0x00	; 0
     cd4:	11 96       	adiw	r26, 0x01	; 1
     cd6:	9c 91       	ld	r25, X
     cd8:	e1 56       	subi	r30, 0x61	; 97
     cda:	ff 4f       	sbci	r31, 0xFF	; 255
     cdc:	90 83       	st	Z, r25
     cde:	3f 5f       	subi	r19, 0xFF	; 255
     ce0:	0a c0       	rjmp	.+20     	; 0xcf6 <init_theArrayOfIDs+0x64>
     ce2:	92 17       	cp	r25, r18
     ce4:	40 f4       	brcc	.+16     	; 0xcf6 <init_theArrayOfIDs+0x64>
     ce6:	63 2f       	mov	r22, r19
     ce8:	70 e0       	ldi	r23, 0x00	; 0
     cea:	91 81       	ldd	r25, Z+1	; 0x01
     cec:	fb 01       	movw	r30, r22
     cee:	e1 56       	subi	r30, 0x61	; 97
     cf0:	ff 4f       	sbci	r31, 0xFF	; 255
     cf2:	90 83       	st	Z, r25
     cf4:	3f 5f       	subi	r19, 0xFF	; 255
     cf6:	8f 5f       	subi	r24, 0xFF	; 255
     cf8:	83 30       	cpi	r24, 0x03	; 3
     cfa:	a8 f2       	brcs	.-86     	; 0xca6 <init_theArrayOfIDs+0x14>
     cfc:	45 2f       	mov	r20, r21
     cfe:	02 c0       	rjmp	.+4      	; 0xd04 <init_theArrayOfIDs+0x72>
     d00:	30 e0       	ldi	r19, 0x00	; 0
     d02:	40 e0       	ldi	r20, 0x00	; 0
     d04:	43 30       	cpi	r20, 0x03	; 3
     d06:	58 f2       	brcs	.-106    	; 0xc9e <init_theArrayOfIDs+0xc>
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	08 95       	ret

00000d0c <SOS_timer_handelr>:
     d0c:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <uintu8_sg_sos_index_1>
     d10:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <uintu8_sg_sos_index_1+0x1>
     d14:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <uintu8_sg_sos_index_1+0x2>
     d18:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <uintu8_sg_sos_index_1+0x3>
     d1c:	2e c0       	rjmp	.+92     	; 0xd7a <SOS_timer_handelr+0x6e>
     d1e:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <uintu8_sg_sos_index_1>
     d22:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <uintu8_sg_sos_index_1+0x1>
     d26:	a0 91 a8 00 	lds	r26, 0x00A8	; 0x8000a8 <uintu8_sg_sos_index_1+0x2>
     d2a:	b0 91 a9 00 	lds	r27, 0x00A9	; 0x8000a9 <uintu8_sg_sos_index_1+0x3>
     d2e:	88 0f       	add	r24, r24
     d30:	99 1f       	adc	r25, r25
     d32:	88 0f       	add	r24, r24
     d34:	99 1f       	adc	r25, r25
     d36:	fc 01       	movw	r30, r24
     d38:	e6 55       	subi	r30, 0x56	; 86
     d3a:	ff 4f       	sbci	r31, 0xFF	; 255
     d3c:	40 81       	ld	r20, Z
     d3e:	51 81       	ldd	r21, Z+1	; 0x01
     d40:	62 81       	ldd	r22, Z+2	; 0x02
     d42:	73 81       	ldd	r23, Z+3	; 0x03
     d44:	4f 5f       	subi	r20, 0xFF	; 255
     d46:	5f 4f       	sbci	r21, 0xFF	; 255
     d48:	6f 4f       	sbci	r22, 0xFF	; 255
     d4a:	7f 4f       	sbci	r23, 0xFF	; 255
     d4c:	40 83       	st	Z, r20
     d4e:	51 83       	std	Z+1, r21	; 0x01
     d50:	62 83       	std	Z+2, r22	; 0x02
     d52:	73 83       	std	Z+3, r23	; 0x03
     d54:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <uintu8_sg_sos_index_1>
     d58:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <uintu8_sg_sos_index_1+0x1>
     d5c:	a0 91 a8 00 	lds	r26, 0x00A8	; 0x8000a8 <uintu8_sg_sos_index_1+0x2>
     d60:	b0 91 a9 00 	lds	r27, 0x00A9	; 0x8000a9 <uintu8_sg_sos_index_1+0x3>
     d64:	01 96       	adiw	r24, 0x01	; 1
     d66:	a1 1d       	adc	r26, r1
     d68:	b1 1d       	adc	r27, r1
     d6a:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <uintu8_sg_sos_index_1>
     d6e:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <uintu8_sg_sos_index_1+0x1>
     d72:	a0 93 a8 00 	sts	0x00A8, r26	; 0x8000a8 <uintu8_sg_sos_index_1+0x2>
     d76:	b0 93 a9 00 	sts	0x00A9, r27	; 0x8000a9 <uintu8_sg_sos_index_1+0x3>
     d7a:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <uintu8_sg_sos_index_1>
     d7e:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <uintu8_sg_sos_index_1+0x1>
     d82:	a0 91 a8 00 	lds	r26, 0x00A8	; 0x8000a8 <uintu8_sg_sos_index_1+0x2>
     d86:	b0 91 a9 00 	lds	r27, 0x00A9	; 0x8000a9 <uintu8_sg_sos_index_1+0x3>
     d8a:	03 97       	sbiw	r24, 0x03	; 3
     d8c:	a1 05       	cpc	r26, r1
     d8e:	b1 05       	cpc	r27, r1
     d90:	30 f2       	brcs	.-116    	; 0xd1e <SOS_timer_handelr+0x12>
     d92:	89 e7       	ldi	r24, 0x79	; 121
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	0e 94 28 08 	call	0x1050	; 0x1050 <TIMER_Manager_reset>
     d9a:	08 95       	ret

00000d9c <SOS_init>:
     d9c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <enu_sg_sos_init_status>
     da0:	81 11       	cpse	r24, r1
     da2:	1d c0       	rjmp	.+58     	; 0xdde <SOS_init+0x42>
     da4:	86 e8       	ldi	r24, 0x86	; 134
     da6:	96 e0       	ldi	r25, 0x06	; 6
     da8:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <st_g_sos_timer+0x6>
     dac:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <st_g_sos_timer+0x5>
     db0:	89 e7       	ldi	r24, 0x79	; 121
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	0e 94 ef 07 	call	0xfde	; 0xfde <TIMER_Manager_init>
     db8:	83 30       	cpi	r24, 0x03	; 3
     dba:	99 f0       	breq	.+38     	; 0xde2 <SOS_init+0x46>
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	09 c0       	rjmp	.+18     	; 0xdd2 <SOS_init+0x36>
     dc0:	e9 2f       	mov	r30, r25
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	ee 0f       	add	r30, r30
     dc6:	ff 1f       	adc	r31, r31
     dc8:	ea 54       	subi	r30, 0x4A	; 74
     dca:	ff 4f       	sbci	r31, 0xFF	; 255
     dcc:	11 82       	std	Z+1, r1	; 0x01
     dce:	10 82       	st	Z, r1
     dd0:	9f 5f       	subi	r25, 0xFF	; 255
     dd2:	93 30       	cpi	r25, 0x03	; 3
     dd4:	a8 f3       	brcs	.-22     	; 0xdc0 <SOS_init+0x24>
     dd6:	91 e0       	ldi	r25, 0x01	; 1
     dd8:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <enu_sg_sos_init_status>
     ddc:	08 95       	ret
     dde:	84 e0       	ldi	r24, 0x04	; 4
     de0:	08 95       	ret
     de2:	86 e0       	ldi	r24, 0x06	; 6
     de4:	08 95       	ret

00000de6 <SOS_disable>:

/*************************************/
enu_sos_status_t SOS_disable (void)
{
	enu_sos_status_t enu_l_sos_ret = SOS_E_OK;
	if((SOS_FLAG_INITIALIZED==enu_sg_sos_init_status))
     de6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <enu_sg_sos_init_status>
     dea:	81 30       	cpi	r24, 0x01	; 1
     dec:	51 f4       	brne	.+20     	; 0xe02 <SOS_disable+0x1c>
	{
		//stop the timer
		enu_l_sos_ret = TIMER_Manager_stop(st_g_sos_timer.u8_timerNum);
     dee:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <st_g_sos_timer>
     df2:	0e 94 21 08 	call	0x1042	; 0x1042 <TIMER_Manager_stop>
		if(TIMER_E_NOT_OK==enu_l_sos_ret)
     df6:	83 30       	cpi	r24, 0x03	; 3
     df8:	29 f0       	breq	.+10     	; 0xe04 <SOS_disable+0x1e>
		{
			enu_l_sos_ret = TIMER_E_NOT_OK;
		}
		else
		{
			Start_Flag =2;
     dfa:	92 e0       	ldi	r25, 0x02	; 2
     dfc:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <Start_Flag>
     e00:	08 95       	ret
		}
		
	}
	else
	{
		enu_l_sos_ret = SOS_NOT_INITIALIZED;
     e02:	83 e0       	ldi	r24, 0x03	; 3
	}
	return enu_l_sos_ret;
}
     e04:	08 95       	ret

00000e06 <SOS_run>:

enu_sos_status_t SOS_run (void)
{		
	while (TRUE)
	{
		if (Start_Flag==1)
     e06:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <Start_Flag>
     e0a:	81 30       	cpi	r24, 0x01	; 1
     e0c:	09 f0       	breq	.+2      	; 0xe10 <SOS_run+0xa>
     e0e:	99 c0       	rjmp	.+306    	; 0xf42 <SOS_run+0x13c>
		{
			enu_sos_status_t  enu_l_sos_ret = SOS_E_OK;
			uint8_t u8_l_task_index = ZERO_INIT;
			uint8_t u8_l_timerStopFlag = ZERO_INIT;
	
			if((SOS_FLAG_INITIALIZED==enu_sg_sos_init_status))
     e10:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <enu_sg_sos_init_status>
     e14:	81 30       	cpi	r24, 0x01	; 1
     e16:	b9 f7       	brne	.-18     	; 0xe06 <SOS_run>
			{
				enu_l_sos_ret = TIMER_Manager_start(&st_g_sos_timer);
     e18:	89 e7       	ldi	r24, 0x79	; 121
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	0e 94 0f 08 	call	0x101e	; 0x101e <TIMER_Manager_start>
		
				if(TIMER_E_NOT_OK==enu_l_sos_ret)
     e20:	83 30       	cpi	r24, 0x03	; 3
     e22:	89 f3       	breq	.-30     	; 0xe06 <SOS_run>
				{
					enu_l_sos_ret = SOS_TIMER_E_NOK;
				}
				else
				{
						enu_l_sos_ret = init_theArrayOfIDs();
     e24:	0e 94 49 06 	call	0xc92	; 0xc92 <init_theArrayOfIDs>

							for(uintu8_sg_sos_index_2=0;uintu8_sg_sos_index_2<SOS_TASKS_MAX_NUM;uintu8_sg_sos_index_2++)
     e28:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <uintu8_sg_sos_index_2>
     e2c:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <uintu8_sg_sos_index_2+0x1>
     e30:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <uintu8_sg_sos_index_2+0x2>
     e34:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <uintu8_sg_sos_index_2+0x3>
     e38:	76 c0       	rjmp	.+236    	; 0xf26 <SOS_run+0x120>
							{
								if((strPtrs_tasks[u8Arr_sg_ID_of_taskPriorty[uintu8_sg_sos_index_2]]->u16_task_priodic_time)==
     e3a:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <uintu8_sg_sos_index_2>
     e3e:	90 91 a3 00 	lds	r25, 0x00A3	; 0x8000a3 <uintu8_sg_sos_index_2+0x1>
     e42:	a0 91 a4 00 	lds	r26, 0x00A4	; 0x8000a4 <uintu8_sg_sos_index_2+0x2>
     e46:	b0 91 a5 00 	lds	r27, 0x00A5	; 0x8000a5 <uintu8_sg_sos_index_2+0x3>
     e4a:	fc 01       	movw	r30, r24
     e4c:	e1 56       	subi	r30, 0x61	; 97
     e4e:	ff 4f       	sbci	r31, 0xFF	; 255
     e50:	e0 81       	ld	r30, Z
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	ee 0f       	add	r30, r30
     e56:	ff 1f       	adc	r31, r31
     e58:	ea 54       	subi	r30, 0x4A	; 74
     e5a:	ff 4f       	sbci	r31, 0xFF	; 255
     e5c:	01 90       	ld	r0, Z+
     e5e:	f0 81       	ld	r31, Z
     e60:	e0 2d       	mov	r30, r0
     e62:	82 81       	ldd	r24, Z+2	; 0x02
     e64:	93 81       	ldd	r25, Z+3	; 0x03
     e66:	a0 e0       	ldi	r26, 0x00	; 0
     e68:	b0 e0       	ldi	r27, 0x00	; 0
								(u8Arr_sg__of_taskCounters[u8Arr_sg_ID_of_taskPriorty[uintu8_sg_sos_index_2]]))
     e6a:	40 91 a2 00 	lds	r20, 0x00A2	; 0x8000a2 <uintu8_sg_sos_index_2>
     e6e:	50 91 a3 00 	lds	r21, 0x00A3	; 0x8000a3 <uintu8_sg_sos_index_2+0x1>
     e72:	60 91 a4 00 	lds	r22, 0x00A4	; 0x8000a4 <uintu8_sg_sos_index_2+0x2>
     e76:	70 91 a5 00 	lds	r23, 0x00A5	; 0x8000a5 <uintu8_sg_sos_index_2+0x3>
     e7a:	fa 01       	movw	r30, r20
     e7c:	e1 56       	subi	r30, 0x61	; 97
     e7e:	ff 4f       	sbci	r31, 0xFF	; 255
     e80:	e0 81       	ld	r30, Z
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	ee 0f       	add	r30, r30
     e86:	ff 1f       	adc	r31, r31
     e88:	ee 0f       	add	r30, r30
     e8a:	ff 1f       	adc	r31, r31
     e8c:	e6 55       	subi	r30, 0x56	; 86
     e8e:	ff 4f       	sbci	r31, 0xFF	; 255
     e90:	40 81       	ld	r20, Z
     e92:	51 81       	ldd	r21, Z+1	; 0x01
     e94:	62 81       	ldd	r22, Z+2	; 0x02
     e96:	73 81       	ldd	r23, Z+3	; 0x03
				{
						enu_l_sos_ret = init_theArrayOfIDs();

							for(uintu8_sg_sos_index_2=0;uintu8_sg_sos_index_2<SOS_TASKS_MAX_NUM;uintu8_sg_sos_index_2++)
							{
								if((strPtrs_tasks[u8Arr_sg_ID_of_taskPriorty[uintu8_sg_sos_index_2]]->u16_task_priodic_time)==
     e98:	84 17       	cp	r24, r20
     e9a:	95 07       	cpc	r25, r21
     e9c:	a6 07       	cpc	r26, r22
     e9e:	b7 07       	cpc	r27, r23
     ea0:	79 f5       	brne	.+94     	; 0xf00 <SOS_run+0xfa>
								(u8Arr_sg__of_taskCounters[u8Arr_sg_ID_of_taskPriorty[uintu8_sg_sos_index_2]]))
								{
									(strPtrs_tasks[u8Arr_sg_ID_of_taskPriorty[uintu8_sg_sos_index_2]]->Fptr_task_callBack)();		
     ea2:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <uintu8_sg_sos_index_2>
     ea6:	90 91 a3 00 	lds	r25, 0x00A3	; 0x8000a3 <uintu8_sg_sos_index_2+0x1>
     eaa:	a0 91 a4 00 	lds	r26, 0x00A4	; 0x8000a4 <uintu8_sg_sos_index_2+0x2>
     eae:	b0 91 a5 00 	lds	r27, 0x00A5	; 0x8000a5 <uintu8_sg_sos_index_2+0x3>
     eb2:	fc 01       	movw	r30, r24
     eb4:	e1 56       	subi	r30, 0x61	; 97
     eb6:	ff 4f       	sbci	r31, 0xFF	; 255
     eb8:	e0 81       	ld	r30, Z
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	ee 0f       	add	r30, r30
     ebe:	ff 1f       	adc	r31, r31
     ec0:	ea 54       	subi	r30, 0x4A	; 74
     ec2:	ff 4f       	sbci	r31, 0xFF	; 255
     ec4:	01 90       	ld	r0, Z+
     ec6:	f0 81       	ld	r31, Z
     ec8:	e0 2d       	mov	r30, r0
     eca:	05 80       	ldd	r0, Z+5	; 0x05
     ecc:	f6 81       	ldd	r31, Z+6	; 0x06
     ece:	e0 2d       	mov	r30, r0
     ed0:	09 95       	icall
									u8Arr_sg__of_taskCounters[u8Arr_sg_ID_of_taskPriorty[uintu8_sg_sos_index_2]]=0;
     ed2:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <uintu8_sg_sos_index_2>
     ed6:	90 91 a3 00 	lds	r25, 0x00A3	; 0x8000a3 <uintu8_sg_sos_index_2+0x1>
     eda:	a0 91 a4 00 	lds	r26, 0x00A4	; 0x8000a4 <uintu8_sg_sos_index_2+0x2>
     ede:	b0 91 a5 00 	lds	r27, 0x00A5	; 0x8000a5 <uintu8_sg_sos_index_2+0x3>
     ee2:	fc 01       	movw	r30, r24
     ee4:	e1 56       	subi	r30, 0x61	; 97
     ee6:	ff 4f       	sbci	r31, 0xFF	; 255
     ee8:	e0 81       	ld	r30, Z
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	ee 0f       	add	r30, r30
     eee:	ff 1f       	adc	r31, r31
     ef0:	ee 0f       	add	r30, r30
     ef2:	ff 1f       	adc	r31, r31
     ef4:	e6 55       	subi	r30, 0x56	; 86
     ef6:	ff 4f       	sbci	r31, 0xFF	; 255
     ef8:	10 82       	st	Z, r1
     efa:	11 82       	std	Z+1, r1	; 0x01
     efc:	12 82       	std	Z+2, r1	; 0x02
     efe:	13 82       	std	Z+3, r1	; 0x03
				}
				else
				{
						enu_l_sos_ret = init_theArrayOfIDs();

							for(uintu8_sg_sos_index_2=0;uintu8_sg_sos_index_2<SOS_TASKS_MAX_NUM;uintu8_sg_sos_index_2++)
     f00:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <uintu8_sg_sos_index_2>
     f04:	90 91 a3 00 	lds	r25, 0x00A3	; 0x8000a3 <uintu8_sg_sos_index_2+0x1>
     f08:	a0 91 a4 00 	lds	r26, 0x00A4	; 0x8000a4 <uintu8_sg_sos_index_2+0x2>
     f0c:	b0 91 a5 00 	lds	r27, 0x00A5	; 0x8000a5 <uintu8_sg_sos_index_2+0x3>
     f10:	01 96       	adiw	r24, 0x01	; 1
     f12:	a1 1d       	adc	r26, r1
     f14:	b1 1d       	adc	r27, r1
     f16:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <uintu8_sg_sos_index_2>
     f1a:	90 93 a3 00 	sts	0x00A3, r25	; 0x8000a3 <uintu8_sg_sos_index_2+0x1>
     f1e:	a0 93 a4 00 	sts	0x00A4, r26	; 0x8000a4 <uintu8_sg_sos_index_2+0x2>
     f22:	b0 93 a5 00 	sts	0x00A5, r27	; 0x8000a5 <uintu8_sg_sos_index_2+0x3>
     f26:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <uintu8_sg_sos_index_2>
     f2a:	90 91 a3 00 	lds	r25, 0x00A3	; 0x8000a3 <uintu8_sg_sos_index_2+0x1>
     f2e:	a0 91 a4 00 	lds	r26, 0x00A4	; 0x8000a4 <uintu8_sg_sos_index_2+0x2>
     f32:	b0 91 a5 00 	lds	r27, 0x00A5	; 0x8000a5 <uintu8_sg_sos_index_2+0x3>
     f36:	03 97       	sbiw	r24, 0x03	; 3
     f38:	a1 05       	cpc	r26, r1
     f3a:	b1 05       	cpc	r27, r1
     f3c:	08 f4       	brcc	.+2      	; 0xf40 <SOS_run+0x13a>
     f3e:	7d cf       	rjmp	.-262    	; 0xe3a <SOS_run+0x34>
     f40:	62 cf       	rjmp	.-316    	; 0xe06 <SOS_run>
			{
				enu_l_sos_ret = SOS_E_NOK;
			}
		}
	
		else if (Start_Flag==2)
     f42:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <Start_Flag>
     f46:	82 30       	cpi	r24, 0x02	; 2
     f48:	09 f0       	breq	.+2      	; 0xf4c <SOS_run+0x146>
     f4a:	5d cf       	rjmp	.-326    	; 0xe06 <SOS_run>
		{
			SOS_disable();
     f4c:	0e 94 f3 06 	call	0xde6	; 0xde6 <SOS_disable>
     f50:	5a cf       	rjmp	.-332    	; 0xe06 <SOS_run>

00000f52 <SOS_create_task>:

enu_sos_status_t SOS_create_task (str_task_control_data_t *strPtr_task_control_data)
{
	enu_sos_status_t enu_l_sos_ret = SOS_E_OK;
	uint8_t u8_l_task_index_3_ = ZERO_INIT;
	if (strPtr_task_control_data->u8_task_id < SOS_TASKS_MAX_NUM)
     f52:	fc 01       	movw	r30, r24
     f54:	21 81       	ldd	r18, Z+1	; 0x01
     f56:	23 30       	cpi	r18, 0x03	; 3
     f58:	00 f5       	brcc	.+64     	; 0xf9a <SOS_create_task+0x48>
	{
		if ((strPtr_task_control_data->Fptr_task_callBack!=NULL) && (strPtr_task_control_data)  &&
     f5a:	45 81       	ldd	r20, Z+5	; 0x05
     f5c:	56 81       	ldd	r21, Z+6	; 0x06
     f5e:	45 2b       	or	r20, r21
     f60:	f1 f0       	breq	.+60     	; 0xf9e <SOS_create_task+0x4c>
     f62:	00 97       	sbiw	r24, 0x00	; 0
     f64:	f1 f0       	breq	.+60     	; 0xfa2 <SOS_create_task+0x50>
		 (enu_sg_sos_init_status==SOS_FLAG_INITIALIZED) && (strPtrs_tasks[strPtr_task_control_data->u8_task_id]->Fptr_task_callBack==NULL))
     f66:	30 91 bc 00 	lds	r19, 0x00BC	; 0x8000bc <enu_sg_sos_init_status>
{
	enu_sos_status_t enu_l_sos_ret = SOS_E_OK;
	uint8_t u8_l_task_index_3_ = ZERO_INIT;
	if (strPtr_task_control_data->u8_task_id < SOS_TASKS_MAX_NUM)
	{
		if ((strPtr_task_control_data->Fptr_task_callBack!=NULL) && (strPtr_task_control_data)  &&
     f6a:	31 30       	cpi	r19, 0x01	; 1
     f6c:	e1 f4       	brne	.+56     	; 0xfa6 <SOS_create_task+0x54>
		 (enu_sg_sos_init_status==SOS_FLAG_INITIALIZED) && (strPtrs_tasks[strPtr_task_control_data->u8_task_id]->Fptr_task_callBack==NULL))
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	f9 01       	movw	r30, r18
     f72:	ee 0f       	add	r30, r30
     f74:	ff 1f       	adc	r31, r31
     f76:	ea 54       	subi	r30, 0x4A	; 74
     f78:	ff 4f       	sbci	r31, 0xFF	; 255
     f7a:	01 90       	ld	r0, Z+
     f7c:	f0 81       	ld	r31, Z
     f7e:	e0 2d       	mov	r30, r0
     f80:	45 81       	ldd	r20, Z+5	; 0x05
     f82:	56 81       	ldd	r21, Z+6	; 0x06
     f84:	45 2b       	or	r20, r21
     f86:	89 f4       	brne	.+34     	; 0xfaa <SOS_create_task+0x58>
		{
			strPtrs_tasks[strPtr_task_control_data->u8_task_id]                        =strPtr_task_control_data;
     f88:	22 0f       	add	r18, r18
     f8a:	33 1f       	adc	r19, r19
     f8c:	f9 01       	movw	r30, r18
     f8e:	ea 54       	subi	r30, 0x4A	; 74
     f90:	ff 4f       	sbci	r31, 0xFF	; 255
     f92:	91 83       	std	Z+1, r25	; 0x01
     f94:	80 83       	st	Z, r24

/**************************************/

enu_sos_status_t SOS_create_task (str_task_control_data_t *strPtr_task_control_data)
{
	enu_sos_status_t enu_l_sos_ret = SOS_E_OK;
     f96:	81 e0       	ldi	r24, 0x01	; 1
	if (strPtr_task_control_data->u8_task_id < SOS_TASKS_MAX_NUM)
	{
		if ((strPtr_task_control_data->Fptr_task_callBack!=NULL) && (strPtr_task_control_data)  &&
		 (enu_sg_sos_init_status==SOS_FLAG_INITIALIZED) && (strPtrs_tasks[strPtr_task_control_data->u8_task_id]->Fptr_task_callBack==NULL))
		{
			strPtrs_tasks[strPtr_task_control_data->u8_task_id]                        =strPtr_task_control_data;
     f98:	08 95       	ret
			enu_l_sos_ret=SOS_E_NOK;
		}
	}
	else
	{
		enu_l_sos_ret=SOS_E_NOK;
     f9a:	80 e0       	ldi	r24, 0x00	; 0
     f9c:	08 95       	ret
			strPtrs_tasks[strPtr_task_control_data->u8_task_id]                        =strPtr_task_control_data;
		}
		else
		{
			/*task id already exist*/
			enu_l_sos_ret=SOS_E_NOK;
     f9e:	80 e0       	ldi	r24, 0x00	; 0
     fa0:	08 95       	ret
     fa2:	80 e0       	ldi	r24, 0x00	; 0
     fa4:	08 95       	ret
     fa6:	80 e0       	ldi	r24, 0x00	; 0
     fa8:	08 95       	ret
     faa:	80 e0       	ldi	r24, 0x00	; 0
		enu_l_sos_ret=SOS_E_NOK;
	}

	return enu_l_sos_ret;

}
     fac:	08 95       	ret

00000fae <EXT_INTx_setCallBack_manger>:


Std_ReturnType EXT_INTx_setCallBack_manger(void(*a_fptr)(void),  Interrupt_ID_t a_interrupt_number )
{
	Std_ReturnType ret = E_OK;
	if(NULL == a_fptr || a_interrupt_number > NUM_OF_EXT_INTx - 1)
     fae:	00 97       	sbiw	r24, 0x00	; 0
     fb0:	29 f0       	breq	.+10     	; 0xfbc <EXT_INTx_setCallBack_manger+0xe>
     fb2:	63 30       	cpi	r22, 0x03	; 3
     fb4:	28 f4       	brcc	.+10     	; 0xfc0 <EXT_INTx_setCallBack_manger+0x12>
	{
		ret = E_NOT_OK;
	}
	else
	{
		ret=EXT_INTx_setCallBack(a_fptr,a_interrupt_number);
     fb6:	0e 94 66 02 	call	0x4cc	; 0x4cc <EXT_INTx_setCallBack>
     fba:	08 95       	ret
Std_ReturnType EXT_INTx_setCallBack_manger(void(*a_fptr)(void),  Interrupt_ID_t a_interrupt_number )
{
	Std_ReturnType ret = E_OK;
	if(NULL == a_fptr || a_interrupt_number > NUM_OF_EXT_INTx - 1)
	{
		ret = E_NOT_OK;
     fbc:	80 e0       	ldi	r24, 0x00	; 0
     fbe:	08 95       	ret
     fc0:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		ret=EXT_INTx_setCallBack(a_fptr,a_interrupt_number);
	}
	return ret;
}
     fc2:	08 95       	ret

00000fc4 <EXT_INTx_Init_manger>:

Std_ReturnType EXT_INTx_Init_manger( Interrupt_Config_t *Interrupt_Config_Ptr )
{
	Std_ReturnType ret = E_OK;
	if(NULL == Interrupt_Config_Ptr || Interrupt_Config_Ptr->source_id > NUM_OF_EXT_INTx - 1)
     fc4:	00 97       	sbiw	r24, 0x00	; 0
     fc6:	39 f0       	breq	.+14     	; 0xfd6 <EXT_INTx_Init_manger+0x12>
     fc8:	fc 01       	movw	r30, r24
     fca:	21 81       	ldd	r18, Z+1	; 0x01
     fcc:	23 30       	cpi	r18, 0x03	; 3
     fce:	28 f4       	brcc	.+10     	; 0xfda <EXT_INTx_Init_manger+0x16>
	{
		ret = E_NOT_OK;
	}
	else
	{
		ret=EXT_INTx_Init(Interrupt_Config_Ptr);
     fd0:	0e 94 00 03 	call	0x600	; 0x600 <EXT_INTx_Init>
     fd4:	08 95       	ret
Std_ReturnType EXT_INTx_Init_manger( Interrupt_Config_t *Interrupt_Config_Ptr )
{
	Std_ReturnType ret = E_OK;
	if(NULL == Interrupt_Config_Ptr || Interrupt_Config_Ptr->source_id > NUM_OF_EXT_INTx - 1)
	{
		ret = E_NOT_OK;
     fd6:	80 e0       	ldi	r24, 0x00	; 0
     fd8:	08 95       	ret
     fda:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		ret=EXT_INTx_Init(Interrupt_Config_Ptr);
	}
	return ret;
}
     fdc:	08 95       	ret

00000fde <TIMER_Manager_init>:
#include "timer_manager.h"
#include "../../MCAL/timer/timer.h"


u8_en_timerErrorsType TIMER_Manager_init (st_timerConfigType* st_config)
{
     fde:	1f 93       	push	r17
     fe0:	cf 93       	push	r28
     fe2:	df 93       	push	r29
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==st_config || st_config->u8_timerNum >= TIMER_INVALID_NUM || st_config->u8_timerClock >= TIMER_INVALID_CLOCK)
     fe4:	00 97       	sbiw	r24, 0x00	; 0
     fe6:	91 f0       	breq	.+36     	; 0x100c <TIMER_Manager_init+0x2e>
     fe8:	fc 01       	movw	r30, r24
     fea:	20 81       	ld	r18, Z
     fec:	23 30       	cpi	r18, 0x03	; 3
     fee:	80 f4       	brcc	.+32     	; 0x1010 <TIMER_Manager_init+0x32>
     ff0:	21 81       	ldd	r18, Z+1	; 0x01
     ff2:	2a 30       	cpi	r18, 0x0A	; 10
     ff4:	78 f4       	brcc	.+30     	; 0x1014 <TIMER_Manager_init+0x36>
     ff6:	ec 01       	movw	r28, r24
	{
		l_ret = TIMER_E_NOT_OK;
	}
	else
	{
		l_ret  = TIMER_init(st_config);
     ff8:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <TIMER_init>
     ffc:	18 2f       	mov	r17, r24
		l_ret |= TIMER_setCallBack(st_config->callBackFunction,st_config->u8_timerNum);
     ffe:	68 81       	ld	r22, Y
    1000:	8d 81       	ldd	r24, Y+5	; 0x05
    1002:	9e 81       	ldd	r25, Y+6	; 0x06
    1004:	0e 94 27 06 	call	0xc4e	; 0xc4e <TIMER_setCallBack>
    1008:	81 2b       	or	r24, r17
    100a:	05 c0       	rjmp	.+10     	; 0x1016 <TIMER_Manager_init+0x38>
u8_en_timerErrorsType TIMER_Manager_init (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==st_config || st_config->u8_timerNum >= TIMER_INVALID_NUM || st_config->u8_timerClock >= TIMER_INVALID_CLOCK)
	{
		l_ret = TIMER_E_NOT_OK;
    100c:	83 e0       	ldi	r24, 0x03	; 3
    100e:	03 c0       	rjmp	.+6      	; 0x1016 <TIMER_Manager_init+0x38>
    1010:	83 e0       	ldi	r24, 0x03	; 3
    1012:	01 c0       	rjmp	.+2      	; 0x1016 <TIMER_Manager_init+0x38>
    1014:	83 e0       	ldi	r24, 0x03	; 3
	{
		l_ret  = TIMER_init(st_config);
		l_ret |= TIMER_setCallBack(st_config->callBackFunction,st_config->u8_timerNum);
	}
	return l_ret;
}
    1016:	df 91       	pop	r29
    1018:	cf 91       	pop	r28
    101a:	1f 91       	pop	r17
    101c:	08 95       	ret

0000101e <TIMER_Manager_start>:
u8_en_timerErrorsType TIMER_Manager_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==st_config || st_config->u8_timerNum >= TIMER_INVALID_NUM || st_config->u8_timerClock >= TIMER_INVALID_CLOCK)
    101e:	00 97       	sbiw	r24, 0x00	; 0
    1020:	51 f0       	breq	.+20     	; 0x1036 <TIMER_Manager_start+0x18>
    1022:	fc 01       	movw	r30, r24
    1024:	20 81       	ld	r18, Z
    1026:	23 30       	cpi	r18, 0x03	; 3
    1028:	40 f4       	brcc	.+16     	; 0x103a <TIMER_Manager_start+0x1c>
    102a:	21 81       	ldd	r18, Z+1	; 0x01
    102c:	2a 30       	cpi	r18, 0x0A	; 10
    102e:	38 f4       	brcc	.+14     	; 0x103e <TIMER_Manager_start+0x20>
	{
		l_ret = TIMER_E_NOT_OK;
	}
	else
	{
		l_ret = TIMER_start(st_config);
    1030:	0e 94 86 04 	call	0x90c	; 0x90c <TIMER_start>
    1034:	08 95       	ret
u8_en_timerErrorsType TIMER_Manager_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==st_config || st_config->u8_timerNum >= TIMER_INVALID_NUM || st_config->u8_timerClock >= TIMER_INVALID_CLOCK)
	{
		l_ret = TIMER_E_NOT_OK;
    1036:	83 e0       	ldi	r24, 0x03	; 3
    1038:	08 95       	ret
    103a:	83 e0       	ldi	r24, 0x03	; 3
    103c:	08 95       	ret
    103e:	83 e0       	ldi	r24, 0x03	; 3
	else
	{
		l_ret = TIMER_start(st_config);
	}
	return l_ret;
}
    1040:	08 95       	ret

00001042 <TIMER_Manager_stop>:
u8_en_timerErrorsType TIMER_Manager_stop (u8_en_timerNumberType u8_en_timerNum)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if( u8_en_timerNum >= TIMER_INVALID_NUM )
    1042:	83 30       	cpi	r24, 0x03	; 3
    1044:	18 f4       	brcc	.+6      	; 0x104c <TIMER_Manager_stop+0xa>
	{
		l_ret = TIMER_E_NOT_OK;
	}
	else
	{
		l_ret = TIMER_stop(u8_en_timerNum);
    1046:	0e 94 d2 05 	call	0xba4	; 0xba4 <TIMER_stop>
    104a:	08 95       	ret
u8_en_timerErrorsType TIMER_Manager_stop (u8_en_timerNumberType u8_en_timerNum)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if( u8_en_timerNum >= TIMER_INVALID_NUM )
	{
		l_ret = TIMER_E_NOT_OK;
    104c:	83 e0       	ldi	r24, 0x03	; 3
	else
	{
		l_ret = TIMER_stop(u8_en_timerNum);
	}
	return l_ret;
}
    104e:	08 95       	ret

00001050 <TIMER_Manager_reset>:
u8_en_timerErrorsType TIMER_Manager_reset (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==st_config || st_config->u8_timerNum >= TIMER_INVALID_NUM || st_config->u8_timerClock >= TIMER_INVALID_CLOCK)
    1050:	00 97       	sbiw	r24, 0x00	; 0
    1052:	51 f0       	breq	.+20     	; 0x1068 <TIMER_Manager_reset+0x18>
    1054:	fc 01       	movw	r30, r24
    1056:	20 81       	ld	r18, Z
    1058:	23 30       	cpi	r18, 0x03	; 3
    105a:	40 f4       	brcc	.+16     	; 0x106c <TIMER_Manager_reset+0x1c>
    105c:	21 81       	ldd	r18, Z+1	; 0x01
    105e:	2a 30       	cpi	r18, 0x0A	; 10
    1060:	38 f4       	brcc	.+14     	; 0x1070 <TIMER_Manager_reset+0x20>
	{
		l_ret = TIMER_E_NOT_OK;
	}
	else
	{
		l_ret = TIMER_reset(st_config);
    1062:	0e 94 ff 05 	call	0xbfe	; 0xbfe <TIMER_reset>
    1066:	08 95       	ret
u8_en_timerErrorsType TIMER_Manager_reset (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==st_config || st_config->u8_timerNum >= TIMER_INVALID_NUM || st_config->u8_timerClock >= TIMER_INVALID_CLOCK)
	{
		l_ret = TIMER_E_NOT_OK;
    1068:	83 e0       	ldi	r24, 0x03	; 3
    106a:	08 95       	ret
    106c:	83 e0       	ldi	r24, 0x03	; 3
    106e:	08 95       	ret
    1070:	83 e0       	ldi	r24, 0x03	; 3
	else
	{
		l_ret = TIMER_reset(st_config);
	}
	return l_ret;
    1072:	08 95       	ret

00001074 <__tablejump2__>:
    1074:	ee 0f       	add	r30, r30
    1076:	ff 1f       	adc	r31, r31
    1078:	05 90       	lpm	r0, Z+
    107a:	f4 91       	lpm	r31, Z
    107c:	e0 2d       	mov	r30, r0
    107e:	09 94       	ijmp

00001080 <_exit>:
    1080:	f8 94       	cli

00001082 <__stop_program>:
    1082:	ff cf       	rjmp	.-2      	; 0x1082 <__stop_program>
