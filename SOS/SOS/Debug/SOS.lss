
SOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001050  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000032  00800060  00001050  000010e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002d  00800092  00800092  00001116  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001116  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001148  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002d0  00000000  00000000  00001184  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002b1b  00000000  00000000  00001454  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fff  00000000  00000000  00003f6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001d75  00000000  00000000  00004f6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005c8  00000000  00000000  00006ce4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000010d0  00000000  00000000  000072ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000204b  00000000  00000000  0000837c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e0  00000000  00000000  0000a3c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 c9 01 	jmp	0x392	; 0x392 <__vector_1>
       8:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__vector_2>
       c:	0c 94 21 02 	jmp	0x442	; 0x442 <__vector_3>
      10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      14:	0c 94 b0 03 	jmp	0x760	; 0x760 <__vector_5>
      18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      24:	0c 94 80 03 	jmp	0x700	; 0x700 <__vector_9>
      28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      2c:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <__vector_11>
      30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      54:	8d 04       	cpc	r8, r13
      56:	98 04       	cpc	r9, r8
      58:	a3 04       	cpc	r10, r3
      5a:	b3 05       	cpc	r27, r3
      5c:	ae 04       	cpc	r10, r14
      5e:	b3 05       	cpc	r27, r3
      60:	b9 04       	cpc	r11, r9
      62:	c4 04       	cpc	r12, r4
      64:	cf 04       	cpc	r12, r15
      66:	da 04       	cpc	r13, r10
      68:	f0 04       	cpc	r15, r0
      6a:	fb 04       	cpc	r15, r11
      6c:	06 05       	cpc	r16, r6
      6e:	b5 05       	cpc	r27, r5
      70:	11 05       	cpc	r17, r1
      72:	b5 05       	cpc	r27, r5
      74:	1c 05       	cpc	r17, r12
      76:	27 05       	cpc	r18, r7
      78:	32 05       	cpc	r19, r2
      7a:	3d 05       	cpc	r19, r13
      7c:	53 05       	cpc	r21, r3
      7e:	5e 05       	cpc	r21, r14
      80:	69 05       	cpc	r22, r9
      82:	74 05       	cpc	r23, r4
      84:	7f 05       	cpc	r23, r15
      86:	8a 05       	cpc	r24, r10
      88:	95 05       	cpc	r25, r5
      8a:	a0 05       	cpc	r26, r0

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf e5       	ldi	r28, 0x5F	; 95
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	10 e0       	ldi	r17, 0x00	; 0
      9a:	a0 e6       	ldi	r26, 0x60	; 96
      9c:	b0 e0       	ldi	r27, 0x00	; 0
      9e:	e0 e5       	ldi	r30, 0x50	; 80
      a0:	f0 e1       	ldi	r31, 0x10	; 16
      a2:	02 c0       	rjmp	.+4      	; 0xa8 <__do_copy_data+0x10>
      a4:	05 90       	lpm	r0, Z+
      a6:	0d 92       	st	X+, r0
      a8:	a2 39       	cpi	r26, 0x92	; 146
      aa:	b1 07       	cpc	r27, r17
      ac:	d9 f7       	brne	.-10     	; 0xa4 <__do_copy_data+0xc>

000000ae <__do_clear_bss>:
      ae:	20 e0       	ldi	r18, 0x00	; 0
      b0:	a2 e9       	ldi	r26, 0x92	; 146
      b2:	b0 e0       	ldi	r27, 0x00	; 0
      b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
      b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
      b8:	af 3b       	cpi	r26, 0xBF	; 191
      ba:	b2 07       	cpc	r27, r18
      bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
      be:	0e 94 1c 01 	call	0x238	; 0x238 <main>
      c2:	0c 94 26 08 	jmp	0x104c	; 0x104c <_exit>

000000c6 <__bad_interrupt>:
      c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <Start_sos_handler>:
volatile static uint16_t u8_sg_counter;


static void Start_sos_handler(void)
{
	Start_Flag=1;
      ca:	81 e0       	ldi	r24, 0x01	; 1
      cc:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <Start_Flag>
      d0:	08 95       	ret

000000d2 <Stop_sos_handler>:
}

static void Stop_sos_handler(void)
{
	Start_Flag=2;
      d2:	82 e0       	ldi	r24, 0x02	; 2
      d4:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <Start_Flag>
      d8:	08 95       	ret

000000da <task_2_handler>:



static void task_2_handler(void)
{	
	LED_turn_toggle(&st_g_led1_instance);
      da:	80 e6       	ldi	r24, 0x60	; 96
      dc:	90 e0       	ldi	r25, 0x00	; 0
      de:	0e 94 0a 01 	call	0x214	; 0x214 <LED_turn_toggle>
	u8_sg_counter++;
      e2:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <__data_end>
      e6:	90 91 93 00 	lds	r25, 0x0093	; 0x800093 <__data_end+0x1>
      ea:	01 96       	adiw	r24, 0x01	; 1
      ec:	90 93 93 00 	sts	0x0093, r25	; 0x800093 <__data_end+0x1>
      f0:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <__data_end>
      f4:	08 95       	ret

000000f6 <task_1_handler>:
}


static void task_1_handler(void)
{
	LED_turn_toggle(&st_g_led0_instance);	
      f6:	83 e6       	ldi	r24, 0x63	; 99
      f8:	90 e0       	ldi	r25, 0x00	; 0
      fa:	0e 94 0a 01 	call	0x214	; 0x214 <LED_turn_toggle>
      fe:	08 95       	ret

00000100 <APP_init>:
	u8_sg_counter++;
}

void APP_init()
{
	GLOBAL_InterruptEnable();
     100:	8f b7       	in	r24, 0x3f	; 63
     102:	80 68       	ori	r24, 0x80	; 128
     104:	8f bf       	out	0x3f, r24	; 63
	
	enu_sg_ret |=SOS_init();
     106:	0e 94 b5 06 	call	0xd6a	; 0xd6a <SOS_init>
     10a:	90 91 94 00 	lds	r25, 0x0094	; 0x800094 <enu_sg_ret>
     10e:	89 2b       	or	r24, r25
     110:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <enu_sg_ret>
	if(SOS_E_NOK==enu_sg_ret)
	{
		// handle TASK fail initialization
	}
	enu_sg_ret = LED_initialize(&st_g_led0_instance);
     114:	83 e6       	ldi	r24, 0x63	; 99
     116:	90 e0       	ldi	r25, 0x00	; 0
     118:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LED_initialize>
     11c:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <enu_sg_ret>
	if(E_NOT_OK==enu_sg_ret)
	{
		// handle led fail initialization
	}
	enu_sg_ret |= LED_initialize(&st_g_led1_instance);
     120:	80 e6       	ldi	r24, 0x60	; 96
     122:	90 e0       	ldi	r25, 0x00	; 0
     124:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LED_initialize>
     128:	90 91 94 00 	lds	r25, 0x0094	; 0x800094 <enu_sg_ret>
     12c:	89 2b       	or	r24, r25
     12e:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <enu_sg_ret>
	if(E_NOT_OK==enu_sg_ret)
	{
		// handle led fail initialization
	}
	str_g_task_1_.Fptr_task_callBack = task_1_handler;
     132:	8b e7       	ldi	r24, 0x7B	; 123
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <str_g_task_1_+0x6>
     13a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <str_g_task_1_+0x5>
	enu_sg_ret |=SOS_create_task(&str_g_task_1_);
     13e:	8f e6       	ldi	r24, 0x6F	; 111
     140:	90 e0       	ldi	r25, 0x00	; 0
     142:	0e 94 8f 07 	call	0xf1e	; 0xf1e <SOS_create_task>
     146:	90 91 94 00 	lds	r25, 0x0094	; 0x800094 <enu_sg_ret>
     14a:	89 2b       	or	r24, r25
     14c:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <enu_sg_ret>
	if(SOS_E_NOK==enu_sg_ret)
	{
		// handle TASK fail initialization
	}
	str_g_task_2_.Fptr_task_callBack = task_2_handler;
     150:	8d e6       	ldi	r24, 0x6D	; 109
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <str_g_task_2_+0x6>
     158:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <str_g_task_2_+0x5>
	enu_sg_ret |=SOS_create_task(&str_g_task_2_);
     15c:	88 e6       	ldi	r24, 0x68	; 104
     15e:	90 e0       	ldi	r25, 0x00	; 0
     160:	0e 94 8f 07 	call	0xf1e	; 0xf1e <SOS_create_task>
     164:	90 91 94 00 	lds	r25, 0x0094	; 0x800094 <enu_sg_ret>
     168:	89 2b       	or	r24, r25
     16a:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <enu_sg_ret>
	if(SOS_E_NOK==enu_sg_ret)
	{
		// handle TASK fail initialization
	}
/********************************************External interrupt for start & stop SOS********************************************************************/
       enu_sg_ret|= EXT_INTx_setCallBack_manger(&Start_sos_handler,INTERRUPT_EXTERNAL_INT0);
     16e:	60 e0       	ldi	r22, 0x00	; 0
     170:	85 e6       	ldi	r24, 0x65	; 101
     172:	90 e0       	ldi	r25, 0x00	; 0
     174:	0e 94 bd 07 	call	0xf7a	; 0xf7a <EXT_INTx_setCallBack_manger>
     178:	90 91 94 00 	lds	r25, 0x0094	; 0x800094 <enu_sg_ret>
     17c:	89 2b       	or	r24, r25
     17e:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <enu_sg_ret>
	   }
	   else
	   {
		   //do nothing
	   }
       enu_sg_ret|= EXT_INTx_Init_manger(&s_INT0);
     182:	88 e7       	ldi	r24, 0x78	; 120
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	0e 94 c8 07 	call	0xf90	; 0xf90 <EXT_INTx_Init_manger>
     18a:	90 91 94 00 	lds	r25, 0x0094	; 0x800094 <enu_sg_ret>
     18e:	89 2b       	or	r24, r25
     190:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <enu_sg_ret>
	    }
		else
		{
			//do nothing
		}
		enu_sg_ret|= EXT_INTx_setCallBack_manger(&Stop_sos_handler,INTERRUPT_EXTERNAL_INT1);
     194:	61 e0       	ldi	r22, 0x01	; 1
     196:	89 e6       	ldi	r24, 0x69	; 105
     198:	90 e0       	ldi	r25, 0x00	; 0
     19a:	0e 94 bd 07 	call	0xf7a	; 0xf7a <EXT_INTx_setCallBack_manger>
     19e:	90 91 94 00 	lds	r25, 0x0094	; 0x800094 <enu_sg_ret>
     1a2:	89 2b       	or	r24, r25
     1a4:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <enu_sg_ret>
		}
		else
		{
			//do nothing
		}
		enu_sg_ret|= EXT_INTx_Init_manger(&s_INT1);
     1a8:	86 e7       	ldi	r24, 0x76	; 118
     1aa:	90 e0       	ldi	r25, 0x00	; 0
     1ac:	0e 94 c8 07 	call	0xf90	; 0xf90 <EXT_INTx_Init_manger>
     1b0:	90 91 94 00 	lds	r25, 0x0094	; 0x800094 <enu_sg_ret>
     1b4:	89 2b       	or	r24, r25
     1b6:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <enu_sg_ret>
     1ba:	08 95       	ret

000001bc <APP_start>:

}

void APP_start()
{	
		SOS_run();
     1bc:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <SOS_run>
     1c0:	08 95       	ret

000001c2 <LED_initialize>:
	else
	{
		ret = DIO_pin_write_logic(&(led_ptr->led_pin),DIO_LOGIC_LOW);
	}
	return ret;
}
     1c2:	cf 93       	push	r28
     1c4:	df 93       	push	r29
     1c6:	00 97       	sbiw	r24, 0x00	; 0
     1c8:	d9 f0       	breq	.+54     	; 0x200 <LED_initialize+0x3e>
     1ca:	fc 01       	movw	r30, r24
     1cc:	21 81       	ldd	r18, Z+1	; 0x01
     1ce:	28 30       	cpi	r18, 0x08	; 8
     1d0:	c8 f4       	brcc	.+50     	; 0x204 <LED_initialize+0x42>
     1d2:	20 81       	ld	r18, Z
     1d4:	24 30       	cpi	r18, 0x04	; 4
     1d6:	c0 f4       	brcc	.+48     	; 0x208 <LED_initialize+0x46>
     1d8:	ec 01       	movw	r28, r24
     1da:	61 e0       	ldi	r22, 0x01	; 1
     1dc:	0e 94 23 01 	call	0x246	; 0x246 <DIO_pin_direction_intialize>
     1e0:	8a 81       	ldd	r24, Y+2	; 0x02
     1e2:	88 23       	and	r24, r24
     1e4:	19 f0       	breq	.+6      	; 0x1ec <LED_initialize+0x2a>
     1e6:	81 30       	cpi	r24, 0x01	; 1
     1e8:	31 f0       	breq	.+12     	; 0x1f6 <LED_initialize+0x34>
     1ea:	10 c0       	rjmp	.+32     	; 0x20c <LED_initialize+0x4a>
     1ec:	60 e0       	ldi	r22, 0x00	; 0
     1ee:	ce 01       	movw	r24, r28
     1f0:	0e 94 63 01 	call	0x2c6	; 0x2c6 <DIO_pin_write_logic>
     1f4:	0c c0       	rjmp	.+24     	; 0x20e <LED_initialize+0x4c>
     1f6:	61 e0       	ldi	r22, 0x01	; 1
     1f8:	ce 01       	movw	r24, r28
     1fa:	0e 94 63 01 	call	0x2c6	; 0x2c6 <DIO_pin_write_logic>
     1fe:	07 c0       	rjmp	.+14     	; 0x20e <LED_initialize+0x4c>
     200:	80 e0       	ldi	r24, 0x00	; 0
     202:	05 c0       	rjmp	.+10     	; 0x20e <LED_initialize+0x4c>
     204:	80 e0       	ldi	r24, 0x00	; 0
     206:	03 c0       	rjmp	.+6      	; 0x20e <LED_initialize+0x4c>
     208:	80 e0       	ldi	r24, 0x00	; 0
     20a:	01 c0       	rjmp	.+2      	; 0x20e <LED_initialize+0x4c>
     20c:	80 e0       	ldi	r24, 0x00	; 0
     20e:	df 91       	pop	r29
     210:	cf 91       	pop	r28
     212:	08 95       	ret

00000214 <LED_turn_toggle>:
Std_ReturnType LED_turn_toggle (const led_t *led_ptr)
{
	Std_ReturnType ret = E_OK;
	if(NULL == led_ptr || (led_ptr->led_pin.pin > PORT_PIN_MAX_NUMBER-1) || (led_ptr->led_pin.port > PORT_MAX_NUMBER-1))
     214:	00 97       	sbiw	r24, 0x00	; 0
     216:	51 f0       	breq	.+20     	; 0x22c <LED_turn_toggle+0x18>
     218:	fc 01       	movw	r30, r24
     21a:	21 81       	ldd	r18, Z+1	; 0x01
     21c:	28 30       	cpi	r18, 0x08	; 8
     21e:	40 f4       	brcc	.+16     	; 0x230 <LED_turn_toggle+0x1c>
     220:	20 81       	ld	r18, Z
     222:	24 30       	cpi	r18, 0x04	; 4
     224:	38 f4       	brcc	.+14     	; 0x234 <LED_turn_toggle+0x20>
	{
		ret = E_NOT_OK;
	}
	else
	{
		ret = DIO_pin_toggle_logic(&(led_ptr->led_pin));
     226:	0e 94 a4 01 	call	0x348	; 0x348 <DIO_pin_toggle_logic>
     22a:	08 95       	ret
Std_ReturnType LED_turn_toggle (const led_t *led_ptr)
{
	Std_ReturnType ret = E_OK;
	if(NULL == led_ptr || (led_ptr->led_pin.pin > PORT_PIN_MAX_NUMBER-1) || (led_ptr->led_pin.port > PORT_MAX_NUMBER-1))
	{
		ret = E_NOT_OK;
     22c:	80 e0       	ldi	r24, 0x00	; 0
     22e:	08 95       	ret
     230:	80 e0       	ldi	r24, 0x00	; 0
     232:	08 95       	ret
     234:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		ret = DIO_pin_toggle_logic(&(led_ptr->led_pin));
	}
	return ret;
     236:	08 95       	ret

00000238 <main>:



int main(void)
{
	APP_init();
     238:	0e 94 80 00 	call	0x100	; 0x100 <APP_init>
	APP_start();
     23c:	0e 94 de 00 	call	0x1bc	; 0x1bc <APP_start>

}
     240:	80 e0       	ldi	r24, 0x00	; 0
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	08 95       	ret

00000246 <DIO_pin_direction_intialize>:
	else
	{
		*logic_ptr = READ_BIT(*(pin_registers[pin_config_ptr->port]),pin_config_ptr->pin);
	}
	return ret;
}
     246:	00 97       	sbiw	r24, 0x00	; 0
     248:	b1 f1       	breq	.+108    	; 0x2b6 <DIO_pin_direction_intialize+0x70>
     24a:	dc 01       	movw	r26, r24
     24c:	11 96       	adiw	r26, 0x01	; 1
     24e:	2c 91       	ld	r18, X
     250:	11 97       	sbiw	r26, 0x01	; 1
     252:	28 30       	cpi	r18, 0x08	; 8
     254:	90 f5       	brcc	.+100    	; 0x2ba <DIO_pin_direction_intialize+0x74>
     256:	ec 91       	ld	r30, X
     258:	e4 30       	cpi	r30, 0x04	; 4
     25a:	88 f5       	brcc	.+98     	; 0x2be <DIO_pin_direction_intialize+0x78>
     25c:	66 23       	and	r22, r22
     25e:	b1 f0       	breq	.+44     	; 0x28c <DIO_pin_direction_intialize+0x46>
     260:	61 30       	cpi	r22, 0x01	; 1
     262:	79 f5       	brne	.+94     	; 0x2c2 <DIO_pin_direction_intialize+0x7c>
     264:	f0 e0       	ldi	r31, 0x00	; 0
     266:	ee 0f       	add	r30, r30
     268:	ff 1f       	adc	r31, r31
     26a:	e7 57       	subi	r30, 0x77	; 119
     26c:	ff 4f       	sbci	r31, 0xFF	; 255
     26e:	01 90       	ld	r0, Z+
     270:	f0 81       	ld	r31, Z
     272:	e0 2d       	mov	r30, r0
     274:	30 81       	ld	r19, Z
     276:	81 e0       	ldi	r24, 0x01	; 1
     278:	90 e0       	ldi	r25, 0x00	; 0
     27a:	02 c0       	rjmp	.+4      	; 0x280 <DIO_pin_direction_intialize+0x3a>
     27c:	88 0f       	add	r24, r24
     27e:	99 1f       	adc	r25, r25
     280:	2a 95       	dec	r18
     282:	e2 f7       	brpl	.-8      	; 0x27c <DIO_pin_direction_intialize+0x36>
     284:	83 2b       	or	r24, r19
     286:	80 83       	st	Z, r24
     288:	81 e0       	ldi	r24, 0x01	; 1
     28a:	08 95       	ret
     28c:	f0 e0       	ldi	r31, 0x00	; 0
     28e:	ee 0f       	add	r30, r30
     290:	ff 1f       	adc	r31, r31
     292:	e7 57       	subi	r30, 0x77	; 119
     294:	ff 4f       	sbci	r31, 0xFF	; 255
     296:	01 90       	ld	r0, Z+
     298:	f0 81       	ld	r31, Z
     29a:	e0 2d       	mov	r30, r0
     29c:	30 81       	ld	r19, Z
     29e:	81 e0       	ldi	r24, 0x01	; 1
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <DIO_pin_direction_intialize+0x62>
     2a4:	88 0f       	add	r24, r24
     2a6:	99 1f       	adc	r25, r25
     2a8:	2a 95       	dec	r18
     2aa:	e2 f7       	brpl	.-8      	; 0x2a4 <DIO_pin_direction_intialize+0x5e>
     2ac:	80 95       	com	r24
     2ae:	83 23       	and	r24, r19
     2b0:	80 83       	st	Z, r24
     2b2:	81 e0       	ldi	r24, 0x01	; 1
     2b4:	08 95       	ret
     2b6:	80 e0       	ldi	r24, 0x00	; 0
     2b8:	08 95       	ret
     2ba:	80 e0       	ldi	r24, 0x00	; 0
     2bc:	08 95       	ret
     2be:	80 e0       	ldi	r24, 0x00	; 0
     2c0:	08 95       	ret
     2c2:	80 e0       	ldi	r24, 0x00	; 0
     2c4:	08 95       	ret

000002c6 <DIO_pin_write_logic>:
     2c6:	00 97       	sbiw	r24, 0x00	; 0
     2c8:	b9 f1       	breq	.+110    	; 0x338 <DIO_pin_write_logic+0x72>
     2ca:	dc 01       	movw	r26, r24
     2cc:	11 96       	adiw	r26, 0x01	; 1
     2ce:	2c 91       	ld	r18, X
     2d0:	11 97       	sbiw	r26, 0x01	; 1
     2d2:	28 30       	cpi	r18, 0x08	; 8
     2d4:	98 f5       	brcc	.+102    	; 0x33c <DIO_pin_write_logic+0x76>
     2d6:	ec 91       	ld	r30, X
     2d8:	e4 30       	cpi	r30, 0x04	; 4
     2da:	90 f5       	brcc	.+100    	; 0x340 <DIO_pin_write_logic+0x7a>
     2dc:	66 23       	and	r22, r22
     2de:	19 f0       	breq	.+6      	; 0x2e6 <DIO_pin_write_logic+0x20>
     2e0:	61 30       	cpi	r22, 0x01	; 1
     2e2:	b1 f0       	breq	.+44     	; 0x310 <DIO_pin_write_logic+0x4a>
     2e4:	2f c0       	rjmp	.+94     	; 0x344 <DIO_pin_write_logic+0x7e>
     2e6:	f0 e0       	ldi	r31, 0x00	; 0
     2e8:	ee 0f       	add	r30, r30
     2ea:	ff 1f       	adc	r31, r31
     2ec:	ef 57       	subi	r30, 0x7F	; 127
     2ee:	ff 4f       	sbci	r31, 0xFF	; 255
     2f0:	01 90       	ld	r0, Z+
     2f2:	f0 81       	ld	r31, Z
     2f4:	e0 2d       	mov	r30, r0
     2f6:	30 81       	ld	r19, Z
     2f8:	81 e0       	ldi	r24, 0x01	; 1
     2fa:	90 e0       	ldi	r25, 0x00	; 0
     2fc:	02 c0       	rjmp	.+4      	; 0x302 <DIO_pin_write_logic+0x3c>
     2fe:	88 0f       	add	r24, r24
     300:	99 1f       	adc	r25, r25
     302:	2a 95       	dec	r18
     304:	e2 f7       	brpl	.-8      	; 0x2fe <DIO_pin_write_logic+0x38>
     306:	80 95       	com	r24
     308:	83 23       	and	r24, r19
     30a:	80 83       	st	Z, r24
     30c:	81 e0       	ldi	r24, 0x01	; 1
     30e:	08 95       	ret
     310:	f0 e0       	ldi	r31, 0x00	; 0
     312:	ee 0f       	add	r30, r30
     314:	ff 1f       	adc	r31, r31
     316:	ef 57       	subi	r30, 0x7F	; 127
     318:	ff 4f       	sbci	r31, 0xFF	; 255
     31a:	01 90       	ld	r0, Z+
     31c:	f0 81       	ld	r31, Z
     31e:	e0 2d       	mov	r30, r0
     320:	30 81       	ld	r19, Z
     322:	81 e0       	ldi	r24, 0x01	; 1
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	02 c0       	rjmp	.+4      	; 0x32c <DIO_pin_write_logic+0x66>
     328:	88 0f       	add	r24, r24
     32a:	99 1f       	adc	r25, r25
     32c:	2a 95       	dec	r18
     32e:	e2 f7       	brpl	.-8      	; 0x328 <DIO_pin_write_logic+0x62>
     330:	83 2b       	or	r24, r19
     332:	80 83       	st	Z, r24
     334:	81 e0       	ldi	r24, 0x01	; 1
     336:	08 95       	ret
     338:	80 e0       	ldi	r24, 0x00	; 0
     33a:	08 95       	ret
     33c:	80 e0       	ldi	r24, 0x00	; 0
     33e:	08 95       	ret
     340:	80 e0       	ldi	r24, 0x00	; 0
     342:	08 95       	ret
     344:	80 e0       	ldi	r24, 0x00	; 0
     346:	08 95       	ret

00000348 <DIO_pin_toggle_logic>:

Std_ReturnType DIO_pin_toggle_logic(const pin_config_t *pin_config_ptr)
{
	Std_ReturnType ret = E_OK;
	if(NULL == pin_config_ptr || (pin_config_ptr->pin > PORT_PIN_MAX_NUMBER-1) || (pin_config_ptr->port > PORT_MAX_NUMBER-1))
     348:	00 97       	sbiw	r24, 0x00	; 0
     34a:	e9 f0       	breq	.+58     	; 0x386 <DIO_pin_toggle_logic+0x3e>
     34c:	dc 01       	movw	r26, r24
     34e:	11 96       	adiw	r26, 0x01	; 1
     350:	2c 91       	ld	r18, X
     352:	11 97       	sbiw	r26, 0x01	; 1
     354:	28 30       	cpi	r18, 0x08	; 8
     356:	c8 f4       	brcc	.+50     	; 0x38a <DIO_pin_toggle_logic+0x42>
     358:	ec 91       	ld	r30, X
     35a:	e4 30       	cpi	r30, 0x04	; 4
     35c:	c0 f4       	brcc	.+48     	; 0x38e <DIO_pin_toggle_logic+0x46>
	{
		ret = E_NOT_OK;
	}
	else
	{
		 TOGGLE_BIT(*(port_registers[pin_config_ptr->port]),pin_config_ptr->pin);
     35e:	f0 e0       	ldi	r31, 0x00	; 0
     360:	ee 0f       	add	r30, r30
     362:	ff 1f       	adc	r31, r31
     364:	ef 57       	subi	r30, 0x7F	; 127
     366:	ff 4f       	sbci	r31, 0xFF	; 255
     368:	01 90       	ld	r0, Z+
     36a:	f0 81       	ld	r31, Z
     36c:	e0 2d       	mov	r30, r0
     36e:	30 81       	ld	r19, Z
     370:	81 e0       	ldi	r24, 0x01	; 1
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	02 c0       	rjmp	.+4      	; 0x37a <DIO_pin_toggle_logic+0x32>
     376:	88 0f       	add	r24, r24
     378:	99 1f       	adc	r25, r25
     37a:	2a 95       	dec	r18
     37c:	e2 f7       	brpl	.-8      	; 0x376 <DIO_pin_toggle_logic+0x2e>
     37e:	83 27       	eor	r24, r19
     380:	80 83       	st	Z, r24
	return ret;
}

Std_ReturnType DIO_pin_toggle_logic(const pin_config_t *pin_config_ptr)
{
	Std_ReturnType ret = E_OK;
     382:	81 e0       	ldi	r24, 0x01	; 1
     384:	08 95       	ret
	if(NULL == pin_config_ptr || (pin_config_ptr->pin > PORT_PIN_MAX_NUMBER-1) || (pin_config_ptr->port > PORT_MAX_NUMBER-1))
	{
		ret = E_NOT_OK;
     386:	80 e0       	ldi	r24, 0x00	; 0
     388:	08 95       	ret
     38a:	80 e0       	ldi	r24, 0x00	; 0
     38c:	08 95       	ret
     38e:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		 TOGGLE_BIT(*(port_registers[pin_config_ptr->port]),pin_config_ptr->pin);
	}
	return ret;
}
     390:	08 95       	ret

00000392 <__vector_1>:
static  void(*g_EXT_INT0_fptr)(void) = NULL;
static void(*g_EXT_INT1_fptr)(void) = NULL;
static void(*g_EXT_INT2_fptr)(void) = NULL;

ISR(INT0_vect)
{
     392:	1f 92       	push	r1
     394:	0f 92       	push	r0
     396:	0f b6       	in	r0, 0x3f	; 63
     398:	0f 92       	push	r0
     39a:	11 24       	eor	r1, r1
     39c:	2f 93       	push	r18
     39e:	3f 93       	push	r19
     3a0:	4f 93       	push	r20
     3a2:	5f 93       	push	r21
     3a4:	6f 93       	push	r22
     3a6:	7f 93       	push	r23
     3a8:	8f 93       	push	r24
     3aa:	9f 93       	push	r25
     3ac:	af 93       	push	r26
     3ae:	bf 93       	push	r27
     3b0:	ef 93       	push	r30
     3b2:	ff 93       	push	r31
	/* The INT0 external interrupt occurred (must be cleared in software) */
	EXT_INT0_InterruptFlagClear();
     3b4:	8a b7       	in	r24, 0x3a	; 58
     3b6:	80 64       	ori	r24, 0x40	; 64
     3b8:	8a bf       	out	0x3a, r24	; 58
	
	if(g_EXT_INT0_fptr)
     3ba:	e0 91 99 00 	lds	r30, 0x0099	; 0x800099 <g_EXT_INT0_fptr>
     3be:	f0 91 9a 00 	lds	r31, 0x009A	; 0x80009a <g_EXT_INT0_fptr+0x1>
     3c2:	30 97       	sbiw	r30, 0x00	; 0
     3c4:	09 f0       	breq	.+2      	; 0x3c8 <__vector_1+0x36>
	{
		/* Application Callback function gets called every time this ISR executes */
		(g_EXT_INT0_fptr)();
     3c6:	09 95       	icall
	}
	else{/*do nothing*/}
}
     3c8:	ff 91       	pop	r31
     3ca:	ef 91       	pop	r30
     3cc:	bf 91       	pop	r27
     3ce:	af 91       	pop	r26
     3d0:	9f 91       	pop	r25
     3d2:	8f 91       	pop	r24
     3d4:	7f 91       	pop	r23
     3d6:	6f 91       	pop	r22
     3d8:	5f 91       	pop	r21
     3da:	4f 91       	pop	r20
     3dc:	3f 91       	pop	r19
     3de:	2f 91       	pop	r18
     3e0:	0f 90       	pop	r0
     3e2:	0f be       	out	0x3f, r0	; 63
     3e4:	0f 90       	pop	r0
     3e6:	1f 90       	pop	r1
     3e8:	18 95       	reti

000003ea <__vector_2>:

ISR(INT1_vect)
{
     3ea:	1f 92       	push	r1
     3ec:	0f 92       	push	r0
     3ee:	0f b6       	in	r0, 0x3f	; 63
     3f0:	0f 92       	push	r0
     3f2:	11 24       	eor	r1, r1
     3f4:	2f 93       	push	r18
     3f6:	3f 93       	push	r19
     3f8:	4f 93       	push	r20
     3fa:	5f 93       	push	r21
     3fc:	6f 93       	push	r22
     3fe:	7f 93       	push	r23
     400:	8f 93       	push	r24
     402:	9f 93       	push	r25
     404:	af 93       	push	r26
     406:	bf 93       	push	r27
     408:	ef 93       	push	r30
     40a:	ff 93       	push	r31
	/* The INT1 external interrupt occurred (must be cleared in software) */
	EXT_INT1_InterruptFlagClear();
     40c:	8a b7       	in	r24, 0x3a	; 58
     40e:	80 68       	ori	r24, 0x80	; 128
     410:	8a bf       	out	0x3a, r24	; 58
	if(g_EXT_INT1_fptr)
     412:	e0 91 97 00 	lds	r30, 0x0097	; 0x800097 <g_EXT_INT1_fptr>
     416:	f0 91 98 00 	lds	r31, 0x0098	; 0x800098 <g_EXT_INT1_fptr+0x1>
     41a:	30 97       	sbiw	r30, 0x00	; 0
     41c:	09 f0       	breq	.+2      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
	{
		/* Application Callback function gets called every time this ISR executes */
		(*g_EXT_INT1_fptr)();
     41e:	09 95       	icall
	}
	else{/*do nothing*/}
}
     420:	ff 91       	pop	r31
     422:	ef 91       	pop	r30
     424:	bf 91       	pop	r27
     426:	af 91       	pop	r26
     428:	9f 91       	pop	r25
     42a:	8f 91       	pop	r24
     42c:	7f 91       	pop	r23
     42e:	6f 91       	pop	r22
     430:	5f 91       	pop	r21
     432:	4f 91       	pop	r20
     434:	3f 91       	pop	r19
     436:	2f 91       	pop	r18
     438:	0f 90       	pop	r0
     43a:	0f be       	out	0x3f, r0	; 63
     43c:	0f 90       	pop	r0
     43e:	1f 90       	pop	r1
     440:	18 95       	reti

00000442 <__vector_3>:

ISR(INT2_vect)
{
     442:	1f 92       	push	r1
     444:	0f 92       	push	r0
     446:	0f b6       	in	r0, 0x3f	; 63
     448:	0f 92       	push	r0
     44a:	11 24       	eor	r1, r1
     44c:	2f 93       	push	r18
     44e:	3f 93       	push	r19
     450:	4f 93       	push	r20
     452:	5f 93       	push	r21
     454:	6f 93       	push	r22
     456:	7f 93       	push	r23
     458:	8f 93       	push	r24
     45a:	9f 93       	push	r25
     45c:	af 93       	push	r26
     45e:	bf 93       	push	r27
     460:	ef 93       	push	r30
     462:	ff 93       	push	r31
	/* The INT1 external interrupt occurred (must be cleared in software) */
	EXT_INT1_InterruptFlagClear();
     464:	8a b7       	in	r24, 0x3a	; 58
     466:	80 68       	ori	r24, 0x80	; 128
     468:	8a bf       	out	0x3a, r24	; 58
	if(g_EXT_INT2_fptr)
     46a:	e0 91 95 00 	lds	r30, 0x0095	; 0x800095 <g_EXT_INT2_fptr>
     46e:	f0 91 96 00 	lds	r31, 0x0096	; 0x800096 <g_EXT_INT2_fptr+0x1>
     472:	30 97       	sbiw	r30, 0x00	; 0
     474:	09 f0       	breq	.+2      	; 0x478 <__vector_3+0x36>
	{
		/* Application Callback function gets called every time this ISR executes */
		(*g_EXT_INT2_fptr)();
     476:	09 95       	icall
	}
	else{/*do nothing*/}
}
     478:	ff 91       	pop	r31
     47a:	ef 91       	pop	r30
     47c:	bf 91       	pop	r27
     47e:	af 91       	pop	r26
     480:	9f 91       	pop	r25
     482:	8f 91       	pop	r24
     484:	7f 91       	pop	r23
     486:	6f 91       	pop	r22
     488:	5f 91       	pop	r21
     48a:	4f 91       	pop	r20
     48c:	3f 91       	pop	r19
     48e:	2f 91       	pop	r18
     490:	0f 90       	pop	r0
     492:	0f be       	out	0x3f, r0	; 63
     494:	0f 90       	pop	r0
     496:	1f 90       	pop	r1
     498:	18 95       	reti

0000049a <EXT_INTx_setCallBack>:

Std_ReturnType EXT_INTx_setCallBack( void(*a_fptr)(void),  Interrupt_ID_t a_interrupt_number )
{
	Std_ReturnType ret = E_OK;
	if(NULL == a_fptr || a_interrupt_number > NUM_OF_EXT_INTx - 1)
     49a:	00 97       	sbiw	r24, 0x00	; 0
     49c:	d1 f0       	breq	.+52     	; 0x4d2 <EXT_INTx_setCallBack+0x38>
     49e:	63 30       	cpi	r22, 0x03	; 3
     4a0:	d0 f4       	brcc	.+52     	; 0x4d6 <EXT_INTx_setCallBack+0x3c>
	{
		ret = E_NOT_OK;
	}
	else
	{
		switch(a_interrupt_number)
     4a2:	61 30       	cpi	r22, 0x01	; 1
     4a4:	51 f0       	breq	.+20     	; 0x4ba <EXT_INTx_setCallBack+0x20>
     4a6:	18 f0       	brcs	.+6      	; 0x4ae <EXT_INTx_setCallBack+0x14>
     4a8:	62 30       	cpi	r22, 0x02	; 2
     4aa:	69 f0       	breq	.+26     	; 0x4c6 <EXT_INTx_setCallBack+0x2c>
     4ac:	16 c0       	rjmp	.+44     	; 0x4da <EXT_INTx_setCallBack+0x40>
		{
			case INTERRUPT_EXTERNAL_INT0:
				g_EXT_INT0_fptr = a_fptr;
     4ae:	90 93 9a 00 	sts	0x009A, r25	; 0x80009a <g_EXT_INT0_fptr+0x1>
     4b2:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <g_EXT_INT0_fptr>
	else{/*do nothing*/}
}

Std_ReturnType EXT_INTx_setCallBack( void(*a_fptr)(void),  Interrupt_ID_t a_interrupt_number )
{
	Std_ReturnType ret = E_OK;
     4b6:	81 e0       	ldi	r24, 0x01	; 1
	{
		switch(a_interrupt_number)
		{
			case INTERRUPT_EXTERNAL_INT0:
				g_EXT_INT0_fptr = a_fptr;
				break;
     4b8:	08 95       	ret
			case INTERRUPT_EXTERNAL_INT1:
				g_EXT_INT1_fptr = a_fptr;
     4ba:	90 93 98 00 	sts	0x0098, r25	; 0x800098 <g_EXT_INT1_fptr+0x1>
     4be:	80 93 97 00 	sts	0x0097, r24	; 0x800097 <g_EXT_INT1_fptr>
	else{/*do nothing*/}
}

Std_ReturnType EXT_INTx_setCallBack( void(*a_fptr)(void),  Interrupt_ID_t a_interrupt_number )
{
	Std_ReturnType ret = E_OK;
     4c2:	81 e0       	ldi	r24, 0x01	; 1
			case INTERRUPT_EXTERNAL_INT0:
				g_EXT_INT0_fptr = a_fptr;
				break;
			case INTERRUPT_EXTERNAL_INT1:
				g_EXT_INT1_fptr = a_fptr;
				break;
     4c4:	08 95       	ret
			case INTERRUPT_EXTERNAL_INT2:
				g_EXT_INT2_fptr = a_fptr;
     4c6:	90 93 96 00 	sts	0x0096, r25	; 0x800096 <g_EXT_INT2_fptr+0x1>
     4ca:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <g_EXT_INT2_fptr>
	else{/*do nothing*/}
}

Std_ReturnType EXT_INTx_setCallBack( void(*a_fptr)(void),  Interrupt_ID_t a_interrupt_number )
{
	Std_ReturnType ret = E_OK;
     4ce:	81 e0       	ldi	r24, 0x01	; 1
			case INTERRUPT_EXTERNAL_INT1:
				g_EXT_INT1_fptr = a_fptr;
				break;
			case INTERRUPT_EXTERNAL_INT2:
				g_EXT_INT2_fptr = a_fptr;
				break;
     4d0:	08 95       	ret
Std_ReturnType EXT_INTx_setCallBack( void(*a_fptr)(void),  Interrupt_ID_t a_interrupt_number )
{
	Std_ReturnType ret = E_OK;
	if(NULL == a_fptr || a_interrupt_number > NUM_OF_EXT_INTx - 1)
	{
		ret = E_NOT_OK;
     4d2:	80 e0       	ldi	r24, 0x00	; 0
     4d4:	08 95       	ret
     4d6:	80 e0       	ldi	r24, 0x00	; 0
     4d8:	08 95       	ret
				break;
			case INTERRUPT_EXTERNAL_INT2:
				g_EXT_INT2_fptr = a_fptr;
				break;
			default:
				ret = E_NOT_OK;
     4da:	80 e0       	ldi	r24, 0x00	; 0
				break;		
		}	
	}
	return ret;
}
     4dc:	08 95       	ret

000004de <EXT_INTx_setEdgeType>:

Std_ReturnType EXT_INTx_setEdgeType(Interrupt_Edge_type_t a_edgeType ,  Interrupt_ID_t a_interrupt_Id)
{
	Std_ReturnType ret = E_OK;
	if(a_interrupt_Id > NUM_OF_EXT_INTx - 1 || a_edgeType > NOT_VALID_EDGE)
     4de:	63 30       	cpi	r22, 0x03	; 3
     4e0:	08 f0       	brcs	.+2      	; 0x4e4 <EXT_INTx_setEdgeType+0x6>
     4e2:	69 c0       	rjmp	.+210    	; 0x5b6 <EXT_INTx_setEdgeType+0xd8>
     4e4:	85 30       	cpi	r24, 0x05	; 5
     4e6:	08 f0       	brcs	.+2      	; 0x4ea <EXT_INTx_setEdgeType+0xc>
     4e8:	68 c0       	rjmp	.+208    	; 0x5ba <EXT_INTx_setEdgeType+0xdc>
	{
		ret = E_NOT_OK;
	}
	else
	{
		switch(a_interrupt_Id)
     4ea:	61 30       	cpi	r22, 0x01	; 1
     4ec:	69 f1       	breq	.+90     	; 0x548 <EXT_INTx_setEdgeType+0x6a>
     4ee:	20 f0       	brcs	.+8      	; 0x4f8 <EXT_INTx_setEdgeType+0x1a>
     4f0:	62 30       	cpi	r22, 0x02	; 2
     4f2:	09 f4       	brne	.+2      	; 0x4f6 <EXT_INTx_setEdgeType+0x18>
     4f4:	51 c0       	rjmp	.+162    	; 0x598 <EXT_INTx_setEdgeType+0xba>
     4f6:	63 c0       	rjmp	.+198    	; 0x5be <EXT_INTx_setEdgeType+0xe0>
		{
			case INTERRUPT_EXTERNAL_INT0:
				switch(a_edgeType)
     4f8:	81 30       	cpi	r24, 0x01	; 1
     4fa:	71 f0       	breq	.+28     	; 0x518 <EXT_INTx_setEdgeType+0x3a>
     4fc:	28 f0       	brcs	.+10     	; 0x508 <EXT_INTx_setEdgeType+0x2a>
     4fe:	82 30       	cpi	r24, 0x02	; 2
     500:	99 f0       	breq	.+38     	; 0x528 <EXT_INTx_setEdgeType+0x4a>
     502:	83 30       	cpi	r24, 0x03	; 3
     504:	c9 f0       	breq	.+50     	; 0x538 <EXT_INTx_setEdgeType+0x5a>
     506:	5d c0       	rjmp	.+186    	; 0x5c2 <EXT_INTx_setEdgeType+0xe4>
				{
					case INTERRUPT_LOW_LEVEL:
						CLEAR_BIT(MCUCR,ISC00);
     508:	85 b7       	in	r24, 0x35	; 53
     50a:	8e 7f       	andi	r24, 0xFE	; 254
     50c:	85 bf       	out	0x35, r24	; 53
						CLEAR_BIT(MCUCR,ISC01);
     50e:	85 b7       	in	r24, 0x35	; 53
     510:	8d 7f       	andi	r24, 0xFD	; 253
     512:	85 bf       	out	0x35, r24	; 53
	return ret;
}

Std_ReturnType EXT_INTx_setEdgeType(Interrupt_Edge_type_t a_edgeType ,  Interrupt_ID_t a_interrupt_Id)
{
	Std_ReturnType ret = E_OK;
     514:	81 e0       	ldi	r24, 0x01	; 1
				switch(a_edgeType)
				{
					case INTERRUPT_LOW_LEVEL:
						CLEAR_BIT(MCUCR,ISC00);
						CLEAR_BIT(MCUCR,ISC01);
						break;
     516:	08 95       	ret
					case INTERRUPT_ANY_LOGICAL_CHANGE:
						SET_BIT(MCUCR,ISC00);
     518:	85 b7       	in	r24, 0x35	; 53
     51a:	81 60       	ori	r24, 0x01	; 1
     51c:	85 bf       	out	0x35, r24	; 53
						CLEAR_BIT(MCUCR,ISC01);
     51e:	85 b7       	in	r24, 0x35	; 53
     520:	8d 7f       	andi	r24, 0xFD	; 253
     522:	85 bf       	out	0x35, r24	; 53
	return ret;
}

Std_ReturnType EXT_INTx_setEdgeType(Interrupt_Edge_type_t a_edgeType ,  Interrupt_ID_t a_interrupt_Id)
{
	Std_ReturnType ret = E_OK;
     524:	81 e0       	ldi	r24, 0x01	; 1
						CLEAR_BIT(MCUCR,ISC01);
						break;
					case INTERRUPT_ANY_LOGICAL_CHANGE:
						SET_BIT(MCUCR,ISC00);
						CLEAR_BIT(MCUCR,ISC01);
						break;
     526:	08 95       	ret
					case INTERRUPT_FALLING_EDGE:
						CLEAR_BIT(MCUCR,ISC00);
     528:	85 b7       	in	r24, 0x35	; 53
     52a:	8e 7f       	andi	r24, 0xFE	; 254
     52c:	85 bf       	out	0x35, r24	; 53
						SET_BIT(MCUCR,ISC01);
     52e:	85 b7       	in	r24, 0x35	; 53
     530:	82 60       	ori	r24, 0x02	; 2
     532:	85 bf       	out	0x35, r24	; 53
	return ret;
}

Std_ReturnType EXT_INTx_setEdgeType(Interrupt_Edge_type_t a_edgeType ,  Interrupt_ID_t a_interrupt_Id)
{
	Std_ReturnType ret = E_OK;
     534:	81 e0       	ldi	r24, 0x01	; 1
						CLEAR_BIT(MCUCR,ISC01);
						break;
					case INTERRUPT_FALLING_EDGE:
						CLEAR_BIT(MCUCR,ISC00);
						SET_BIT(MCUCR,ISC01);
						break;
     536:	08 95       	ret
					case INTERRUPT_RISING_EDGE:
						SET_BIT(MCUCR,ISC00);
     538:	85 b7       	in	r24, 0x35	; 53
     53a:	81 60       	ori	r24, 0x01	; 1
     53c:	85 bf       	out	0x35, r24	; 53
						SET_BIT(MCUCR,ISC01);
     53e:	85 b7       	in	r24, 0x35	; 53
     540:	82 60       	ori	r24, 0x02	; 2
     542:	85 bf       	out	0x35, r24	; 53
	return ret;
}

Std_ReturnType EXT_INTx_setEdgeType(Interrupt_Edge_type_t a_edgeType ,  Interrupt_ID_t a_interrupt_Id)
{
	Std_ReturnType ret = E_OK;
     544:	81 e0       	ldi	r24, 0x01	; 1
						SET_BIT(MCUCR,ISC01);
						break;
					case INTERRUPT_RISING_EDGE:
						SET_BIT(MCUCR,ISC00);
						SET_BIT(MCUCR,ISC01);
						break;
     546:	08 95       	ret
				}
				break;
			
			case INTERRUPT_EXTERNAL_INT1:
			
				switch(a_edgeType)
     548:	81 30       	cpi	r24, 0x01	; 1
     54a:	71 f0       	breq	.+28     	; 0x568 <EXT_INTx_setEdgeType+0x8a>
     54c:	28 f0       	brcs	.+10     	; 0x558 <EXT_INTx_setEdgeType+0x7a>
     54e:	82 30       	cpi	r24, 0x02	; 2
     550:	99 f0       	breq	.+38     	; 0x578 <EXT_INTx_setEdgeType+0x9a>
     552:	83 30       	cpi	r24, 0x03	; 3
     554:	c9 f0       	breq	.+50     	; 0x588 <EXT_INTx_setEdgeType+0xaa>
     556:	37 c0       	rjmp	.+110    	; 0x5c6 <EXT_INTx_setEdgeType+0xe8>
				{
					case INTERRUPT_LOW_LEVEL:
						CLEAR_BIT(MCUCR,ISC10);
     558:	85 b7       	in	r24, 0x35	; 53
     55a:	8b 7f       	andi	r24, 0xFB	; 251
     55c:	85 bf       	out	0x35, r24	; 53
						CLEAR_BIT(MCUCR,ISC11);
     55e:	85 b7       	in	r24, 0x35	; 53
     560:	87 7f       	andi	r24, 0xF7	; 247
     562:	85 bf       	out	0x35, r24	; 53
	return ret;
}

Std_ReturnType EXT_INTx_setEdgeType(Interrupt_Edge_type_t a_edgeType ,  Interrupt_ID_t a_interrupt_Id)
{
	Std_ReturnType ret = E_OK;
     564:	81 e0       	ldi	r24, 0x01	; 1
				switch(a_edgeType)
				{
					case INTERRUPT_LOW_LEVEL:
						CLEAR_BIT(MCUCR,ISC10);
						CLEAR_BIT(MCUCR,ISC11);
						break;
     566:	08 95       	ret
					case INTERRUPT_ANY_LOGICAL_CHANGE:
						SET_BIT(MCUCR,ISC10);
     568:	85 b7       	in	r24, 0x35	; 53
     56a:	84 60       	ori	r24, 0x04	; 4
     56c:	85 bf       	out	0x35, r24	; 53
						CLEAR_BIT(MCUCR,ISC11);
     56e:	85 b7       	in	r24, 0x35	; 53
     570:	87 7f       	andi	r24, 0xF7	; 247
     572:	85 bf       	out	0x35, r24	; 53
	return ret;
}

Std_ReturnType EXT_INTx_setEdgeType(Interrupt_Edge_type_t a_edgeType ,  Interrupt_ID_t a_interrupt_Id)
{
	Std_ReturnType ret = E_OK;
     574:	81 e0       	ldi	r24, 0x01	; 1
						CLEAR_BIT(MCUCR,ISC11);
						break;
					case INTERRUPT_ANY_LOGICAL_CHANGE:
						SET_BIT(MCUCR,ISC10);
						CLEAR_BIT(MCUCR,ISC11);
						break;
     576:	08 95       	ret
					case INTERRUPT_FALLING_EDGE:
						CLEAR_BIT(MCUCR,ISC10);
     578:	85 b7       	in	r24, 0x35	; 53
     57a:	8b 7f       	andi	r24, 0xFB	; 251
     57c:	85 bf       	out	0x35, r24	; 53
						SET_BIT(MCUCR,ISC11);
     57e:	85 b7       	in	r24, 0x35	; 53
     580:	88 60       	ori	r24, 0x08	; 8
     582:	85 bf       	out	0x35, r24	; 53
	return ret;
}

Std_ReturnType EXT_INTx_setEdgeType(Interrupt_Edge_type_t a_edgeType ,  Interrupt_ID_t a_interrupt_Id)
{
	Std_ReturnType ret = E_OK;
     584:	81 e0       	ldi	r24, 0x01	; 1
						CLEAR_BIT(MCUCR,ISC11);
						break;
					case INTERRUPT_FALLING_EDGE:
						CLEAR_BIT(MCUCR,ISC10);
						SET_BIT(MCUCR,ISC11);
						break;
     586:	08 95       	ret
					case INTERRUPT_RISING_EDGE:
						SET_BIT(MCUCR,ISC10);
     588:	85 b7       	in	r24, 0x35	; 53
     58a:	84 60       	ori	r24, 0x04	; 4
     58c:	85 bf       	out	0x35, r24	; 53
						SET_BIT(MCUCR,ISC11);
     58e:	85 b7       	in	r24, 0x35	; 53
     590:	88 60       	ori	r24, 0x08	; 8
     592:	85 bf       	out	0x35, r24	; 53
	return ret;
}

Std_ReturnType EXT_INTx_setEdgeType(Interrupt_Edge_type_t a_edgeType ,  Interrupt_ID_t a_interrupt_Id)
{
	Std_ReturnType ret = E_OK;
     594:	81 e0       	ldi	r24, 0x01	; 1
						SET_BIT(MCUCR,ISC11);
						break;
					case INTERRUPT_RISING_EDGE:
						SET_BIT(MCUCR,ISC10);
						SET_BIT(MCUCR,ISC11);
						break;
     596:	08 95       	ret
				}
				break;
			
			case INTERRUPT_EXTERNAL_INT2:
			
				switch(a_edgeType)
     598:	82 30       	cpi	r24, 0x02	; 2
     59a:	19 f0       	breq	.+6      	; 0x5a2 <EXT_INTx_setEdgeType+0xc4>
     59c:	83 30       	cpi	r24, 0x03	; 3
     59e:	31 f0       	breq	.+12     	; 0x5ac <EXT_INTx_setEdgeType+0xce>
     5a0:	14 c0       	rjmp	.+40     	; 0x5ca <EXT_INTx_setEdgeType+0xec>
				{
					case INTERRUPT_FALLING_EDGE:
						CLEAR_BIT(MCUCSR,ISC2);
     5a2:	84 b7       	in	r24, 0x34	; 52
     5a4:	8f 7b       	andi	r24, 0xBF	; 191
     5a6:	84 bf       	out	0x34, r24	; 52
	return ret;
}

Std_ReturnType EXT_INTx_setEdgeType(Interrupt_Edge_type_t a_edgeType ,  Interrupt_ID_t a_interrupt_Id)
{
	Std_ReturnType ret = E_OK;
     5a8:	81 e0       	ldi	r24, 0x01	; 1
			
				switch(a_edgeType)
				{
					case INTERRUPT_FALLING_EDGE:
						CLEAR_BIT(MCUCSR,ISC2);
						break;
     5aa:	08 95       	ret
					case INTERRUPT_RISING_EDGE:
						SET_BIT(MCUCSR,ISC2);
     5ac:	84 b7       	in	r24, 0x34	; 52
     5ae:	80 64       	ori	r24, 0x40	; 64
     5b0:	84 bf       	out	0x34, r24	; 52
	return ret;
}

Std_ReturnType EXT_INTx_setEdgeType(Interrupt_Edge_type_t a_edgeType ,  Interrupt_ID_t a_interrupt_Id)
{
	Std_ReturnType ret = E_OK;
     5b2:	81 e0       	ldi	r24, 0x01	; 1
					case INTERRUPT_FALLING_EDGE:
						CLEAR_BIT(MCUCSR,ISC2);
						break;
					case INTERRUPT_RISING_EDGE:
						SET_BIT(MCUCSR,ISC2);
						break;
     5b4:	08 95       	ret
Std_ReturnType EXT_INTx_setEdgeType(Interrupt_Edge_type_t a_edgeType ,  Interrupt_ID_t a_interrupt_Id)
{
	Std_ReturnType ret = E_OK;
	if(a_interrupt_Id > NUM_OF_EXT_INTx - 1 || a_edgeType > NOT_VALID_EDGE)
	{
		ret = E_NOT_OK;
     5b6:	80 e0       	ldi	r24, 0x00	; 0
     5b8:	08 95       	ret
     5ba:	80 e0       	ldi	r24, 0x00	; 0
     5bc:	08 95       	ret
						break;
				}
				break;
			
			default:
				ret = E_NOT_OK;
     5be:	80 e0       	ldi	r24, 0x00	; 0
     5c0:	08 95       	ret
					case INTERRUPT_RISING_EDGE:
						SET_BIT(MCUCR,ISC00);
						SET_BIT(MCUCR,ISC01);
						break;
					default:
						ret = E_NOT_OK;
     5c2:	80 e0       	ldi	r24, 0x00	; 0
     5c4:	08 95       	ret
					case INTERRUPT_RISING_EDGE:
						SET_BIT(MCUCR,ISC10);
						SET_BIT(MCUCR,ISC11);
						break;
					default:
						ret = E_NOT_OK;
     5c6:	80 e0       	ldi	r24, 0x00	; 0
     5c8:	08 95       	ret
						break;
					case INTERRUPT_RISING_EDGE:
						SET_BIT(MCUCSR,ISC2);
						break;
					default:
						ret = E_NOT_OK;
     5ca:	80 e0       	ldi	r24, 0x00	; 0
				ret = E_NOT_OK;
				break;
		}
	}
	return ret;
}
     5cc:	08 95       	ret

000005ce <EXT_INTx_Init>:

Std_ReturnType EXT_INTx_Init( Interrupt_Config_t *Interrupt_Config_Ptr )
{
     5ce:	1f 93       	push	r17
     5d0:	cf 93       	push	r28
     5d2:	df 93       	push	r29
     5d4:	00 d0       	rcall	.+0      	; 0x5d6 <EXT_INTx_Init+0x8>
     5d6:	cd b7       	in	r28, 0x3d	; 61
     5d8:	de b7       	in	r29, 0x3e	; 62
	Std_ReturnType ret = E_OK;
	if(NULL == Interrupt_Config_Ptr || Interrupt_Config_Ptr->source_id > NUM_OF_EXT_INTx - 1)
     5da:	00 97       	sbiw	r24, 0x00	; 0
     5dc:	09 f4       	brne	.+2      	; 0x5e0 <EXT_INTx_Init+0x12>
     5de:	57 c0       	rjmp	.+174    	; 0x68e <EXT_INTx_Init+0xc0>
     5e0:	fc 01       	movw	r30, r24
     5e2:	21 81       	ldd	r18, Z+1	; 0x01
     5e4:	23 30       	cpi	r18, 0x03	; 3
     5e6:	08 f0       	brcs	.+2      	; 0x5ea <EXT_INTx_Init+0x1c>
     5e8:	54 c0       	rjmp	.+168    	; 0x692 <EXT_INTx_Init+0xc4>
	{
		ret = E_NOT_OK;
	}
	else
	{
		switch(Interrupt_Config_Ptr->source_id)
     5ea:	21 30       	cpi	r18, 0x01	; 1
     5ec:	e9 f0       	breq	.+58     	; 0x628 <EXT_INTx_Init+0x5a>
     5ee:	18 f0       	brcs	.+6      	; 0x5f6 <EXT_INTx_Init+0x28>
     5f0:	22 30       	cpi	r18, 0x02	; 2
     5f2:	91 f1       	breq	.+100    	; 0x658 <EXT_INTx_Init+0x8a>
     5f4:	4a c0       	rjmp	.+148    	; 0x68a <EXT_INTx_Init+0xbc>
		{
			case INTERRUPT_EXTERNAL_INT0:
			
				/* Disable the External interrupt */
				EXT_INT0_InterruptDisable();
     5f6:	2b b7       	in	r18, 0x3b	; 59
     5f8:	2f 7b       	andi	r18, 0xBF	; 191
     5fa:	2b bf       	out	0x3b, r18	; 59
				/* Clear Interrupt Flag : External interrupt did not occur */
				EXT_INT0_InterruptFlagClear();
     5fc:	2a b7       	in	r18, 0x3a	; 58
     5fe:	20 64       	ori	r18, 0x40	; 64
     600:	2a bf       	out	0x3a, r18	; 58
				/* Configure External interrupt edge */
				ret = EXT_INTx_setEdgeType(Interrupt_Config_Ptr->edge,INTERRUPT_EXTERNAL_INT0);
     602:	60 e0       	ldi	r22, 0x00	; 0
     604:	80 81       	ld	r24, Z
     606:	0e 94 6f 02 	call	0x4de	; 0x4de <EXT_INTx_setEdgeType>
     60a:	18 2f       	mov	r17, r24
				/* Configure External interrupt I/O pin */
				pin_config_t INT0_PIN={.pin=PIN2,.port=PORTD_INDEX};
     60c:	83 e0       	ldi	r24, 0x03	; 3
     60e:	89 83       	std	Y+1, r24	; 0x01
     610:	82 e0       	ldi	r24, 0x02	; 2
     612:	8a 83       	std	Y+2, r24	; 0x02
				ret |= DIO_pin_direction_intialize(&INT0_PIN,DIO_DIRECTION_INPUT);
     614:	60 e0       	ldi	r22, 0x00	; 0
     616:	ce 01       	movw	r24, r28
     618:	01 96       	adiw	r24, 0x01	; 1
     61a:	0e 94 23 01 	call	0x246	; 0x246 <DIO_pin_direction_intialize>
     61e:	81 2b       	or	r24, r17
				/* Enable the External interrupt */
				EXT_INT0_InterruptEnable();
     620:	9b b7       	in	r25, 0x3b	; 59
     622:	90 64       	ori	r25, 0x40	; 64
     624:	9b bf       	out	0x3b, r25	; 59
				break;
     626:	36 c0       	rjmp	.+108    	; 0x694 <EXT_INTx_Init+0xc6>
				
			case INTERRUPT_EXTERNAL_INT1:
			
				/* Disable the External interrupt */
				EXT_INT1_InterruptDisable();
     628:	2b b7       	in	r18, 0x3b	; 59
     62a:	2f 77       	andi	r18, 0x7F	; 127
     62c:	2b bf       	out	0x3b, r18	; 59
				/* Clear Interrupt Flag : External interrupt did not occur */
				EXT_INT1_InterruptFlagClear();
     62e:	2a b7       	in	r18, 0x3a	; 58
     630:	20 68       	ori	r18, 0x80	; 128
     632:	2a bf       	out	0x3a, r18	; 58
				/* Configure External interrupt edge */
				ret = EXT_INTx_setEdgeType(Interrupt_Config_Ptr->edge,INTERRUPT_EXTERNAL_INT1);
     634:	61 e0       	ldi	r22, 0x01	; 1
     636:	80 81       	ld	r24, Z
     638:	0e 94 6f 02 	call	0x4de	; 0x4de <EXT_INTx_setEdgeType>
     63c:	18 2f       	mov	r17, r24
				/* Configure External interrupt I/O pin */
				pin_config_t INT1_PIN={.pin=PIN3,.port=PORTD_INDEX};
     63e:	83 e0       	ldi	r24, 0x03	; 3
     640:	89 83       	std	Y+1, r24	; 0x01
     642:	8a 83       	std	Y+2, r24	; 0x02
				ret |= DIO_pin_direction_intialize(&INT1_PIN,DIO_DIRECTION_INPUT);
     644:	60 e0       	ldi	r22, 0x00	; 0
     646:	ce 01       	movw	r24, r28
     648:	01 96       	adiw	r24, 0x01	; 1
     64a:	0e 94 23 01 	call	0x246	; 0x246 <DIO_pin_direction_intialize>
     64e:	81 2b       	or	r24, r17
				/* Enable the External interrupt */
				EXT_INT1_InterruptEnable();
     650:	9b b7       	in	r25, 0x3b	; 59
     652:	90 68       	ori	r25, 0x80	; 128
     654:	9b bf       	out	0x3b, r25	; 59
				break;
     656:	1e c0       	rjmp	.+60     	; 0x694 <EXT_INTx_Init+0xc6>
				
				
			case INTERRUPT_EXTERNAL_INT2:
			
				/* Disable the External interrupt */
				EXT_INT2_InterruptDisable();
     658:	2b b7       	in	r18, 0x3b	; 59
     65a:	2f 7d       	andi	r18, 0xDF	; 223
     65c:	2b bf       	out	0x3b, r18	; 59
				/* Clear Interrupt Flag : External interrupt did not occur */
				EXT_INT2_InterruptFlagClear();
     65e:	2a b7       	in	r18, 0x3a	; 58
     660:	20 62       	ori	r18, 0x20	; 32
     662:	2a bf       	out	0x3a, r18	; 58
				/* Configure External interrupt edge */
				ret = EXT_INTx_setEdgeType(Interrupt_Config_Ptr->edge,INTERRUPT_EXTERNAL_INT2);
     664:	62 e0       	ldi	r22, 0x02	; 2
     666:	80 81       	ld	r24, Z
     668:	0e 94 6f 02 	call	0x4de	; 0x4de <EXT_INTx_setEdgeType>
     66c:	18 2f       	mov	r17, r24
				/* Configure External interrupt I/O pin */
				pin_config_t INT2_PIN={.pin=PIN2,.port=PORTB};
     66e:	88 b3       	in	r24, 0x18	; 24
     670:	89 83       	std	Y+1, r24	; 0x01
     672:	82 e0       	ldi	r24, 0x02	; 2
     674:	8a 83       	std	Y+2, r24	; 0x02
				ret |= DIO_pin_direction_intialize(&INT2_PIN,DIO_DIRECTION_INPUT);
     676:	60 e0       	ldi	r22, 0x00	; 0
     678:	ce 01       	movw	r24, r28
     67a:	01 96       	adiw	r24, 0x01	; 1
     67c:	0e 94 23 01 	call	0x246	; 0x246 <DIO_pin_direction_intialize>
     680:	81 2b       	or	r24, r17
				/* Enable the External interrupt */
				EXT_INT1_InterruptEnable();
     682:	9b b7       	in	r25, 0x3b	; 59
     684:	90 68       	ori	r25, 0x80	; 128
     686:	9b bf       	out	0x3b, r25	; 59
				break;
     688:	05 c0       	rjmp	.+10     	; 0x694 <EXT_INTx_Init+0xc6>
				
			default:
				ret = E_NOT_OK;
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	03 c0       	rjmp	.+6      	; 0x694 <EXT_INTx_Init+0xc6>
Std_ReturnType EXT_INTx_Init( Interrupt_Config_t *Interrupt_Config_Ptr )
{
	Std_ReturnType ret = E_OK;
	if(NULL == Interrupt_Config_Ptr || Interrupt_Config_Ptr->source_id > NUM_OF_EXT_INTx - 1)
	{
		ret = E_NOT_OK;
     68e:	80 e0       	ldi	r24, 0x00	; 0
     690:	01 c0       	rjmp	.+2      	; 0x694 <EXT_INTx_Init+0xc6>
     692:	80 e0       	ldi	r24, 0x00	; 0
				ret = E_NOT_OK;
				break;
		}
	}
	return ret;
}
     694:	0f 90       	pop	r0
     696:	0f 90       	pop	r0
     698:	df 91       	pop	r29
     69a:	cf 91       	pop	r28
     69c:	1f 91       	pop	r17
     69e:	08 95       	ret

000006a0 <__vector_11>:
static timerCallBack sg_Timer0_callBackPtr = NULL;
static timerCallBack sg_Timer1_callBackPtr = NULL;
static timerCallBack sg_Timer2_callBackPtr = NULL;

ISR(TIMER0_OVF)
{
     6a0:	1f 92       	push	r1
     6a2:	0f 92       	push	r0
     6a4:	0f b6       	in	r0, 0x3f	; 63
     6a6:	0f 92       	push	r0
     6a8:	11 24       	eor	r1, r1
     6aa:	2f 93       	push	r18
     6ac:	3f 93       	push	r19
     6ae:	4f 93       	push	r20
     6b0:	5f 93       	push	r21
     6b2:	6f 93       	push	r22
     6b4:	7f 93       	push	r23
     6b6:	8f 93       	push	r24
     6b8:	9f 93       	push	r25
     6ba:	af 93       	push	r26
     6bc:	bf 93       	push	r27
     6be:	ef 93       	push	r30
     6c0:	ff 93       	push	r31
	if(sg_Timer0_callBackPtr != NULL)
     6c2:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <sg_Timer0_callBackPtr>
     6c6:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <sg_Timer0_callBackPtr+0x1>
     6ca:	89 2b       	or	r24, r25
     6cc:	41 f0       	breq	.+16     	; 0x6de <__vector_11+0x3e>
	{
		// The timer0 overflow  occurred (must be cleared in software)
		CLEAR_BIT(TIFR,TOV0);
     6ce:	88 b7       	in	r24, 0x38	; 56
     6d0:	8e 7f       	andi	r24, 0xFE	; 254
     6d2:	88 bf       	out	0x38, r24	; 56
		//Call the Call Back function in the upper layer after the timer overflow
		(sg_Timer0_callBackPtr)();
     6d4:	e0 91 9f 00 	lds	r30, 0x009F	; 0x80009f <sg_Timer0_callBackPtr>
     6d8:	f0 91 a0 00 	lds	r31, 0x00A0	; 0x8000a0 <sg_Timer0_callBackPtr+0x1>
     6dc:	09 95       	icall
	}
}
     6de:	ff 91       	pop	r31
     6e0:	ef 91       	pop	r30
     6e2:	bf 91       	pop	r27
     6e4:	af 91       	pop	r26
     6e6:	9f 91       	pop	r25
     6e8:	8f 91       	pop	r24
     6ea:	7f 91       	pop	r23
     6ec:	6f 91       	pop	r22
     6ee:	5f 91       	pop	r21
     6f0:	4f 91       	pop	r20
     6f2:	3f 91       	pop	r19
     6f4:	2f 91       	pop	r18
     6f6:	0f 90       	pop	r0
     6f8:	0f be       	out	0x3f, r0	; 63
     6fa:	0f 90       	pop	r0
     6fc:	1f 90       	pop	r1
     6fe:	18 95       	reti

00000700 <__vector_9>:

ISR(TIMER1_OVF)
{
     700:	1f 92       	push	r1
     702:	0f 92       	push	r0
     704:	0f b6       	in	r0, 0x3f	; 63
     706:	0f 92       	push	r0
     708:	11 24       	eor	r1, r1
     70a:	2f 93       	push	r18
     70c:	3f 93       	push	r19
     70e:	4f 93       	push	r20
     710:	5f 93       	push	r21
     712:	6f 93       	push	r22
     714:	7f 93       	push	r23
     716:	8f 93       	push	r24
     718:	9f 93       	push	r25
     71a:	af 93       	push	r26
     71c:	bf 93       	push	r27
     71e:	ef 93       	push	r30
     720:	ff 93       	push	r31
	if(sg_Timer1_callBackPtr != NULL)
     722:	80 91 9d 00 	lds	r24, 0x009D	; 0x80009d <sg_Timer1_callBackPtr>
     726:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <sg_Timer1_callBackPtr+0x1>
     72a:	89 2b       	or	r24, r25
     72c:	41 f0       	breq	.+16     	; 0x73e <__vector_9+0x3e>
	{
		// The timer1 overflow  occurred (must be cleared in software)
		CLEAR_BIT(TIFR,TOV1);
     72e:	88 b7       	in	r24, 0x38	; 56
     730:	8b 7f       	andi	r24, 0xFB	; 251
     732:	88 bf       	out	0x38, r24	; 56
		// Call the Call Back function in the upper layer after the timer overflow
		(sg_Timer1_callBackPtr)();
     734:	e0 91 9d 00 	lds	r30, 0x009D	; 0x80009d <sg_Timer1_callBackPtr>
     738:	f0 91 9e 00 	lds	r31, 0x009E	; 0x80009e <sg_Timer1_callBackPtr+0x1>
     73c:	09 95       	icall
		
	}
}
     73e:	ff 91       	pop	r31
     740:	ef 91       	pop	r30
     742:	bf 91       	pop	r27
     744:	af 91       	pop	r26
     746:	9f 91       	pop	r25
     748:	8f 91       	pop	r24
     74a:	7f 91       	pop	r23
     74c:	6f 91       	pop	r22
     74e:	5f 91       	pop	r21
     750:	4f 91       	pop	r20
     752:	3f 91       	pop	r19
     754:	2f 91       	pop	r18
     756:	0f 90       	pop	r0
     758:	0f be       	out	0x3f, r0	; 63
     75a:	0f 90       	pop	r0
     75c:	1f 90       	pop	r1
     75e:	18 95       	reti

00000760 <__vector_5>:

ISR(TIMER2_OVF)
{
     760:	1f 92       	push	r1
     762:	0f 92       	push	r0
     764:	0f b6       	in	r0, 0x3f	; 63
     766:	0f 92       	push	r0
     768:	11 24       	eor	r1, r1
     76a:	2f 93       	push	r18
     76c:	3f 93       	push	r19
     76e:	4f 93       	push	r20
     770:	5f 93       	push	r21
     772:	6f 93       	push	r22
     774:	7f 93       	push	r23
     776:	8f 93       	push	r24
     778:	9f 93       	push	r25
     77a:	af 93       	push	r26
     77c:	bf 93       	push	r27
     77e:	ef 93       	push	r30
     780:	ff 93       	push	r31
	if(sg_Timer2_callBackPtr != NULL)
     782:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <sg_Timer2_callBackPtr>
     786:	90 91 9c 00 	lds	r25, 0x009C	; 0x80009c <sg_Timer2_callBackPtr+0x1>
     78a:	89 2b       	or	r24, r25
     78c:	41 f0       	breq	.+16     	; 0x79e <__vector_5+0x3e>
	{
		//The timer2 overflow  occurred (must be cleared in software) 
		CLEAR_BIT(TIFR,TOV2);
     78e:	88 b7       	in	r24, 0x38	; 56
     790:	8f 7b       	andi	r24, 0xBF	; 191
     792:	88 bf       	out	0x38, r24	; 56
		//Call the Call Back function in the upper layer after the timer overflow
		(sg_Timer2_callBackPtr)();
     794:	e0 91 9b 00 	lds	r30, 0x009B	; 0x80009b <sg_Timer2_callBackPtr>
     798:	f0 91 9c 00 	lds	r31, 0x009C	; 0x80009c <sg_Timer2_callBackPtr+0x1>
     79c:	09 95       	icall
	}
}
     79e:	ff 91       	pop	r31
     7a0:	ef 91       	pop	r30
     7a2:	bf 91       	pop	r27
     7a4:	af 91       	pop	r26
     7a6:	9f 91       	pop	r25
     7a8:	8f 91       	pop	r24
     7aa:	7f 91       	pop	r23
     7ac:	6f 91       	pop	r22
     7ae:	5f 91       	pop	r21
     7b0:	4f 91       	pop	r20
     7b2:	3f 91       	pop	r19
     7b4:	2f 91       	pop	r18
     7b6:	0f 90       	pop	r0
     7b8:	0f be       	out	0x3f, r0	; 63
     7ba:	0f 90       	pop	r0
     7bc:	1f 90       	pop	r1
     7be:	18 95       	reti

000007c0 <TIMER_init>:

u8_en_timerErrorsType TIMER_init (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==st_config || st_config->u8_timerNum >= TIMER_INVALID_NUM || st_config->u8_timerClock >= TIMER_INVALID_CLOCK)
     7c0:	00 97       	sbiw	r24, 0x00	; 0
     7c2:	09 f4       	brne	.+2      	; 0x7c6 <TIMER_init+0x6>
     7c4:	7c c0       	rjmp	.+248    	; 0x8be <__stack+0x5f>
     7c6:	fc 01       	movw	r30, r24
     7c8:	20 81       	ld	r18, Z
     7ca:	23 30       	cpi	r18, 0x03	; 3
     7cc:	08 f0       	brcs	.+2      	; 0x7d0 <TIMER_init+0x10>
     7ce:	79 c0       	rjmp	.+242    	; 0x8c2 <__stack+0x63>
     7d0:	31 81       	ldd	r19, Z+1	; 0x01
     7d2:	3a 30       	cpi	r19, 0x0A	; 10
     7d4:	08 f0       	brcs	.+2      	; 0x7d8 <TIMER_init+0x18>
     7d6:	77 c0       	rjmp	.+238    	; 0x8c6 <__stack+0x67>
	{
		l_ret = TIMER_E_NOT_OK;
	}
	else
	{
		switch(st_config->u8_timerNum)
     7d8:	21 30       	cpi	r18, 0x01	; 1
     7da:	19 f1       	breq	.+70     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
     7dc:	20 f0       	brcs	.+8      	; 0x7e6 <TIMER_init+0x26>
     7de:	22 30       	cpi	r18, 0x02	; 2
     7e0:	09 f4       	brne	.+2      	; 0x7e4 <TIMER_init+0x24>
     7e2:	50 c0       	rjmp	.+160    	; 0x884 <__stack+0x25>
     7e4:	72 c0       	rjmp	.+228    	; 0x8ca <__stack+0x6b>
		{
			
			case TIMER_0:
				/*Clear registers of Timer0 before processing any of them*/
				CLEAR_REG(TCNT0);
     7e6:	12 be       	out	0x32, r1	; 50
				CLEAR_REG(TCCR0);
     7e8:	13 be       	out	0x33, r1	; 51
				CLEAR_REG(OCR0);
     7ea:	1c be       	out	0x3c, r1	; 60
				/*Configure initial value in TCNT0 for Timer0 to start count from it*/
				TCNT0 = st_config->u16_timer_InitialValue & U8_BIT_REG_MASK;
     7ec:	fc 01       	movw	r30, r24
     7ee:	22 81       	ldd	r18, Z+2	; 0x02
     7f0:	22 bf       	out	0x32, r18	; 50
				
				/*Configure the TIMER0 with normal  mode value and enable the interrupt for this mode if interrupt feature activated */
				
				/*Make FOC0 to be Active as it is overflow mode(for non-PWM mode)*/
				SET_BIT(TCCR0,FOC0);
     7f2:	23 b7       	in	r18, 0x33	; 51
     7f4:	20 68       	ori	r18, 0x80	; 128
     7f6:	23 bf       	out	0x33, r18	; 51
				/*Normal Overflow mode*/
				CLEAR_BIT(TCCR0,WGM00);
     7f8:	23 b7       	in	r18, 0x33	; 51
     7fa:	2f 7b       	andi	r18, 0xBF	; 191
     7fc:	23 bf       	out	0x33, r18	; 51
				CLEAR_BIT(TCCR0,WGM01);
     7fe:	23 b7       	in	r18, 0x33	; 51
     800:	27 7f       	andi	r18, 0xF7	; 247
     802:	23 bf       	out	0x33, r18	; 51
				/*Normal port operation, OC0 disconnected*/
				CLEAR_BIT(TCCR0,COM00);
     804:	23 b7       	in	r18, 0x33	; 51
     806:	2f 7e       	andi	r18, 0xEF	; 239
     808:	23 bf       	out	0x33, r18	; 51
				CLEAR_BIT(TCCR0,COM01);
     80a:	23 b7       	in	r18, 0x33	; 51
     80c:	2f 7d       	andi	r18, 0xDF	; 223
     80e:	23 bf       	out	0x33, r18	; 51
				if(TIMER_INTERRUPT_FEATURE_ENABLE==st_config->u8_timer_ovf_int_enable)
     810:	84 81       	ldd	r24, Z+4	; 0x04
     812:	81 30       	cpi	r24, 0x01	; 1
     814:	09 f0       	breq	.+2      	; 0x818 <__DATA_REGION_LENGTH__+0x18>
     816:	5b c0       	rjmp	.+182    	; 0x8ce <__stack+0x6f>
				{
					/* Enable Timer0 overflow interrupt*/
					SET_BIT(TIMSK,TOIE0);
     818:	89 b7       	in	r24, 0x39	; 57
     81a:	81 60       	ori	r24, 0x01	; 1
     81c:	89 bf       	out	0x39, r24	; 57
	}
}

u8_en_timerErrorsType TIMER_init (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     81e:	80 e0       	ldi	r24, 0x00	; 0
     820:	08 95       	ret
				
				break;
			
			case TIMER_1:
				/*Clear registers of Timer1 before processing any of them*/
				CLEAR_REG(TCNT1L);
     822:	1c bc       	out	0x2c, r1	; 44
				CLEAR_REG(TCNT1H);
     824:	1d bc       	out	0x2d, r1	; 45
				CLEAR_REG(TCCR1A);
     826:	1f bc       	out	0x2f, r1	; 47
				CLEAR_REG(TCCR1B);
     828:	1e bc       	out	0x2e, r1	; 46
				CLEAR_REG(OCR1AH);
     82a:	1b bc       	out	0x2b, r1	; 43
				CLEAR_REG(OCR1AL);
     82c:	1a bc       	out	0x2a, r1	; 42
				/*Configure initial value in TCNT1(high&low) for Timer0 to start count from it*/
				TCNT1 = st_config->u16_timer_InitialValue;
     82e:	fc 01       	movw	r30, r24
     830:	22 81       	ldd	r18, Z+2	; 0x02
     832:	33 81       	ldd	r19, Z+3	; 0x03
     834:	3d bd       	out	0x2d, r19	; 45
     836:	2c bd       	out	0x2c, r18	; 44
				TCNT1H = (st_config->u16_timer_InitialValue >> 8) & U8_BIT_REG_MASK;*/
				#endif
				
				/*Configure the TIMER1 with normal  mode value and enable the interrupt for this mode if interrupt feature activated */
				/*Make FOC1A,FOC1B to be Active as it is overflow mode(for non-PWM mode)*/
				SET_BIT(TCCR1A,FOC1A);
     838:	2f b5       	in	r18, 0x2f	; 47
     83a:	28 60       	ori	r18, 0x08	; 8
     83c:	2f bd       	out	0x2f, r18	; 47
				SET_BIT(TCCR1A,FOC1B);
     83e:	2f b5       	in	r18, 0x2f	; 47
     840:	24 60       	ori	r18, 0x04	; 4
     842:	2f bd       	out	0x2f, r18	; 47
				/*Normal Overflow mode*/
				CLEAR_BIT(TCCR1A,WGM10);
     844:	2f b5       	in	r18, 0x2f	; 47
     846:	2e 7f       	andi	r18, 0xFE	; 254
     848:	2f bd       	out	0x2f, r18	; 47
				CLEAR_BIT(TCCR1A,WGM11);
     84a:	2f b5       	in	r18, 0x2f	; 47
     84c:	2d 7f       	andi	r18, 0xFD	; 253
     84e:	2f bd       	out	0x2f, r18	; 47
				CLEAR_BIT(TCCR1B,WGM12);
     850:	2e b5       	in	r18, 0x2e	; 46
     852:	2f 7e       	andi	r18, 0xEF	; 239
     854:	2e bd       	out	0x2e, r18	; 46
				CLEAR_BIT(TCCR1B,WGM13);
     856:	2e b5       	in	r18, 0x2e	; 46
     858:	27 7f       	andi	r18, 0xF7	; 247
     85a:	2e bd       	out	0x2e, r18	; 46
				/*Normal port operation, OC1A/OC1B disconnected.*/
				CLEAR_BIT(TCCR1A,COM1A0);
     85c:	2f b5       	in	r18, 0x2f	; 47
     85e:	2f 7b       	andi	r18, 0xBF	; 191
     860:	2f bd       	out	0x2f, r18	; 47
				CLEAR_BIT(TCCR1A,COM1A1);
     862:	2f b5       	in	r18, 0x2f	; 47
     864:	2f 77       	andi	r18, 0x7F	; 127
     866:	2f bd       	out	0x2f, r18	; 47
				CLEAR_BIT(TCCR1A,COM1B0);
     868:	2f b5       	in	r18, 0x2f	; 47
     86a:	2f 7e       	andi	r18, 0xEF	; 239
     86c:	2f bd       	out	0x2f, r18	; 47
				CLEAR_BIT(TCCR1A,COM1B1);
     86e:	2f b5       	in	r18, 0x2f	; 47
     870:	2f 7d       	andi	r18, 0xDF	; 223
     872:	2f bd       	out	0x2f, r18	; 47
				
				if(TIMER_INTERRUPT_FEATURE_ENABLE==st_config->u8_timer_ovf_int_enable)
     874:	84 81       	ldd	r24, Z+4	; 0x04
     876:	81 30       	cpi	r24, 0x01	; 1
     878:	61 f5       	brne	.+88     	; 0x8d2 <__stack+0x73>
				{
					/* Enable Timer1 overflow interrupt*/
					//TIMSK |= 1<<TOIE1;
					SET_BIT(TIMSK,TOIE1);
     87a:	89 b7       	in	r24, 0x39	; 57
     87c:	84 60       	ori	r24, 0x04	; 4
     87e:	89 bf       	out	0x39, r24	; 57
	}
}

u8_en_timerErrorsType TIMER_init (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     880:	80 e0       	ldi	r24, 0x00	; 0
     882:	08 95       	ret
				
				break;
			
			case TIMER_2:
				/*Clear registers of Timer2 before processing any of them*/
				CLEAR_REG(TCNT2);
     884:	14 bc       	out	0x24, r1	; 36
				CLEAR_REG(TCCR2);
     886:	15 bc       	out	0x25, r1	; 37
				CLEAR_REG(OCR2);
     888:	13 bc       	out	0x23, r1	; 35
				/*Configure initial value in TCNT for Timer2 to start count from it*/
				TCNT2 = st_config->u16_timer_InitialValue & U8_BIT_REG_MASK;
     88a:	fc 01       	movw	r30, r24
     88c:	22 81       	ldd	r18, Z+2	; 0x02
     88e:	24 bd       	out	0x24, r18	; 36
				/*Configure the TIMER2 with normal  mode value and enable the interrupt for this mode if interrupt feature activated */
				/*Make FOC2 to be Active as it is overflow mode(for non-PWM mode)*/
				SET_BIT(TCCR2,FOC2);
     890:	25 b5       	in	r18, 0x25	; 37
     892:	20 68       	ori	r18, 0x80	; 128
     894:	25 bd       	out	0x25, r18	; 37
				/*Normal Overflow mode*/
				CLEAR_BIT(TCCR2,WGM20);
     896:	25 b5       	in	r18, 0x25	; 37
     898:	2f 7b       	andi	r18, 0xBF	; 191
     89a:	25 bd       	out	0x25, r18	; 37
				CLEAR_BIT(TCCR2,WGM21);
     89c:	25 b5       	in	r18, 0x25	; 37
     89e:	27 7f       	andi	r18, 0xF7	; 247
     8a0:	25 bd       	out	0x25, r18	; 37
				/*Normal port operation, OC2 disconnected*/
				CLEAR_BIT(TCCR2,COM20);
     8a2:	25 b5       	in	r18, 0x25	; 37
     8a4:	2f 7e       	andi	r18, 0xEF	; 239
     8a6:	25 bd       	out	0x25, r18	; 37
				CLEAR_BIT(TCCR2,COM21);
     8a8:	25 b5       	in	r18, 0x25	; 37
     8aa:	2f 7d       	andi	r18, 0xDF	; 223
     8ac:	25 bd       	out	0x25, r18	; 37
				if(TIMER_INTERRUPT_FEATURE_ENABLE==st_config->u8_timer_ovf_int_enable)
     8ae:	84 81       	ldd	r24, Z+4	; 0x04
     8b0:	81 30       	cpi	r24, 0x01	; 1
     8b2:	89 f4       	brne	.+34     	; 0x8d6 <__stack+0x77>
				{
					/* Enable Timer2 overflow interrupt*/
					SET_BIT(TIMSK,TOIE2);
     8b4:	89 b7       	in	r24, 0x39	; 57
     8b6:	80 64       	ori	r24, 0x40	; 64
     8b8:	89 bf       	out	0x39, r24	; 57
	}
}

u8_en_timerErrorsType TIMER_init (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     8ba:	80 e0       	ldi	r24, 0x00	; 0
     8bc:	08 95       	ret
	if(NULL==st_config || st_config->u8_timerNum >= TIMER_INVALID_NUM || st_config->u8_timerClock >= TIMER_INVALID_CLOCK)
	{
		l_ret = TIMER_E_NOT_OK;
     8be:	83 e0       	ldi	r24, 0x03	; 3
     8c0:	08 95       	ret
     8c2:	83 e0       	ldi	r24, 0x03	; 3
     8c4:	08 95       	ret
     8c6:	83 e0       	ldi	r24, 0x03	; 3
     8c8:	08 95       	ret
				}
				
				break;
			
			default:
				l_ret |= TIMER_E_NOT_OK;
     8ca:	83 e0       	ldi	r24, 0x03	; 3
     8cc:	08 95       	ret
	}
}

u8_en_timerErrorsType TIMER_init (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	08 95       	ret
     8d2:	80 e0       	ldi	r24, 0x00	; 0
     8d4:	08 95       	ret
     8d6:	80 e0       	ldi	r24, 0x00	; 0
				l_ret |= TIMER_E_NOT_OK;
				break;
		}
	}
	return l_ret;
}
     8d8:	08 95       	ret

000008da <TIMER_start>:
u8_en_timerErrorsType TIMER_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==st_config || st_config->u8_timerNum >= TIMER_INVALID_NUM || st_config->u8_timerClock >= TIMER_INVALID_CLOCK)
     8da:	00 97       	sbiw	r24, 0x00	; 0
     8dc:	09 f4       	brne	.+2      	; 0x8e0 <TIMER_start+0x6>
     8de:	3b c1       	rjmp	.+630    	; 0xb56 <TIMER_start+0x27c>
     8e0:	dc 01       	movw	r26, r24
     8e2:	2c 91       	ld	r18, X
     8e4:	23 30       	cpi	r18, 0x03	; 3
     8e6:	08 f0       	brcs	.+2      	; 0x8ea <TIMER_start+0x10>
     8e8:	38 c1       	rjmp	.+624    	; 0xb5a <TIMER_start+0x280>
     8ea:	11 96       	adiw	r26, 0x01	; 1
     8ec:	ec 91       	ld	r30, X
     8ee:	ea 30       	cpi	r30, 0x0A	; 10
     8f0:	08 f0       	brcs	.+2      	; 0x8f4 <TIMER_start+0x1a>
     8f2:	35 c1       	rjmp	.+618    	; 0xb5e <TIMER_start+0x284>
		l_ret = TIMER_E_NOT_OK;
	}
	else
	{
		/*Configure the TIMER Pres-scaler value for Timer-x clock*/
		switch(st_config->u8_timerNum)
     8f4:	21 30       	cpi	r18, 0x01	; 1
     8f6:	09 f4       	brne	.+2      	; 0x8fa <TIMER_start+0x20>
     8f8:	68 c0       	rjmp	.+208    	; 0x9ca <TIMER_start+0xf0>
     8fa:	20 f0       	brcs	.+8      	; 0x904 <TIMER_start+0x2a>
     8fc:	22 30       	cpi	r18, 0x02	; 2
     8fe:	09 f4       	brne	.+2      	; 0x902 <TIMER_start+0x28>
     900:	c7 c0       	rjmp	.+398    	; 0xa90 <TIMER_start+0x1b6>
     902:	2f c1       	rjmp	.+606    	; 0xb62 <TIMER_start+0x288>
		{
			case TIMER_0:
				switch(st_config->u8_timerClock)
     904:	8e 2f       	mov	r24, r30
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	8a 30       	cpi	r24, 0x0A	; 10
     90a:	91 05       	cpc	r25, r1
     90c:	08 f0       	brcs	.+2      	; 0x910 <TIMER_start+0x36>
     90e:	2b c1       	rjmp	.+598    	; 0xb66 <TIMER_start+0x28c>
     910:	fc 01       	movw	r30, r24
     912:	e6 5d       	subi	r30, 0xD6	; 214
     914:	ff 4f       	sbci	r31, 0xFF	; 255
     916:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__tablejump2__>
				{
					case TIMER_NO_CLOCK:
						CLEAR_BIT(TCCR0,CS00);
     91a:	83 b7       	in	r24, 0x33	; 51
     91c:	8e 7f       	andi	r24, 0xFE	; 254
     91e:	83 bf       	out	0x33, r24	; 51
						CLEAR_BIT(TCCR0,CS01);
     920:	83 b7       	in	r24, 0x33	; 51
     922:	8d 7f       	andi	r24, 0xFD	; 253
     924:	83 bf       	out	0x33, r24	; 51
						CLEAR_BIT(TCCR0,CS02);
     926:	83 b7       	in	r24, 0x33	; 51
     928:	8b 7f       	andi	r24, 0xFB	; 251
     92a:	83 bf       	out	0x33, r24	; 51
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     92c:	80 e0       	ldi	r24, 0x00	; 0
				{
					case TIMER_NO_CLOCK:
						CLEAR_BIT(TCCR0,CS00);
						CLEAR_BIT(TCCR0,CS01);
						CLEAR_BIT(TCCR0,CS02);
						break;
     92e:	08 95       	ret
					case TIMER_F_CPU_CLOCK:
						SET_BIT(TCCR0,CS00);
     930:	83 b7       	in	r24, 0x33	; 51
     932:	81 60       	ori	r24, 0x01	; 1
     934:	83 bf       	out	0x33, r24	; 51
						CLEAR_BIT(TCCR0,CS01);
     936:	83 b7       	in	r24, 0x33	; 51
     938:	8d 7f       	andi	r24, 0xFD	; 253
     93a:	83 bf       	out	0x33, r24	; 51
						CLEAR_BIT(TCCR0,CS02);
     93c:	83 b7       	in	r24, 0x33	; 51
     93e:	8b 7f       	andi	r24, 0xFB	; 251
     940:	83 bf       	out	0x33, r24	; 51
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     942:	80 e0       	ldi	r24, 0x00	; 0
						break;
					case TIMER_F_CPU_CLOCK:
						SET_BIT(TCCR0,CS00);
						CLEAR_BIT(TCCR0,CS01);
						CLEAR_BIT(TCCR0,CS02);
						break;
     944:	08 95       	ret
					case TIMER_F_CPU_8:
						CLEAR_BIT(TCCR0,CS00);
     946:	83 b7       	in	r24, 0x33	; 51
     948:	8e 7f       	andi	r24, 0xFE	; 254
     94a:	83 bf       	out	0x33, r24	; 51
						SET_BIT(TCCR0,CS01);
     94c:	83 b7       	in	r24, 0x33	; 51
     94e:	82 60       	ori	r24, 0x02	; 2
     950:	83 bf       	out	0x33, r24	; 51
						CLEAR_BIT(TCCR0,CS02);
     952:	83 b7       	in	r24, 0x33	; 51
     954:	8b 7f       	andi	r24, 0xFB	; 251
     956:	83 bf       	out	0x33, r24	; 51
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     958:	80 e0       	ldi	r24, 0x00	; 0
						break;
					case TIMER_F_CPU_8:
						CLEAR_BIT(TCCR0,CS00);
						SET_BIT(TCCR0,CS01);
						CLEAR_BIT(TCCR0,CS02);
						break;
     95a:	08 95       	ret
					case TIMER_F_CPU_64:
						SET_BIT(TCCR0,CS00);
     95c:	83 b7       	in	r24, 0x33	; 51
     95e:	81 60       	ori	r24, 0x01	; 1
     960:	83 bf       	out	0x33, r24	; 51
						SET_BIT(TCCR0,CS01);
     962:	83 b7       	in	r24, 0x33	; 51
     964:	82 60       	ori	r24, 0x02	; 2
     966:	83 bf       	out	0x33, r24	; 51
						CLEAR_BIT(TCCR0,CS02);
     968:	83 b7       	in	r24, 0x33	; 51
     96a:	8b 7f       	andi	r24, 0xFB	; 251
     96c:	83 bf       	out	0x33, r24	; 51
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     96e:	80 e0       	ldi	r24, 0x00	; 0
						break;
					case TIMER_F_CPU_64:
						SET_BIT(TCCR0,CS00);
						SET_BIT(TCCR0,CS01);
						CLEAR_BIT(TCCR0,CS02);
						break;
     970:	08 95       	ret
					case TIMER_F_CPU_256:
						CLEAR_BIT(TCCR0,CS00);
     972:	83 b7       	in	r24, 0x33	; 51
     974:	8e 7f       	andi	r24, 0xFE	; 254
     976:	83 bf       	out	0x33, r24	; 51
						CLEAR_BIT(TCCR0,CS01);
     978:	83 b7       	in	r24, 0x33	; 51
     97a:	8d 7f       	andi	r24, 0xFD	; 253
     97c:	83 bf       	out	0x33, r24	; 51
						SET_BIT(TCCR0,CS02);
     97e:	83 b7       	in	r24, 0x33	; 51
     980:	84 60       	ori	r24, 0x04	; 4
     982:	83 bf       	out	0x33, r24	; 51
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     984:	80 e0       	ldi	r24, 0x00	; 0
						break;
					case TIMER_F_CPU_256:
						CLEAR_BIT(TCCR0,CS00);
						CLEAR_BIT(TCCR0,CS01);
						SET_BIT(TCCR0,CS02);
						break;
     986:	08 95       	ret
					case TIMER_F_CPU_1024:
						SET_BIT(TCCR0,CS00);
     988:	83 b7       	in	r24, 0x33	; 51
     98a:	81 60       	ori	r24, 0x01	; 1
     98c:	83 bf       	out	0x33, r24	; 51
						CLEAR_BIT(TCCR0,CS01);
     98e:	83 b7       	in	r24, 0x33	; 51
     990:	8d 7f       	andi	r24, 0xFD	; 253
     992:	83 bf       	out	0x33, r24	; 51
						SET_BIT(TCCR0,CS02);	
     994:	83 b7       	in	r24, 0x33	; 51
     996:	84 60       	ori	r24, 0x04	; 4
     998:	83 bf       	out	0x33, r24	; 51
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     99a:	80 e0       	ldi	r24, 0x00	; 0
						break;
					case TIMER_F_CPU_1024:
						SET_BIT(TCCR0,CS00);
						CLEAR_BIT(TCCR0,CS01);
						SET_BIT(TCCR0,CS02);	
						break;
     99c:	08 95       	ret
					case TIMER_EXTERNAL_CLK_FALLING_EDGE:
						CLEAR_BIT(TCCR0,CS00);
     99e:	83 b7       	in	r24, 0x33	; 51
     9a0:	8e 7f       	andi	r24, 0xFE	; 254
     9a2:	83 bf       	out	0x33, r24	; 51
						SET_BIT(TCCR0,CS01);
     9a4:	83 b7       	in	r24, 0x33	; 51
     9a6:	82 60       	ori	r24, 0x02	; 2
     9a8:	83 bf       	out	0x33, r24	; 51
						SET_BIT(TCCR0,CS02);
     9aa:	83 b7       	in	r24, 0x33	; 51
     9ac:	84 60       	ori	r24, 0x04	; 4
     9ae:	83 bf       	out	0x33, r24	; 51
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     9b0:	80 e0       	ldi	r24, 0x00	; 0
						break;
					case TIMER_EXTERNAL_CLK_FALLING_EDGE:
						CLEAR_BIT(TCCR0,CS00);
						SET_BIT(TCCR0,CS01);
						SET_BIT(TCCR0,CS02);
						break;
     9b2:	08 95       	ret
					case TIMER_EXTERNAL_CLK_RISING_EDGE:
						SET_BIT(TCCR0,CS00);
     9b4:	83 b7       	in	r24, 0x33	; 51
     9b6:	81 60       	ori	r24, 0x01	; 1
     9b8:	83 bf       	out	0x33, r24	; 51
						SET_BIT(TCCR0,CS01);
     9ba:	83 b7       	in	r24, 0x33	; 51
     9bc:	82 60       	ori	r24, 0x02	; 2
     9be:	83 bf       	out	0x33, r24	; 51
						SET_BIT(TCCR0,CS02);
     9c0:	83 b7       	in	r24, 0x33	; 51
     9c2:	84 60       	ori	r24, 0x04	; 4
     9c4:	83 bf       	out	0x33, r24	; 51
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     9c6:	80 e0       	ldi	r24, 0x00	; 0
						break;
					case TIMER_EXTERNAL_CLK_RISING_EDGE:
						SET_BIT(TCCR0,CS00);
						SET_BIT(TCCR0,CS01);
						SET_BIT(TCCR0,CS02);
						break;
     9c8:	08 95       	ret
						break;
				}
				break;
				
			case TIMER_1:
				switch(st_config->u8_timerClock)
     9ca:	8e 2f       	mov	r24, r30
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	8a 30       	cpi	r24, 0x0A	; 10
     9d0:	91 05       	cpc	r25, r1
     9d2:	08 f0       	brcs	.+2      	; 0x9d6 <TIMER_start+0xfc>
     9d4:	ca c0       	rjmp	.+404    	; 0xb6a <TIMER_start+0x290>
     9d6:	fc 01       	movw	r30, r24
     9d8:	ec 5c       	subi	r30, 0xCC	; 204
     9da:	ff 4f       	sbci	r31, 0xFF	; 255
     9dc:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__tablejump2__>
				{
					case TIMER_NO_CLOCK:
						CLEAR_BIT(TCCR1B,CS10);
     9e0:	8e b5       	in	r24, 0x2e	; 46
     9e2:	8e 7f       	andi	r24, 0xFE	; 254
     9e4:	8e bd       	out	0x2e, r24	; 46
						CLEAR_BIT(TCCR1B,CS11);
     9e6:	8e b5       	in	r24, 0x2e	; 46
     9e8:	8d 7f       	andi	r24, 0xFD	; 253
     9ea:	8e bd       	out	0x2e, r24	; 46
						CLEAR_BIT(TCCR1B,CS12);
     9ec:	8e b5       	in	r24, 0x2e	; 46
     9ee:	8b 7f       	andi	r24, 0xFB	; 251
     9f0:	8e bd       	out	0x2e, r24	; 46
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     9f2:	80 e0       	ldi	r24, 0x00	; 0
				{
					case TIMER_NO_CLOCK:
						CLEAR_BIT(TCCR1B,CS10);
						CLEAR_BIT(TCCR1B,CS11);
						CLEAR_BIT(TCCR1B,CS12);
						break;
     9f4:	08 95       	ret
					case TIMER_F_CPU_CLOCK:
						SET_BIT(TCCR1B,CS10);
     9f6:	8e b5       	in	r24, 0x2e	; 46
     9f8:	81 60       	ori	r24, 0x01	; 1
     9fa:	8e bd       	out	0x2e, r24	; 46
						CLEAR_BIT(TCCR1B,CS11);
     9fc:	8e b5       	in	r24, 0x2e	; 46
     9fe:	8d 7f       	andi	r24, 0xFD	; 253
     a00:	8e bd       	out	0x2e, r24	; 46
						CLEAR_BIT(TCCR1B,CS12);
     a02:	8e b5       	in	r24, 0x2e	; 46
     a04:	8b 7f       	andi	r24, 0xFB	; 251
     a06:	8e bd       	out	0x2e, r24	; 46
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     a08:	80 e0       	ldi	r24, 0x00	; 0
						break;
					case TIMER_F_CPU_CLOCK:
						SET_BIT(TCCR1B,CS10);
						CLEAR_BIT(TCCR1B,CS11);
						CLEAR_BIT(TCCR1B,CS12);
						break;
     a0a:	08 95       	ret
					case TIMER_F_CPU_8:
						CLEAR_BIT(TCCR1B,CS10);
     a0c:	8e b5       	in	r24, 0x2e	; 46
     a0e:	8e 7f       	andi	r24, 0xFE	; 254
     a10:	8e bd       	out	0x2e, r24	; 46
						SET_BIT(TCCR1B,CS11);
     a12:	8e b5       	in	r24, 0x2e	; 46
     a14:	82 60       	ori	r24, 0x02	; 2
     a16:	8e bd       	out	0x2e, r24	; 46
						CLEAR_BIT(TCCR1B,CS12);
     a18:	8e b5       	in	r24, 0x2e	; 46
     a1a:	8b 7f       	andi	r24, 0xFB	; 251
     a1c:	8e bd       	out	0x2e, r24	; 46
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     a1e:	80 e0       	ldi	r24, 0x00	; 0
						break;
					case TIMER_F_CPU_8:
						CLEAR_BIT(TCCR1B,CS10);
						SET_BIT(TCCR1B,CS11);
						CLEAR_BIT(TCCR1B,CS12);
						break;
     a20:	08 95       	ret
					case TIMER_F_CPU_64:
						SET_BIT(TCCR1B,CS10);
     a22:	8e b5       	in	r24, 0x2e	; 46
     a24:	81 60       	ori	r24, 0x01	; 1
     a26:	8e bd       	out	0x2e, r24	; 46
						SET_BIT(TCCR1B,CS11);
     a28:	8e b5       	in	r24, 0x2e	; 46
     a2a:	82 60       	ori	r24, 0x02	; 2
     a2c:	8e bd       	out	0x2e, r24	; 46
						CLEAR_BIT(TCCR1B,CS12);
     a2e:	8e b5       	in	r24, 0x2e	; 46
     a30:	8b 7f       	andi	r24, 0xFB	; 251
     a32:	8e bd       	out	0x2e, r24	; 46
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     a34:	80 e0       	ldi	r24, 0x00	; 0
						break;
					case TIMER_F_CPU_64:
						SET_BIT(TCCR1B,CS10);
						SET_BIT(TCCR1B,CS11);
						CLEAR_BIT(TCCR1B,CS12);
						break;
     a36:	08 95       	ret
					case TIMER_F_CPU_256:
						CLEAR_BIT(TCCR1B,CS10);
     a38:	8e b5       	in	r24, 0x2e	; 46
     a3a:	8e 7f       	andi	r24, 0xFE	; 254
     a3c:	8e bd       	out	0x2e, r24	; 46
						CLEAR_BIT(TCCR1B,CS11);
     a3e:	8e b5       	in	r24, 0x2e	; 46
     a40:	8d 7f       	andi	r24, 0xFD	; 253
     a42:	8e bd       	out	0x2e, r24	; 46
						SET_BIT(TCCR1B,CS12);
     a44:	8e b5       	in	r24, 0x2e	; 46
     a46:	84 60       	ori	r24, 0x04	; 4
     a48:	8e bd       	out	0x2e, r24	; 46
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     a4a:	80 e0       	ldi	r24, 0x00	; 0
						break;
					case TIMER_F_CPU_256:
						CLEAR_BIT(TCCR1B,CS10);
						CLEAR_BIT(TCCR1B,CS11);
						SET_BIT(TCCR1B,CS12);
						break;
     a4c:	08 95       	ret
					case TIMER_F_CPU_1024:
						SET_BIT(TCCR1B,CS10);
     a4e:	8e b5       	in	r24, 0x2e	; 46
     a50:	81 60       	ori	r24, 0x01	; 1
     a52:	8e bd       	out	0x2e, r24	; 46
						CLEAR_BIT(TCCR1B,CS11);
     a54:	8e b5       	in	r24, 0x2e	; 46
     a56:	8d 7f       	andi	r24, 0xFD	; 253
     a58:	8e bd       	out	0x2e, r24	; 46
						SET_BIT(TCCR1B,CS12);	
     a5a:	8e b5       	in	r24, 0x2e	; 46
     a5c:	84 60       	ori	r24, 0x04	; 4
     a5e:	8e bd       	out	0x2e, r24	; 46
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     a60:	80 e0       	ldi	r24, 0x00	; 0
						break;
					case TIMER_F_CPU_1024:
						SET_BIT(TCCR1B,CS10);
						CLEAR_BIT(TCCR1B,CS11);
						SET_BIT(TCCR1B,CS12);	
						break;
     a62:	08 95       	ret
					case TIMER_EXTERNAL_CLK_FALLING_EDGE:
						CLEAR_BIT(TCCR1B,CS10);
     a64:	8e b5       	in	r24, 0x2e	; 46
     a66:	8e 7f       	andi	r24, 0xFE	; 254
     a68:	8e bd       	out	0x2e, r24	; 46
						SET_BIT(TCCR1B,CS11);
     a6a:	8e b5       	in	r24, 0x2e	; 46
     a6c:	82 60       	ori	r24, 0x02	; 2
     a6e:	8e bd       	out	0x2e, r24	; 46
						SET_BIT(TCCR1B,CS12);
     a70:	8e b5       	in	r24, 0x2e	; 46
     a72:	84 60       	ori	r24, 0x04	; 4
     a74:	8e bd       	out	0x2e, r24	; 46
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     a76:	80 e0       	ldi	r24, 0x00	; 0
						break;
					case TIMER_EXTERNAL_CLK_FALLING_EDGE:
						CLEAR_BIT(TCCR1B,CS10);
						SET_BIT(TCCR1B,CS11);
						SET_BIT(TCCR1B,CS12);
						break;
     a78:	08 95       	ret
					case TIMER_EXTERNAL_CLK_RISING_EDGE:
						SET_BIT(TCCR1B,CS10);
     a7a:	8e b5       	in	r24, 0x2e	; 46
     a7c:	81 60       	ori	r24, 0x01	; 1
     a7e:	8e bd       	out	0x2e, r24	; 46
						SET_BIT(TCCR1B,CS11);
     a80:	8e b5       	in	r24, 0x2e	; 46
     a82:	82 60       	ori	r24, 0x02	; 2
     a84:	8e bd       	out	0x2e, r24	; 46
						SET_BIT(TCCR1B,CS12);
     a86:	8e b5       	in	r24, 0x2e	; 46
     a88:	84 60       	ori	r24, 0x04	; 4
     a8a:	8e bd       	out	0x2e, r24	; 46
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     a8c:	80 e0       	ldi	r24, 0x00	; 0
						break;
					case TIMER_EXTERNAL_CLK_RISING_EDGE:
						SET_BIT(TCCR1B,CS10);
						SET_BIT(TCCR1B,CS11);
						SET_BIT(TCCR1B,CS12);
						break;
     a8e:	08 95       	ret
						break;
				}			
				break;
				
			case TIMER_2:
				switch(st_config->u8_timerClock)
     a90:	8e 2f       	mov	r24, r30
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	88 30       	cpi	r24, 0x08	; 8
     a96:	91 05       	cpc	r25, r1
     a98:	08 f0       	brcs	.+2      	; 0xa9c <TIMER_start+0x1c2>
     a9a:	69 c0       	rjmp	.+210    	; 0xb6e <TIMER_start+0x294>
     a9c:	fc 01       	movw	r30, r24
     a9e:	e2 5c       	subi	r30, 0xC2	; 194
     aa0:	ff 4f       	sbci	r31, 0xFF	; 255
     aa2:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__tablejump2__>
				{
					case TIMER_NO_CLOCK:
						CLEAR_BIT(TCCR2,CS20);
     aa6:	85 b5       	in	r24, 0x25	; 37
     aa8:	8b 7f       	andi	r24, 0xFB	; 251
     aaa:	85 bd       	out	0x25, r24	; 37
						CLEAR_BIT(TCCR2,CS21);
     aac:	85 b5       	in	r24, 0x25	; 37
     aae:	8d 7f       	andi	r24, 0xFD	; 253
     ab0:	85 bd       	out	0x25, r24	; 37
						CLEAR_BIT(TCCR2,CS22);
     ab2:	85 b5       	in	r24, 0x25	; 37
     ab4:	8e 7f       	andi	r24, 0xFE	; 254
     ab6:	85 bd       	out	0x25, r24	; 37
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     ab8:	80 e0       	ldi	r24, 0x00	; 0
				{
					case TIMER_NO_CLOCK:
						CLEAR_BIT(TCCR2,CS20);
						CLEAR_BIT(TCCR2,CS21);
						CLEAR_BIT(TCCR2,CS22);
						break;
     aba:	08 95       	ret
					case TIMER_F_CPU_CLOCK:
						SET_BIT(TCCR2,CS20);
     abc:	85 b5       	in	r24, 0x25	; 37
     abe:	84 60       	ori	r24, 0x04	; 4
     ac0:	85 bd       	out	0x25, r24	; 37
						CLEAR_BIT(TCCR2,CS21);
     ac2:	85 b5       	in	r24, 0x25	; 37
     ac4:	8d 7f       	andi	r24, 0xFD	; 253
     ac6:	85 bd       	out	0x25, r24	; 37
						CLEAR_BIT(TCCR2,CS22);
     ac8:	85 b5       	in	r24, 0x25	; 37
     aca:	8e 7f       	andi	r24, 0xFE	; 254
     acc:	85 bd       	out	0x25, r24	; 37
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     ace:	80 e0       	ldi	r24, 0x00	; 0
						break;
					case TIMER_F_CPU_CLOCK:
						SET_BIT(TCCR2,CS20);
						CLEAR_BIT(TCCR2,CS21);
						CLEAR_BIT(TCCR2,CS22);
						break;
     ad0:	08 95       	ret
					case TIMER_F_CPU_8:
						CLEAR_BIT(TCCR2,CS20);
     ad2:	85 b5       	in	r24, 0x25	; 37
     ad4:	8b 7f       	andi	r24, 0xFB	; 251
     ad6:	85 bd       	out	0x25, r24	; 37
						SET_BIT(TCCR2,CS21);
     ad8:	85 b5       	in	r24, 0x25	; 37
     ada:	82 60       	ori	r24, 0x02	; 2
     adc:	85 bd       	out	0x25, r24	; 37
						CLEAR_BIT(TCCR2,CS22);
     ade:	85 b5       	in	r24, 0x25	; 37
     ae0:	8e 7f       	andi	r24, 0xFE	; 254
     ae2:	85 bd       	out	0x25, r24	; 37
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     ae4:	80 e0       	ldi	r24, 0x00	; 0
						break;
					case TIMER_F_CPU_8:
						CLEAR_BIT(TCCR2,CS20);
						SET_BIT(TCCR2,CS21);
						CLEAR_BIT(TCCR2,CS22);
						break;
     ae6:	08 95       	ret
					case TIMER_F_CPU_32:
						SET_BIT(TCCR2,CS20);
     ae8:	85 b5       	in	r24, 0x25	; 37
     aea:	84 60       	ori	r24, 0x04	; 4
     aec:	85 bd       	out	0x25, r24	; 37
						SET_BIT(TCCR2,CS21);
     aee:	85 b5       	in	r24, 0x25	; 37
     af0:	82 60       	ori	r24, 0x02	; 2
     af2:	85 bd       	out	0x25, r24	; 37
						CLEAR_BIT(TCCR2,CS22);
     af4:	85 b5       	in	r24, 0x25	; 37
     af6:	8e 7f       	andi	r24, 0xFE	; 254
     af8:	85 bd       	out	0x25, r24	; 37
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     afa:	80 e0       	ldi	r24, 0x00	; 0
						break;
					case TIMER_F_CPU_32:
						SET_BIT(TCCR2,CS20);
						SET_BIT(TCCR2,CS21);
						CLEAR_BIT(TCCR2,CS22);
						break;
     afc:	08 95       	ret
					case TIMER_F_CPU_64:
						CLEAR_BIT(TCCR2,CS20);
     afe:	85 b5       	in	r24, 0x25	; 37
     b00:	8b 7f       	andi	r24, 0xFB	; 251
     b02:	85 bd       	out	0x25, r24	; 37
						CLEAR_BIT(TCCR2,CS21);
     b04:	85 b5       	in	r24, 0x25	; 37
     b06:	8d 7f       	andi	r24, 0xFD	; 253
     b08:	85 bd       	out	0x25, r24	; 37
						SET_BIT(TCCR2,CS22);
     b0a:	85 b5       	in	r24, 0x25	; 37
     b0c:	81 60       	ori	r24, 0x01	; 1
     b0e:	85 bd       	out	0x25, r24	; 37
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     b10:	80 e0       	ldi	r24, 0x00	; 0
						break;
					case TIMER_F_CPU_64:
						CLEAR_BIT(TCCR2,CS20);
						CLEAR_BIT(TCCR2,CS21);
						SET_BIT(TCCR2,CS22);
						break;
     b12:	08 95       	ret
					case TIMER_F_CPU_128:
						SET_BIT(TCCR2,CS20);
     b14:	85 b5       	in	r24, 0x25	; 37
     b16:	84 60       	ori	r24, 0x04	; 4
     b18:	85 bd       	out	0x25, r24	; 37
						CLEAR_BIT(TCCR2,CS21);
     b1a:	85 b5       	in	r24, 0x25	; 37
     b1c:	8d 7f       	andi	r24, 0xFD	; 253
     b1e:	85 bd       	out	0x25, r24	; 37
						SET_BIT(TCCR2,CS22);
     b20:	85 b5       	in	r24, 0x25	; 37
     b22:	81 60       	ori	r24, 0x01	; 1
     b24:	85 bd       	out	0x25, r24	; 37
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     b26:	80 e0       	ldi	r24, 0x00	; 0
						break;
					case TIMER_F_CPU_128:
						SET_BIT(TCCR2,CS20);
						CLEAR_BIT(TCCR2,CS21);
						SET_BIT(TCCR2,CS22);
						break;
     b28:	08 95       	ret
					case TIMER_F_CPU_256:
						CLEAR_BIT(TCCR2,CS20);
     b2a:	85 b5       	in	r24, 0x25	; 37
     b2c:	8b 7f       	andi	r24, 0xFB	; 251
     b2e:	85 bd       	out	0x25, r24	; 37
						SET_BIT(TCCR2,CS21);
     b30:	85 b5       	in	r24, 0x25	; 37
     b32:	82 60       	ori	r24, 0x02	; 2
     b34:	85 bd       	out	0x25, r24	; 37
						SET_BIT(TCCR2,CS22);
     b36:	85 b5       	in	r24, 0x25	; 37
     b38:	81 60       	ori	r24, 0x01	; 1
     b3a:	85 bd       	out	0x25, r24	; 37
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     b3c:	80 e0       	ldi	r24, 0x00	; 0
						break;
					case TIMER_F_CPU_256:
						CLEAR_BIT(TCCR2,CS20);
						SET_BIT(TCCR2,CS21);
						SET_BIT(TCCR2,CS22);
						break;
     b3e:	08 95       	ret
					case TIMER_F_CPU_1024:
						SET_BIT(TCCR2,CS20);
     b40:	85 b5       	in	r24, 0x25	; 37
     b42:	84 60       	ori	r24, 0x04	; 4
     b44:	85 bd       	out	0x25, r24	; 37
						SET_BIT(TCCR2,CS21);
     b46:	85 b5       	in	r24, 0x25	; 37
     b48:	82 60       	ori	r24, 0x02	; 2
     b4a:	85 bd       	out	0x25, r24	; 37
						SET_BIT(TCCR2,CS22);	
     b4c:	85 b5       	in	r24, 0x25	; 37
     b4e:	81 60       	ori	r24, 0x01	; 1
     b50:	85 bd       	out	0x25, r24	; 37
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     b52:	80 e0       	ldi	r24, 0x00	; 0
						break;
					case TIMER_F_CPU_1024:
						SET_BIT(TCCR2,CS20);
						SET_BIT(TCCR2,CS21);
						SET_BIT(TCCR2,CS22);	
						break;
     b54:	08 95       	ret
u8_en_timerErrorsType TIMER_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==st_config || st_config->u8_timerNum >= TIMER_INVALID_NUM || st_config->u8_timerClock >= TIMER_INVALID_CLOCK)
	{
		l_ret = TIMER_E_NOT_OK;
     b56:	83 e0       	ldi	r24, 0x03	; 3
     b58:	08 95       	ret
     b5a:	83 e0       	ldi	r24, 0x03	; 3
     b5c:	08 95       	ret
     b5e:	83 e0       	ldi	r24, 0x03	; 3
     b60:	08 95       	ret
						break;
				}
				break;
				
			default:
				l_ret |= TIMER_E_NOT_OK;
     b62:	83 e0       	ldi	r24, 0x03	; 3
     b64:	08 95       	ret
						SET_BIT(TCCR0,CS00);
						SET_BIT(TCCR0,CS01);
						SET_BIT(TCCR0,CS02);
						break;
					default:
						l_ret = TIMER_E_NOT_OK;
     b66:	83 e0       	ldi	r24, 0x03	; 3
     b68:	08 95       	ret
						SET_BIT(TCCR1B,CS10);
						SET_BIT(TCCR1B,CS11);
						SET_BIT(TCCR1B,CS12);
						break;
					default:
						l_ret = TIMER_E_NOT_OK;
     b6a:	83 e0       	ldi	r24, 0x03	; 3
     b6c:	08 95       	ret
						SET_BIT(TCCR2,CS20);
						SET_BIT(TCCR2,CS21);
						SET_BIT(TCCR2,CS22);	
						break;
					default:
						l_ret = TIMER_E_NOT_OK;
     b6e:	83 e0       	ldi	r24, 0x03	; 3
				l_ret |= TIMER_E_NOT_OK;
				break;
		}
	}
	return l_ret;
}
     b70:	08 95       	ret

00000b72 <TIMER_stop>:
u8_en_timerErrorsType TIMER_stop (u8_en_timerNumberType u8_a_timerNum)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if( u8_a_timerNum >= TIMER_INVALID_NUM )
     b72:	83 30       	cpi	r24, 0x03	; 3
     b74:	38 f5       	brcc	.+78     	; 0xbc4 <TIMER_stop+0x52>
	{
		l_ret = TIMER_E_NOT_OK;
	}
	else
	{
		switch(u8_a_timerNum)
     b76:	81 30       	cpi	r24, 0x01	; 1
     b78:	79 f0       	breq	.+30     	; 0xb98 <TIMER_stop+0x26>
     b7a:	18 f0       	brcs	.+6      	; 0xb82 <TIMER_stop+0x10>
     b7c:	82 30       	cpi	r24, 0x02	; 2
     b7e:	b9 f0       	breq	.+46     	; 0xbae <TIMER_stop+0x3c>
     b80:	23 c0       	rjmp	.+70     	; 0xbc8 <TIMER_stop+0x56>
		{
			case TIMER_0:
				/*use no clock to halt timer0*/
				CLEAR_BIT(TCCR0,CS00);
     b82:	83 b7       	in	r24, 0x33	; 51
     b84:	8e 7f       	andi	r24, 0xFE	; 254
     b86:	83 bf       	out	0x33, r24	; 51
				CLEAR_BIT(TCCR0,CS01);
     b88:	83 b7       	in	r24, 0x33	; 51
     b8a:	8d 7f       	andi	r24, 0xFD	; 253
     b8c:	83 bf       	out	0x33, r24	; 51
				CLEAR_BIT(TCCR0,CS02);
     b8e:	83 b7       	in	r24, 0x33	; 51
     b90:	8b 7f       	andi	r24, 0xFB	; 251
     b92:	83 bf       	out	0x33, r24	; 51
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_stop (u8_en_timerNumberType u8_a_timerNum)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     b94:	80 e0       	ldi	r24, 0x00	; 0
			case TIMER_0:
				/*use no clock to halt timer0*/
				CLEAR_BIT(TCCR0,CS00);
				CLEAR_BIT(TCCR0,CS01);
				CLEAR_BIT(TCCR0,CS02);
				break;
     b96:	08 95       	ret
				
			case TIMER_1:
				/*use no clock to halt timer1*/
				CLEAR_BIT(TCCR1B,CS10);
     b98:	8e b5       	in	r24, 0x2e	; 46
     b9a:	8e 7f       	andi	r24, 0xFE	; 254
     b9c:	8e bd       	out	0x2e, r24	; 46
				CLEAR_BIT(TCCR1B,CS11);
     b9e:	8e b5       	in	r24, 0x2e	; 46
     ba0:	8d 7f       	andi	r24, 0xFD	; 253
     ba2:	8e bd       	out	0x2e, r24	; 46
				CLEAR_BIT(TCCR1B,CS12);
     ba4:	8e b5       	in	r24, 0x2e	; 46
     ba6:	8b 7f       	andi	r24, 0xFB	; 251
     ba8:	8e bd       	out	0x2e, r24	; 46
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_stop (u8_en_timerNumberType u8_a_timerNum)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     baa:	80 e0       	ldi	r24, 0x00	; 0
			case TIMER_1:
				/*use no clock to halt timer1*/
				CLEAR_BIT(TCCR1B,CS10);
				CLEAR_BIT(TCCR1B,CS11);
				CLEAR_BIT(TCCR1B,CS12);
				break;
     bac:	08 95       	ret
				
			case TIMER_2:
				/*use no clock to halt timer2*/
				CLEAR_BIT(TCCR2,CS20);
     bae:	85 b5       	in	r24, 0x25	; 37
     bb0:	8b 7f       	andi	r24, 0xFB	; 251
     bb2:	85 bd       	out	0x25, r24	; 37
				CLEAR_BIT(TCCR2,CS21);
     bb4:	85 b5       	in	r24, 0x25	; 37
     bb6:	8d 7f       	andi	r24, 0xFD	; 253
     bb8:	85 bd       	out	0x25, r24	; 37
				CLEAR_BIT(TCCR2,CS22);
     bba:	85 b5       	in	r24, 0x25	; 37
     bbc:	8e 7f       	andi	r24, 0xFE	; 254
     bbe:	85 bd       	out	0x25, r24	; 37
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_stop (u8_en_timerNumberType u8_a_timerNum)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     bc0:	80 e0       	ldi	r24, 0x00	; 0
			case TIMER_2:
				/*use no clock to halt timer2*/
				CLEAR_BIT(TCCR2,CS20);
				CLEAR_BIT(TCCR2,CS21);
				CLEAR_BIT(TCCR2,CS22);
				break;
     bc2:	08 95       	ret
u8_en_timerErrorsType TIMER_stop (u8_en_timerNumberType u8_a_timerNum)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if( u8_a_timerNum >= TIMER_INVALID_NUM )
	{
		l_ret = TIMER_E_NOT_OK;
     bc4:	83 e0       	ldi	r24, 0x03	; 3
     bc6:	08 95       	ret
				CLEAR_BIT(TCCR2,CS21);
				CLEAR_BIT(TCCR2,CS22);
				break;
				
			default:
				l_ret |= TIMER_E_NOT_OK;
     bc8:	83 e0       	ldi	r24, 0x03	; 3
				break;
		}
	}
	return l_ret;
}
     bca:	08 95       	ret

00000bcc <TIMER_reset>:

u8_en_timerErrorsType TIMER_reset (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==st_config || st_config->u8_timerNum >= TIMER_INVALID_NUM || st_config->u8_timerClock >= TIMER_INVALID_CLOCK)
     bcc:	00 97       	sbiw	r24, 0x00	; 0
     bce:	f1 f0       	breq	.+60     	; 0xc0c <TIMER_reset+0x40>
     bd0:	fc 01       	movw	r30, r24
     bd2:	20 81       	ld	r18, Z
     bd4:	23 30       	cpi	r18, 0x03	; 3
     bd6:	e0 f4       	brcc	.+56     	; 0xc10 <TIMER_reset+0x44>
     bd8:	31 81       	ldd	r19, Z+1	; 0x01
     bda:	3a 30       	cpi	r19, 0x0A	; 10
     bdc:	d8 f4       	brcc	.+54     	; 0xc14 <TIMER_reset+0x48>
	{
		l_ret = TIMER_E_NOT_OK;
	}
	else
	{
		switch(st_config->u8_timerNum)
     bde:	21 30       	cpi	r18, 0x01	; 1
     be0:	49 f0       	breq	.+18     	; 0xbf4 <TIMER_reset+0x28>
     be2:	18 f0       	brcs	.+6      	; 0xbea <TIMER_reset+0x1e>
     be4:	22 30       	cpi	r18, 0x02	; 2
     be6:	69 f0       	breq	.+26     	; 0xc02 <TIMER_reset+0x36>
     be8:	17 c0       	rjmp	.+46     	; 0xc18 <TIMER_reset+0x4c>
		{
			case TIMER_0:
				
				/*Configure initial value in TCNT1(high&low) for Timer0 to start count from it*/
				TCNT0 = st_config->u16_timer_InitialValue;
     bea:	fc 01       	movw	r30, r24
     bec:	82 81       	ldd	r24, Z+2	; 0x02
     bee:	82 bf       	out	0x32, r24	; 50
	return l_ret;
}

u8_en_timerErrorsType TIMER_reset (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     bf0:	80 e0       	ldi	r24, 0x00	; 0
		{
			case TIMER_0:
				
				/*Configure initial value in TCNT1(high&low) for Timer0 to start count from it*/
				TCNT0 = st_config->u16_timer_InitialValue;
				break;
     bf2:	08 95       	ret
				
			case TIMER_1:
			
				/*Configure initial value in TCNT1(high&low) for Timer1 to start count from it*/
				TCNT1 = st_config->u16_timer_InitialValue;
     bf4:	fc 01       	movw	r30, r24
     bf6:	82 81       	ldd	r24, Z+2	; 0x02
     bf8:	93 81       	ldd	r25, Z+3	; 0x03
     bfa:	9d bd       	out	0x2d, r25	; 45
     bfc:	8c bd       	out	0x2c, r24	; 44
	return l_ret;
}

u8_en_timerErrorsType TIMER_reset (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     bfe:	80 e0       	ldi	r24, 0x00	; 0
				
			case TIMER_1:
			
				/*Configure initial value in TCNT1(high&low) for Timer1 to start count from it*/
				TCNT1 = st_config->u16_timer_InitialValue;
				break;
     c00:	08 95       	ret
				
			case TIMER_2:
				
				/*Configure initial value in TCNT1(high&low) for Timer2 to start count from it*/
				TCNT2 = st_config->u16_timer_InitialValue;
     c02:	fc 01       	movw	r30, r24
     c04:	82 81       	ldd	r24, Z+2	; 0x02
     c06:	84 bd       	out	0x24, r24	; 36
	return l_ret;
}

u8_en_timerErrorsType TIMER_reset (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     c08:	80 e0       	ldi	r24, 0x00	; 0
				
			case TIMER_2:
				
				/*Configure initial value in TCNT1(high&low) for Timer2 to start count from it*/
				TCNT2 = st_config->u16_timer_InitialValue;
				break;
     c0a:	08 95       	ret
u8_en_timerErrorsType TIMER_reset (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==st_config || st_config->u8_timerNum >= TIMER_INVALID_NUM || st_config->u8_timerClock >= TIMER_INVALID_CLOCK)
	{
		l_ret = TIMER_E_NOT_OK;
     c0c:	83 e0       	ldi	r24, 0x03	; 3
     c0e:	08 95       	ret
     c10:	83 e0       	ldi	r24, 0x03	; 3
     c12:	08 95       	ret
     c14:	83 e0       	ldi	r24, 0x03	; 3
     c16:	08 95       	ret
				/*Configure initial value in TCNT1(high&low) for Timer2 to start count from it*/
				TCNT2 = st_config->u16_timer_InitialValue;
				break;
				
			default:
				l_ret |= TIMER_E_NOT_OK;
     c18:	83 e0       	ldi	r24, 0x03	; 3
				break;
		}
	}
	return l_ret;
}
     c1a:	08 95       	ret

00000c1c <TIMER_setCallBack>:
u8_en_timerErrorsType TIMER_setCallBack( void(*a_timerCallBack)(void), u8_en_timerNumberType u8_a_timerNum )
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==a_timerCallBack || u8_a_timerNum >= TIMER_INVALID_NUM )
     c1c:	00 97       	sbiw	r24, 0x00	; 0
     c1e:	d1 f0       	breq	.+52     	; 0xc54 <TIMER_setCallBack+0x38>
     c20:	63 30       	cpi	r22, 0x03	; 3
     c22:	d0 f4       	brcc	.+52     	; 0xc58 <TIMER_setCallBack+0x3c>
	{
		l_ret = TIMER_E_NOT_OK;
	}
	else
	{
		switch(u8_a_timerNum)
     c24:	61 30       	cpi	r22, 0x01	; 1
     c26:	51 f0       	breq	.+20     	; 0xc3c <TIMER_setCallBack+0x20>
     c28:	18 f0       	brcs	.+6      	; 0xc30 <TIMER_setCallBack+0x14>
     c2a:	62 30       	cpi	r22, 0x02	; 2
     c2c:	69 f0       	breq	.+26     	; 0xc48 <TIMER_setCallBack+0x2c>
     c2e:	16 c0       	rjmp	.+44     	; 0xc5c <TIMER_setCallBack+0x40>
		{
			case TIMER_0:
				/* load the address of the Call back function from upper layer in the global pointer to function */
				sg_Timer0_callBackPtr = a_timerCallBack;
     c30:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <sg_Timer0_callBackPtr+0x1>
     c34:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <sg_Timer0_callBackPtr>
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_setCallBack( void(*a_timerCallBack)(void), u8_en_timerNumberType u8_a_timerNum )
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     c38:	80 e0       	ldi	r24, 0x00	; 0
		switch(u8_a_timerNum)
		{
			case TIMER_0:
				/* load the address of the Call back function from upper layer in the global pointer to function */
				sg_Timer0_callBackPtr = a_timerCallBack;
				break;
     c3a:	08 95       	ret
			case TIMER_1:
				/* load the address of the Call back function from upper layer in the global pointer to function */
				sg_Timer1_callBackPtr = a_timerCallBack;
     c3c:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <sg_Timer1_callBackPtr+0x1>
     c40:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <sg_Timer1_callBackPtr>
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_setCallBack( void(*a_timerCallBack)(void), u8_en_timerNumberType u8_a_timerNum )
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     c44:	80 e0       	ldi	r24, 0x00	; 0
				sg_Timer0_callBackPtr = a_timerCallBack;
				break;
			case TIMER_1:
				/* load the address of the Call back function from upper layer in the global pointer to function */
				sg_Timer1_callBackPtr = a_timerCallBack;
				break;
     c46:	08 95       	ret
			case TIMER_2:
				/* load the address of the Call back function from upper layer in the global pointer to function */
				sg_Timer2_callBackPtr = a_timerCallBack;
     c48:	90 93 9c 00 	sts	0x009C, r25	; 0x80009c <sg_Timer2_callBackPtr+0x1>
     c4c:	80 93 9b 00 	sts	0x009B, r24	; 0x80009b <sg_Timer2_callBackPtr>
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_setCallBack( void(*a_timerCallBack)(void), u8_en_timerNumberType u8_a_timerNum )
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     c50:	80 e0       	ldi	r24, 0x00	; 0
				sg_Timer1_callBackPtr = a_timerCallBack;
				break;
			case TIMER_2:
				/* load the address of the Call back function from upper layer in the global pointer to function */
				sg_Timer2_callBackPtr = a_timerCallBack;
				break;
     c52:	08 95       	ret
u8_en_timerErrorsType TIMER_setCallBack( void(*a_timerCallBack)(void), u8_en_timerNumberType u8_a_timerNum )
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==a_timerCallBack || u8_a_timerNum >= TIMER_INVALID_NUM )
	{
		l_ret = TIMER_E_NOT_OK;
     c54:	83 e0       	ldi	r24, 0x03	; 3
     c56:	08 95       	ret
     c58:	83 e0       	ldi	r24, 0x03	; 3
     c5a:	08 95       	ret
			case TIMER_2:
				/* load the address of the Call back function from upper layer in the global pointer to function */
				sg_Timer2_callBackPtr = a_timerCallBack;
				break;
			default:
				l_ret = TIMER_E_NOT_OK;
     c5c:	83 e0       	ldi	r24, 0x03	; 3
				break;
		}
	}
	return l_ret;
     c5e:	08 95       	ret

00000c60 <init_theArrayOfIDs>:
	else
	{
		enu_l_sos_ret = SOS_NOT_INITIALIZED;
	}
	return enu_l_sos_ret;
}
     c60:	80 91 be 00 	lds	r24, 0x00BE	; 0x8000be <enu_sg_sos_init_status>
     c64:	81 30       	cpi	r24, 0x01	; 1
     c66:	99 f1       	breq	.+102    	; 0xcce <init_theArrayOfIDs+0x6e>
     c68:	80 e0       	ldi	r24, 0x00	; 0
     c6a:	08 95       	ret
     c6c:	51 e0       	ldi	r21, 0x01	; 1
     c6e:	54 0f       	add	r21, r20
     c70:	85 2f       	mov	r24, r21
     c72:	29 c0       	rjmp	.+82     	; 0xcc6 <init_theArrayOfIDs+0x66>
     c74:	e4 2f       	mov	r30, r20
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	ee 0f       	add	r30, r30
     c7a:	ff 1f       	adc	r31, r31
     c7c:	e8 54       	subi	r30, 0x48	; 72
     c7e:	ff 4f       	sbci	r31, 0xFF	; 255
     c80:	a0 81       	ld	r26, Z
     c82:	b1 81       	ldd	r27, Z+1	; 0x01
     c84:	2c 91       	ld	r18, X
     c86:	e8 2f       	mov	r30, r24
     c88:	f0 e0       	ldi	r31, 0x00	; 0
     c8a:	ee 0f       	add	r30, r30
     c8c:	ff 1f       	adc	r31, r31
     c8e:	e8 54       	subi	r30, 0x48	; 72
     c90:	ff 4f       	sbci	r31, 0xFF	; 255
     c92:	01 90       	ld	r0, Z+
     c94:	f0 81       	ld	r31, Z
     c96:	e0 2d       	mov	r30, r0
     c98:	90 81       	ld	r25, Z
     c9a:	29 17       	cp	r18, r25
     c9c:	48 f4       	brcc	.+18     	; 0xcb0 <init_theArrayOfIDs+0x50>
     c9e:	e3 2f       	mov	r30, r19
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	11 96       	adiw	r26, 0x01	; 1
     ca4:	9c 91       	ld	r25, X
     ca6:	ef 55       	subi	r30, 0x5F	; 95
     ca8:	ff 4f       	sbci	r31, 0xFF	; 255
     caa:	90 83       	st	Z, r25
     cac:	3f 5f       	subi	r19, 0xFF	; 255
     cae:	0a c0       	rjmp	.+20     	; 0xcc4 <init_theArrayOfIDs+0x64>
     cb0:	92 17       	cp	r25, r18
     cb2:	40 f4       	brcc	.+16     	; 0xcc4 <init_theArrayOfIDs+0x64>
     cb4:	63 2f       	mov	r22, r19
     cb6:	70 e0       	ldi	r23, 0x00	; 0
     cb8:	91 81       	ldd	r25, Z+1	; 0x01
     cba:	fb 01       	movw	r30, r22
     cbc:	ef 55       	subi	r30, 0x5F	; 95
     cbe:	ff 4f       	sbci	r31, 0xFF	; 255
     cc0:	90 83       	st	Z, r25
     cc2:	3f 5f       	subi	r19, 0xFF	; 255
     cc4:	8f 5f       	subi	r24, 0xFF	; 255
     cc6:	83 30       	cpi	r24, 0x03	; 3
     cc8:	a8 f2       	brcs	.-86     	; 0xc74 <init_theArrayOfIDs+0x14>
     cca:	45 2f       	mov	r20, r21
     ccc:	02 c0       	rjmp	.+4      	; 0xcd2 <init_theArrayOfIDs+0x72>
     cce:	30 e0       	ldi	r19, 0x00	; 0
     cd0:	40 e0       	ldi	r20, 0x00	; 0
     cd2:	43 30       	cpi	r20, 0x03	; 3
     cd4:	58 f2       	brcs	.-106    	; 0xc6c <init_theArrayOfIDs+0xc>
     cd6:	81 e0       	ldi	r24, 0x01	; 1
     cd8:	08 95       	ret

00000cda <SOS_timer_handelr>:
     cda:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <uintu8_sg_sos_index_1>
     cde:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <uintu8_sg_sos_index_1+0x1>
     ce2:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <uintu8_sg_sos_index_1+0x2>
     ce6:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <uintu8_sg_sos_index_1+0x3>
     cea:	2e c0       	rjmp	.+92     	; 0xd48 <SOS_timer_handelr+0x6e>
     cec:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <uintu8_sg_sos_index_1>
     cf0:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <uintu8_sg_sos_index_1+0x1>
     cf4:	a0 91 aa 00 	lds	r26, 0x00AA	; 0x8000aa <uintu8_sg_sos_index_1+0x2>
     cf8:	b0 91 ab 00 	lds	r27, 0x00AB	; 0x8000ab <uintu8_sg_sos_index_1+0x3>
     cfc:	88 0f       	add	r24, r24
     cfe:	99 1f       	adc	r25, r25
     d00:	88 0f       	add	r24, r24
     d02:	99 1f       	adc	r25, r25
     d04:	fc 01       	movw	r30, r24
     d06:	e4 55       	subi	r30, 0x54	; 84
     d08:	ff 4f       	sbci	r31, 0xFF	; 255
     d0a:	40 81       	ld	r20, Z
     d0c:	51 81       	ldd	r21, Z+1	; 0x01
     d0e:	62 81       	ldd	r22, Z+2	; 0x02
     d10:	73 81       	ldd	r23, Z+3	; 0x03
     d12:	4f 5f       	subi	r20, 0xFF	; 255
     d14:	5f 4f       	sbci	r21, 0xFF	; 255
     d16:	6f 4f       	sbci	r22, 0xFF	; 255
     d18:	7f 4f       	sbci	r23, 0xFF	; 255
     d1a:	40 83       	st	Z, r20
     d1c:	51 83       	std	Z+1, r21	; 0x01
     d1e:	62 83       	std	Z+2, r22	; 0x02
     d20:	73 83       	std	Z+3, r23	; 0x03
     d22:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <uintu8_sg_sos_index_1>
     d26:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <uintu8_sg_sos_index_1+0x1>
     d2a:	a0 91 aa 00 	lds	r26, 0x00AA	; 0x8000aa <uintu8_sg_sos_index_1+0x2>
     d2e:	b0 91 ab 00 	lds	r27, 0x00AB	; 0x8000ab <uintu8_sg_sos_index_1+0x3>
     d32:	01 96       	adiw	r24, 0x01	; 1
     d34:	a1 1d       	adc	r26, r1
     d36:	b1 1d       	adc	r27, r1
     d38:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <uintu8_sg_sos_index_1>
     d3c:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <uintu8_sg_sos_index_1+0x1>
     d40:	a0 93 aa 00 	sts	0x00AA, r26	; 0x8000aa <uintu8_sg_sos_index_1+0x2>
     d44:	b0 93 ab 00 	sts	0x00AB, r27	; 0x8000ab <uintu8_sg_sos_index_1+0x3>
     d48:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <uintu8_sg_sos_index_1>
     d4c:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <uintu8_sg_sos_index_1+0x1>
     d50:	a0 91 aa 00 	lds	r26, 0x00AA	; 0x8000aa <uintu8_sg_sos_index_1+0x2>
     d54:	b0 91 ab 00 	lds	r27, 0x00AB	; 0x8000ab <uintu8_sg_sos_index_1+0x3>
     d58:	03 97       	sbiw	r24, 0x03	; 3
     d5a:	a1 05       	cpc	r26, r1
     d5c:	b1 05       	cpc	r27, r1
     d5e:	30 f2       	brcs	.-116    	; 0xcec <SOS_timer_handelr+0x12>
     d60:	8a e7       	ldi	r24, 0x7A	; 122
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	0e 94 0e 08 	call	0x101c	; 0x101c <TIMER_Manager_reset>
     d68:	08 95       	ret

00000d6a <SOS_init>:
     d6a:	80 91 be 00 	lds	r24, 0x00BE	; 0x8000be <enu_sg_sos_init_status>
     d6e:	81 11       	cpse	r24, r1
     d70:	1d c0       	rjmp	.+58     	; 0xdac <SOS_init+0x42>
     d72:	8d e6       	ldi	r24, 0x6D	; 109
     d74:	96 e0       	ldi	r25, 0x06	; 6
     d76:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <st_g_sos_timer+0x6>
     d7a:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <st_g_sos_timer+0x5>
     d7e:	8a e7       	ldi	r24, 0x7A	; 122
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	0e 94 d5 07 	call	0xfaa	; 0xfaa <TIMER_Manager_init>
     d86:	83 30       	cpi	r24, 0x03	; 3
     d88:	99 f0       	breq	.+38     	; 0xdb0 <SOS_init+0x46>
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	09 c0       	rjmp	.+18     	; 0xda0 <SOS_init+0x36>
     d8e:	e9 2f       	mov	r30, r25
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	ee 0f       	add	r30, r30
     d94:	ff 1f       	adc	r31, r31
     d96:	e8 54       	subi	r30, 0x48	; 72
     d98:	ff 4f       	sbci	r31, 0xFF	; 255
     d9a:	11 82       	std	Z+1, r1	; 0x01
     d9c:	10 82       	st	Z, r1
     d9e:	9f 5f       	subi	r25, 0xFF	; 255
     da0:	93 30       	cpi	r25, 0x03	; 3
     da2:	a8 f3       	brcs	.-22     	; 0xd8e <SOS_init+0x24>
     da4:	91 e0       	ldi	r25, 0x01	; 1
     da6:	90 93 be 00 	sts	0x00BE, r25	; 0x8000be <enu_sg_sos_init_status>
     daa:	08 95       	ret
     dac:	84 e0       	ldi	r24, 0x04	; 4
     dae:	08 95       	ret
     db0:	86 e0       	ldi	r24, 0x06	; 6
     db2:	08 95       	ret

00000db4 <SOS_disable>:

/*************************************/
enu_sos_status_t SOS_disable (void)
{
	enu_sos_status_t enu_l_sos_ret = SOS_E_OK;
	if((SOS_FLAG_INITIALIZED==enu_sg_sos_init_status))
     db4:	80 91 be 00 	lds	r24, 0x00BE	; 0x8000be <enu_sg_sos_init_status>
     db8:	81 30       	cpi	r24, 0x01	; 1
     dba:	49 f4       	brne	.+18     	; 0xdce <SOS_disable+0x1a>
	{
		//stop the timer
		enu_l_sos_ret = TIMER_Manager_stop(st_g_sos_timer.u8_timerNum);
     dbc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <st_g_sos_timer>
     dc0:	0e 94 07 08 	call	0x100e	; 0x100e <TIMER_Manager_stop>
		if(TIMER_E_NOT_OK==enu_l_sos_ret)
     dc4:	83 30       	cpi	r24, 0x03	; 3
     dc6:	21 f0       	breq	.+8      	; 0xdd0 <SOS_disable+0x1c>
		{
			enu_l_sos_ret = TIMER_E_NOT_OK;
		}
		else
		{
			u8_sg_sos_enable_flag = FALSE;
     dc8:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <u8_sg_sos_enable_flag>
     dcc:	08 95       	ret
		}
		
	}
	else
	{
		enu_l_sos_ret = SOS_NOT_INITIALIZED;
     dce:	83 e0       	ldi	r24, 0x03	; 3
	}
	return enu_l_sos_ret;
}
     dd0:	08 95       	ret

00000dd2 <SOS_run>:

enu_sos_status_t SOS_run (void)
{		
	while (TRUE)
	{
		if (Start_Flag==1)
     dd2:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <Start_Flag>
     dd6:	81 30       	cpi	r24, 0x01	; 1
     dd8:	09 f0       	breq	.+2      	; 0xddc <SOS_run+0xa>
     dda:	99 c0       	rjmp	.+306    	; 0xf0e <SOS_run+0x13c>
		{
			enu_sos_status_t  enu_l_sos_ret = SOS_E_OK;
			uint8_t u8_l_task_index = ZERO_INIT;
			uint8_t u8_l_timerStopFlag = ZERO_INIT;
	
			if((SOS_FLAG_INITIALIZED==enu_sg_sos_init_status))
     ddc:	80 91 be 00 	lds	r24, 0x00BE	; 0x8000be <enu_sg_sos_init_status>
     de0:	81 30       	cpi	r24, 0x01	; 1
     de2:	b9 f7       	brne	.-18     	; 0xdd2 <SOS_run>
			{
				enu_l_sos_ret = TIMER_Manager_start(&st_g_sos_timer);
     de4:	8a e7       	ldi	r24, 0x7A	; 122
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	0e 94 f5 07 	call	0xfea	; 0xfea <TIMER_Manager_start>
		
				if(TIMER_E_NOT_OK==enu_l_sos_ret)
     dec:	83 30       	cpi	r24, 0x03	; 3
     dee:	89 f3       	breq	.-30     	; 0xdd2 <SOS_run>
				{
					enu_l_sos_ret = SOS_TIMER_E_NOK;
				}
				else
				{
						enu_l_sos_ret = init_theArrayOfIDs();
     df0:	0e 94 30 06 	call	0xc60	; 0xc60 <init_theArrayOfIDs>

							for(uintu8_sg_sos_index_2=0;uintu8_sg_sos_index_2<SOS_TASKS_MAX_NUM;uintu8_sg_sos_index_2++)
     df4:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <uintu8_sg_sos_index_2>
     df8:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <uintu8_sg_sos_index_2+0x1>
     dfc:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <uintu8_sg_sos_index_2+0x2>
     e00:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <uintu8_sg_sos_index_2+0x3>
     e04:	76 c0       	rjmp	.+236    	; 0xef2 <SOS_run+0x120>
							{
								if((strPtrs_tasks[u8Arr_sg_ID_of_taskPriorty[uintu8_sg_sos_index_2]]->u16_task_priodic_time)==
     e06:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <uintu8_sg_sos_index_2>
     e0a:	90 91 a5 00 	lds	r25, 0x00A5	; 0x8000a5 <uintu8_sg_sos_index_2+0x1>
     e0e:	a0 91 a6 00 	lds	r26, 0x00A6	; 0x8000a6 <uintu8_sg_sos_index_2+0x2>
     e12:	b0 91 a7 00 	lds	r27, 0x00A7	; 0x8000a7 <uintu8_sg_sos_index_2+0x3>
     e16:	fc 01       	movw	r30, r24
     e18:	ef 55       	subi	r30, 0x5F	; 95
     e1a:	ff 4f       	sbci	r31, 0xFF	; 255
     e1c:	e0 81       	ld	r30, Z
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	ee 0f       	add	r30, r30
     e22:	ff 1f       	adc	r31, r31
     e24:	e8 54       	subi	r30, 0x48	; 72
     e26:	ff 4f       	sbci	r31, 0xFF	; 255
     e28:	01 90       	ld	r0, Z+
     e2a:	f0 81       	ld	r31, Z
     e2c:	e0 2d       	mov	r30, r0
     e2e:	82 81       	ldd	r24, Z+2	; 0x02
     e30:	93 81       	ldd	r25, Z+3	; 0x03
     e32:	a0 e0       	ldi	r26, 0x00	; 0
     e34:	b0 e0       	ldi	r27, 0x00	; 0
								(u8Arr_sg__of_taskCounters[u8Arr_sg_ID_of_taskPriorty[uintu8_sg_sos_index_2]]))
     e36:	40 91 a4 00 	lds	r20, 0x00A4	; 0x8000a4 <uintu8_sg_sos_index_2>
     e3a:	50 91 a5 00 	lds	r21, 0x00A5	; 0x8000a5 <uintu8_sg_sos_index_2+0x1>
     e3e:	60 91 a6 00 	lds	r22, 0x00A6	; 0x8000a6 <uintu8_sg_sos_index_2+0x2>
     e42:	70 91 a7 00 	lds	r23, 0x00A7	; 0x8000a7 <uintu8_sg_sos_index_2+0x3>
     e46:	fa 01       	movw	r30, r20
     e48:	ef 55       	subi	r30, 0x5F	; 95
     e4a:	ff 4f       	sbci	r31, 0xFF	; 255
     e4c:	e0 81       	ld	r30, Z
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	ee 0f       	add	r30, r30
     e52:	ff 1f       	adc	r31, r31
     e54:	ee 0f       	add	r30, r30
     e56:	ff 1f       	adc	r31, r31
     e58:	e4 55       	subi	r30, 0x54	; 84
     e5a:	ff 4f       	sbci	r31, 0xFF	; 255
     e5c:	40 81       	ld	r20, Z
     e5e:	51 81       	ldd	r21, Z+1	; 0x01
     e60:	62 81       	ldd	r22, Z+2	; 0x02
     e62:	73 81       	ldd	r23, Z+3	; 0x03
				{
						enu_l_sos_ret = init_theArrayOfIDs();

							for(uintu8_sg_sos_index_2=0;uintu8_sg_sos_index_2<SOS_TASKS_MAX_NUM;uintu8_sg_sos_index_2++)
							{
								if((strPtrs_tasks[u8Arr_sg_ID_of_taskPriorty[uintu8_sg_sos_index_2]]->u16_task_priodic_time)==
     e64:	84 17       	cp	r24, r20
     e66:	95 07       	cpc	r25, r21
     e68:	a6 07       	cpc	r26, r22
     e6a:	b7 07       	cpc	r27, r23
     e6c:	79 f5       	brne	.+94     	; 0xecc <SOS_run+0xfa>
								(u8Arr_sg__of_taskCounters[u8Arr_sg_ID_of_taskPriorty[uintu8_sg_sos_index_2]]))
								{
									(strPtrs_tasks[u8Arr_sg_ID_of_taskPriorty[uintu8_sg_sos_index_2]]->Fptr_task_callBack)();		
     e6e:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <uintu8_sg_sos_index_2>
     e72:	90 91 a5 00 	lds	r25, 0x00A5	; 0x8000a5 <uintu8_sg_sos_index_2+0x1>
     e76:	a0 91 a6 00 	lds	r26, 0x00A6	; 0x8000a6 <uintu8_sg_sos_index_2+0x2>
     e7a:	b0 91 a7 00 	lds	r27, 0x00A7	; 0x8000a7 <uintu8_sg_sos_index_2+0x3>
     e7e:	fc 01       	movw	r30, r24
     e80:	ef 55       	subi	r30, 0x5F	; 95
     e82:	ff 4f       	sbci	r31, 0xFF	; 255
     e84:	e0 81       	ld	r30, Z
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	ee 0f       	add	r30, r30
     e8a:	ff 1f       	adc	r31, r31
     e8c:	e8 54       	subi	r30, 0x48	; 72
     e8e:	ff 4f       	sbci	r31, 0xFF	; 255
     e90:	01 90       	ld	r0, Z+
     e92:	f0 81       	ld	r31, Z
     e94:	e0 2d       	mov	r30, r0
     e96:	05 80       	ldd	r0, Z+5	; 0x05
     e98:	f6 81       	ldd	r31, Z+6	; 0x06
     e9a:	e0 2d       	mov	r30, r0
     e9c:	09 95       	icall
									u8Arr_sg__of_taskCounters[u8Arr_sg_ID_of_taskPriorty[uintu8_sg_sos_index_2]]=0;
     e9e:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <uintu8_sg_sos_index_2>
     ea2:	90 91 a5 00 	lds	r25, 0x00A5	; 0x8000a5 <uintu8_sg_sos_index_2+0x1>
     ea6:	a0 91 a6 00 	lds	r26, 0x00A6	; 0x8000a6 <uintu8_sg_sos_index_2+0x2>
     eaa:	b0 91 a7 00 	lds	r27, 0x00A7	; 0x8000a7 <uintu8_sg_sos_index_2+0x3>
     eae:	fc 01       	movw	r30, r24
     eb0:	ef 55       	subi	r30, 0x5F	; 95
     eb2:	ff 4f       	sbci	r31, 0xFF	; 255
     eb4:	e0 81       	ld	r30, Z
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	ee 0f       	add	r30, r30
     eba:	ff 1f       	adc	r31, r31
     ebc:	ee 0f       	add	r30, r30
     ebe:	ff 1f       	adc	r31, r31
     ec0:	e4 55       	subi	r30, 0x54	; 84
     ec2:	ff 4f       	sbci	r31, 0xFF	; 255
     ec4:	10 82       	st	Z, r1
     ec6:	11 82       	std	Z+1, r1	; 0x01
     ec8:	12 82       	std	Z+2, r1	; 0x02
     eca:	13 82       	std	Z+3, r1	; 0x03
				}
				else
				{
						enu_l_sos_ret = init_theArrayOfIDs();

							for(uintu8_sg_sos_index_2=0;uintu8_sg_sos_index_2<SOS_TASKS_MAX_NUM;uintu8_sg_sos_index_2++)
     ecc:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <uintu8_sg_sos_index_2>
     ed0:	90 91 a5 00 	lds	r25, 0x00A5	; 0x8000a5 <uintu8_sg_sos_index_2+0x1>
     ed4:	a0 91 a6 00 	lds	r26, 0x00A6	; 0x8000a6 <uintu8_sg_sos_index_2+0x2>
     ed8:	b0 91 a7 00 	lds	r27, 0x00A7	; 0x8000a7 <uintu8_sg_sos_index_2+0x3>
     edc:	01 96       	adiw	r24, 0x01	; 1
     ede:	a1 1d       	adc	r26, r1
     ee0:	b1 1d       	adc	r27, r1
     ee2:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <uintu8_sg_sos_index_2>
     ee6:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <uintu8_sg_sos_index_2+0x1>
     eea:	a0 93 a6 00 	sts	0x00A6, r26	; 0x8000a6 <uintu8_sg_sos_index_2+0x2>
     eee:	b0 93 a7 00 	sts	0x00A7, r27	; 0x8000a7 <uintu8_sg_sos_index_2+0x3>
     ef2:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <uintu8_sg_sos_index_2>
     ef6:	90 91 a5 00 	lds	r25, 0x00A5	; 0x8000a5 <uintu8_sg_sos_index_2+0x1>
     efa:	a0 91 a6 00 	lds	r26, 0x00A6	; 0x8000a6 <uintu8_sg_sos_index_2+0x2>
     efe:	b0 91 a7 00 	lds	r27, 0x00A7	; 0x8000a7 <uintu8_sg_sos_index_2+0x3>
     f02:	03 97       	sbiw	r24, 0x03	; 3
     f04:	a1 05       	cpc	r26, r1
     f06:	b1 05       	cpc	r27, r1
     f08:	08 f4       	brcc	.+2      	; 0xf0c <SOS_run+0x13a>
     f0a:	7d cf       	rjmp	.-262    	; 0xe06 <SOS_run+0x34>
     f0c:	62 cf       	rjmp	.-316    	; 0xdd2 <SOS_run>
			{
				enu_l_sos_ret = SOS_E_NOK;
			}
			}
	
		else if (Start_Flag==2)
     f0e:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <Start_Flag>
     f12:	82 30       	cpi	r24, 0x02	; 2
     f14:	09 f0       	breq	.+2      	; 0xf18 <SOS_run+0x146>
     f16:	5d cf       	rjmp	.-326    	; 0xdd2 <SOS_run>
		{
			SOS_disable();
     f18:	0e 94 da 06 	call	0xdb4	; 0xdb4 <SOS_disable>
     f1c:	5a cf       	rjmp	.-332    	; 0xdd2 <SOS_run>

00000f1e <SOS_create_task>:
/*we need to make sure that we don't access a null ptr*/
enu_sos_status_t SOS_create_task (str_task_control_data_t *strPtr_task_control_data)
{
	enu_sos_status_t enu_l_sos_ret = SOS_E_OK;
	uint8_t u8_l_task_index_3_ = ZERO_INIT;
	if (strPtr_task_control_data->u8_task_id < SOS_TASKS_MAX_NUM)
     f1e:	fc 01       	movw	r30, r24
     f20:	21 81       	ldd	r18, Z+1	; 0x01
     f22:	23 30       	cpi	r18, 0x03	; 3
     f24:	00 f5       	brcc	.+64     	; 0xf66 <SOS_create_task+0x48>
	{
		if ((strPtr_task_control_data->Fptr_task_callBack!=NULL) && (strPtr_task_control_data)  &&
     f26:	45 81       	ldd	r20, Z+5	; 0x05
     f28:	56 81       	ldd	r21, Z+6	; 0x06
     f2a:	45 2b       	or	r20, r21
     f2c:	f1 f0       	breq	.+60     	; 0xf6a <SOS_create_task+0x4c>
     f2e:	00 97       	sbiw	r24, 0x00	; 0
     f30:	f1 f0       	breq	.+60     	; 0xf6e <SOS_create_task+0x50>
		 enu_sg_sos_init_status==SOS_FLAG_INITIALIZED && strPtrs_tasks[strPtr_task_control_data->u8_task_id]->Fptr_task_callBack==NULL)
     f32:	30 91 be 00 	lds	r19, 0x00BE	; 0x8000be <enu_sg_sos_init_status>
{
	enu_sos_status_t enu_l_sos_ret = SOS_E_OK;
	uint8_t u8_l_task_index_3_ = ZERO_INIT;
	if (strPtr_task_control_data->u8_task_id < SOS_TASKS_MAX_NUM)
	{
		if ((strPtr_task_control_data->Fptr_task_callBack!=NULL) && (strPtr_task_control_data)  &&
     f36:	31 30       	cpi	r19, 0x01	; 1
     f38:	e1 f4       	brne	.+56     	; 0xf72 <SOS_create_task+0x54>
		 enu_sg_sos_init_status==SOS_FLAG_INITIALIZED && strPtrs_tasks[strPtr_task_control_data->u8_task_id]->Fptr_task_callBack==NULL)
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	f9 01       	movw	r30, r18
     f3e:	ee 0f       	add	r30, r30
     f40:	ff 1f       	adc	r31, r31
     f42:	e8 54       	subi	r30, 0x48	; 72
     f44:	ff 4f       	sbci	r31, 0xFF	; 255
     f46:	01 90       	ld	r0, Z+
     f48:	f0 81       	ld	r31, Z
     f4a:	e0 2d       	mov	r30, r0
     f4c:	45 81       	ldd	r20, Z+5	; 0x05
     f4e:	56 81       	ldd	r21, Z+6	; 0x06
     f50:	45 2b       	or	r20, r21
     f52:	89 f4       	brne	.+34     	; 0xf76 <SOS_create_task+0x58>
		{
			strPtrs_tasks[strPtr_task_control_data->u8_task_id]                        =strPtr_task_control_data;
     f54:	22 0f       	add	r18, r18
     f56:	33 1f       	adc	r19, r19
     f58:	f9 01       	movw	r30, r18
     f5a:	e8 54       	subi	r30, 0x48	; 72
     f5c:	ff 4f       	sbci	r31, 0xFF	; 255
     f5e:	91 83       	std	Z+1, r25	; 0x01
     f60:	80 83       	st	Z, r24
/**************************************/

/*we need to make sure that we don't access a null ptr*/
enu_sos_status_t SOS_create_task (str_task_control_data_t *strPtr_task_control_data)
{
	enu_sos_status_t enu_l_sos_ret = SOS_E_OK;
     f62:	81 e0       	ldi	r24, 0x01	; 1
	if (strPtr_task_control_data->u8_task_id < SOS_TASKS_MAX_NUM)
	{
		if ((strPtr_task_control_data->Fptr_task_callBack!=NULL) && (strPtr_task_control_data)  &&
		 enu_sg_sos_init_status==SOS_FLAG_INITIALIZED && strPtrs_tasks[strPtr_task_control_data->u8_task_id]->Fptr_task_callBack==NULL)
		{
			strPtrs_tasks[strPtr_task_control_data->u8_task_id]                        =strPtr_task_control_data;
     f64:	08 95       	ret
			enu_l_sos_ret=SOS_E_NOK;
		}
	}
	else
	{
		enu_l_sos_ret=SOS_E_NOK;
     f66:	80 e0       	ldi	r24, 0x00	; 0
     f68:	08 95       	ret
			strPtrs_tasks[strPtr_task_control_data->u8_task_id]                        =strPtr_task_control_data;
		}
		else
		{
			/*task id already exist*/
			enu_l_sos_ret=SOS_E_NOK;
     f6a:	80 e0       	ldi	r24, 0x00	; 0
     f6c:	08 95       	ret
     f6e:	80 e0       	ldi	r24, 0x00	; 0
     f70:	08 95       	ret
     f72:	80 e0       	ldi	r24, 0x00	; 0
     f74:	08 95       	ret
     f76:	80 e0       	ldi	r24, 0x00	; 0
		enu_l_sos_ret=SOS_E_NOK;
	}

	return enu_l_sos_ret;

}
     f78:	08 95       	ret

00000f7a <EXT_INTx_setCallBack_manger>:


Std_ReturnType EXT_INTx_setCallBack_manger(void(*a_fptr)(void),  Interrupt_ID_t a_interrupt_number )
{
	Std_ReturnType ret = E_OK;
	if(NULL == a_fptr || a_interrupt_number > NUM_OF_EXT_INTx - 1)
     f7a:	00 97       	sbiw	r24, 0x00	; 0
     f7c:	29 f0       	breq	.+10     	; 0xf88 <EXT_INTx_setCallBack_manger+0xe>
     f7e:	63 30       	cpi	r22, 0x03	; 3
     f80:	28 f4       	brcc	.+10     	; 0xf8c <EXT_INTx_setCallBack_manger+0x12>
	{
		ret = E_NOT_OK;
	}
	else
	{
		ret=EXT_INTx_setCallBack(a_fptr,a_interrupt_number);
     f82:	0e 94 4d 02 	call	0x49a	; 0x49a <EXT_INTx_setCallBack>
     f86:	08 95       	ret
Std_ReturnType EXT_INTx_setCallBack_manger(void(*a_fptr)(void),  Interrupt_ID_t a_interrupt_number )
{
	Std_ReturnType ret = E_OK;
	if(NULL == a_fptr || a_interrupt_number > NUM_OF_EXT_INTx - 1)
	{
		ret = E_NOT_OK;
     f88:	80 e0       	ldi	r24, 0x00	; 0
     f8a:	08 95       	ret
     f8c:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		ret=EXT_INTx_setCallBack(a_fptr,a_interrupt_number);
	}
	return ret;
}
     f8e:	08 95       	ret

00000f90 <EXT_INTx_Init_manger>:

Std_ReturnType EXT_INTx_Init_manger( Interrupt_Config_t *Interrupt_Config_Ptr )
{
	Std_ReturnType ret = E_OK;
	if(NULL == Interrupt_Config_Ptr || Interrupt_Config_Ptr->source_id > NUM_OF_EXT_INTx - 1)
     f90:	00 97       	sbiw	r24, 0x00	; 0
     f92:	39 f0       	breq	.+14     	; 0xfa2 <EXT_INTx_Init_manger+0x12>
     f94:	fc 01       	movw	r30, r24
     f96:	21 81       	ldd	r18, Z+1	; 0x01
     f98:	23 30       	cpi	r18, 0x03	; 3
     f9a:	28 f4       	brcc	.+10     	; 0xfa6 <EXT_INTx_Init_manger+0x16>
	{
		ret = E_NOT_OK;
	}
	else
	{
		ret=EXT_INTx_Init(Interrupt_Config_Ptr);
     f9c:	0e 94 e7 02 	call	0x5ce	; 0x5ce <EXT_INTx_Init>
     fa0:	08 95       	ret
Std_ReturnType EXT_INTx_Init_manger( Interrupt_Config_t *Interrupt_Config_Ptr )
{
	Std_ReturnType ret = E_OK;
	if(NULL == Interrupt_Config_Ptr || Interrupt_Config_Ptr->source_id > NUM_OF_EXT_INTx - 1)
	{
		ret = E_NOT_OK;
     fa2:	80 e0       	ldi	r24, 0x00	; 0
     fa4:	08 95       	ret
     fa6:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		ret=EXT_INTx_Init(Interrupt_Config_Ptr);
	}
	return ret;
}
     fa8:	08 95       	ret

00000faa <TIMER_Manager_init>:
#include "timer_manager.h"
#include "../../MCAL/timer/timer.h"


u8_en_timerErrorsType TIMER_Manager_init (st_timerConfigType* st_config)
{
     faa:	1f 93       	push	r17
     fac:	cf 93       	push	r28
     fae:	df 93       	push	r29
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==st_config || st_config->u8_timerNum >= TIMER_INVALID_NUM || st_config->u8_timerClock >= TIMER_INVALID_CLOCK)
     fb0:	00 97       	sbiw	r24, 0x00	; 0
     fb2:	91 f0       	breq	.+36     	; 0xfd8 <TIMER_Manager_init+0x2e>
     fb4:	fc 01       	movw	r30, r24
     fb6:	20 81       	ld	r18, Z
     fb8:	23 30       	cpi	r18, 0x03	; 3
     fba:	80 f4       	brcc	.+32     	; 0xfdc <TIMER_Manager_init+0x32>
     fbc:	21 81       	ldd	r18, Z+1	; 0x01
     fbe:	2a 30       	cpi	r18, 0x0A	; 10
     fc0:	78 f4       	brcc	.+30     	; 0xfe0 <TIMER_Manager_init+0x36>
     fc2:	ec 01       	movw	r28, r24
	{
		l_ret = TIMER_E_NOT_OK;
	}
	else
	{
		l_ret  = TIMER_init(st_config);
     fc4:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <TIMER_init>
     fc8:	18 2f       	mov	r17, r24
		l_ret |= TIMER_setCallBack(st_config->callBackFunction,st_config->u8_timerNum);
     fca:	68 81       	ld	r22, Y
     fcc:	8d 81       	ldd	r24, Y+5	; 0x05
     fce:	9e 81       	ldd	r25, Y+6	; 0x06
     fd0:	0e 94 0e 06 	call	0xc1c	; 0xc1c <TIMER_setCallBack>
     fd4:	81 2b       	or	r24, r17
     fd6:	05 c0       	rjmp	.+10     	; 0xfe2 <TIMER_Manager_init+0x38>
u8_en_timerErrorsType TIMER_Manager_init (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==st_config || st_config->u8_timerNum >= TIMER_INVALID_NUM || st_config->u8_timerClock >= TIMER_INVALID_CLOCK)
	{
		l_ret = TIMER_E_NOT_OK;
     fd8:	83 e0       	ldi	r24, 0x03	; 3
     fda:	03 c0       	rjmp	.+6      	; 0xfe2 <TIMER_Manager_init+0x38>
     fdc:	83 e0       	ldi	r24, 0x03	; 3
     fde:	01 c0       	rjmp	.+2      	; 0xfe2 <TIMER_Manager_init+0x38>
     fe0:	83 e0       	ldi	r24, 0x03	; 3
	{
		l_ret  = TIMER_init(st_config);
		l_ret |= TIMER_setCallBack(st_config->callBackFunction,st_config->u8_timerNum);
	}
	return l_ret;
}
     fe2:	df 91       	pop	r29
     fe4:	cf 91       	pop	r28
     fe6:	1f 91       	pop	r17
     fe8:	08 95       	ret

00000fea <TIMER_Manager_start>:
u8_en_timerErrorsType TIMER_Manager_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==st_config || st_config->u8_timerNum >= TIMER_INVALID_NUM || st_config->u8_timerClock >= TIMER_INVALID_CLOCK)
     fea:	00 97       	sbiw	r24, 0x00	; 0
     fec:	51 f0       	breq	.+20     	; 0x1002 <TIMER_Manager_start+0x18>
     fee:	fc 01       	movw	r30, r24
     ff0:	20 81       	ld	r18, Z
     ff2:	23 30       	cpi	r18, 0x03	; 3
     ff4:	40 f4       	brcc	.+16     	; 0x1006 <TIMER_Manager_start+0x1c>
     ff6:	21 81       	ldd	r18, Z+1	; 0x01
     ff8:	2a 30       	cpi	r18, 0x0A	; 10
     ffa:	38 f4       	brcc	.+14     	; 0x100a <TIMER_Manager_start+0x20>
	{
		l_ret = TIMER_E_NOT_OK;
	}
	else
	{
		l_ret = TIMER_start(st_config);
     ffc:	0e 94 6d 04 	call	0x8da	; 0x8da <TIMER_start>
    1000:	08 95       	ret
u8_en_timerErrorsType TIMER_Manager_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==st_config || st_config->u8_timerNum >= TIMER_INVALID_NUM || st_config->u8_timerClock >= TIMER_INVALID_CLOCK)
	{
		l_ret = TIMER_E_NOT_OK;
    1002:	83 e0       	ldi	r24, 0x03	; 3
    1004:	08 95       	ret
    1006:	83 e0       	ldi	r24, 0x03	; 3
    1008:	08 95       	ret
    100a:	83 e0       	ldi	r24, 0x03	; 3
	else
	{
		l_ret = TIMER_start(st_config);
	}
	return l_ret;
}
    100c:	08 95       	ret

0000100e <TIMER_Manager_stop>:
u8_en_timerErrorsType TIMER_Manager_stop (u8_en_timerNumberType u8_en_timerNum)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if( u8_en_timerNum >= TIMER_INVALID_NUM )
    100e:	83 30       	cpi	r24, 0x03	; 3
    1010:	18 f4       	brcc	.+6      	; 0x1018 <TIMER_Manager_stop+0xa>
	{
		l_ret = TIMER_E_NOT_OK;
	}
	else
	{
		l_ret = TIMER_stop(u8_en_timerNum);
    1012:	0e 94 b9 05 	call	0xb72	; 0xb72 <TIMER_stop>
    1016:	08 95       	ret
u8_en_timerErrorsType TIMER_Manager_stop (u8_en_timerNumberType u8_en_timerNum)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if( u8_en_timerNum >= TIMER_INVALID_NUM )
	{
		l_ret = TIMER_E_NOT_OK;
    1018:	83 e0       	ldi	r24, 0x03	; 3
	else
	{
		l_ret = TIMER_stop(u8_en_timerNum);
	}
	return l_ret;
}
    101a:	08 95       	ret

0000101c <TIMER_Manager_reset>:
u8_en_timerErrorsType TIMER_Manager_reset (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==st_config || st_config->u8_timerNum >= TIMER_INVALID_NUM || st_config->u8_timerClock >= TIMER_INVALID_CLOCK)
    101c:	00 97       	sbiw	r24, 0x00	; 0
    101e:	51 f0       	breq	.+20     	; 0x1034 <TIMER_Manager_reset+0x18>
    1020:	fc 01       	movw	r30, r24
    1022:	20 81       	ld	r18, Z
    1024:	23 30       	cpi	r18, 0x03	; 3
    1026:	40 f4       	brcc	.+16     	; 0x1038 <TIMER_Manager_reset+0x1c>
    1028:	21 81       	ldd	r18, Z+1	; 0x01
    102a:	2a 30       	cpi	r18, 0x0A	; 10
    102c:	38 f4       	brcc	.+14     	; 0x103c <TIMER_Manager_reset+0x20>
	{
		l_ret = TIMER_E_NOT_OK;
	}
	else
	{
		l_ret = TIMER_reset(st_config);
    102e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <TIMER_reset>
    1032:	08 95       	ret
u8_en_timerErrorsType TIMER_Manager_reset (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==st_config || st_config->u8_timerNum >= TIMER_INVALID_NUM || st_config->u8_timerClock >= TIMER_INVALID_CLOCK)
	{
		l_ret = TIMER_E_NOT_OK;
    1034:	83 e0       	ldi	r24, 0x03	; 3
    1036:	08 95       	ret
    1038:	83 e0       	ldi	r24, 0x03	; 3
    103a:	08 95       	ret
    103c:	83 e0       	ldi	r24, 0x03	; 3
	else
	{
		l_ret = TIMER_reset(st_config);
	}
	return l_ret;
    103e:	08 95       	ret

00001040 <__tablejump2__>:
    1040:	ee 0f       	add	r30, r30
    1042:	ff 1f       	adc	r31, r31
    1044:	05 90       	lpm	r0, Z+
    1046:	f4 91       	lpm	r31, Z
    1048:	e0 2d       	mov	r30, r0
    104a:	09 94       	ijmp

0000104c <_exit>:
    104c:	f8 94       	cli

0000104e <__stop_program>:
    104e:	ff cf       	rjmp	.-2      	; 0x104e <__stop_program>
